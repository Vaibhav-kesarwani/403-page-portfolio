"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/troika-three-text";
exports.ids = ["vendor-chunks/troika-three-text"];
exports.modules = {

/***/ "(ssr)/./node_modules/troika-three-text/dist/troika-three-text.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/troika-three-text/dist/troika-three-text.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlyphsGeometry: () => (/* binding */ GlyphsGeometry),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   configureTextBuilder: () => (/* binding */ configureTextBuilder),\n/* harmony export */   createTextDerivedMaterial: () => (/* binding */ createTextDerivedMaterial),\n/* harmony export */   dumpSDFTextures: () => (/* binding */ dumpSDFTextures),\n/* harmony export */   getCaretAtPoint: () => (/* binding */ getCaretAtPoint),\n/* harmony export */   getSelectionRects: () => (/* binding */ getSelectionRects),\n/* harmony export */   preloadFont: () => (/* binding */ preloadFont),\n/* harmony export */   typesetterWorkerModule: () => (/* binding */ typesetterWorkerModule)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var troika_worker_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! troika-worker-utils */ \"(ssr)/./node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js\");\n/* harmony import */ var webgl_sdf_generator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webgl-sdf-generator */ \"(ssr)/./node_modules/webgl-sdf-generator/dist/webgl-sdf-generator.mjs\");\n/* harmony import */ var bidi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bidi-js */ \"(ssr)/./node_modules/bidi-js/dist/bidi.mjs\");\n/* harmony import */ var troika_three_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! troika-three-utils */ \"(ssr)/./node_modules/troika-three-utils/dist/troika-three-utils.esm.js\");\n\n\n\n\n\n/**\n * Factory function that creates a self-contained environment for processing text typesetting requests.\n *\n * It is important that this function has no closure dependencies, so that it can be easily injected\n * into the source for a Worker without requiring a build step or complex dependency loading. All its\n * dependencies must be passed in at initialization.\n *\n * @param {function} fontParser - a function that accepts an ArrayBuffer of the font data and returns\n * a standardized structure giving access to the font and its glyphs:\n *   {\n *     unitsPerEm: number,\n *     ascender: number,\n *     descender: number,\n *     capHeight: number,\n *     xHeight: number,\n *     lineGap: number,\n *     forEachGlyph(string, fontSize, letterSpacing, callback) {\n *       //invokes callback for each glyph to render, passing it an object:\n *       callback({\n *         index: number,\n *         advanceWidth: number,\n *         xMin: number,\n *         yMin: number,\n *         xMax: number,\n *         yMax: number,\n *         path: string,\n *         pathCommandCount: number\n *       })\n *     }\n *   }\n * @param {object} bidi - the bidi.js implementation object\n * @param {Object} config\n * @return {Object}\n */ function createTypesetter(fontParser, bidi, config) {\n    const { defaultFontURL } = config;\n    /**\n   * Holds parsed font objects by url\n   */ const fonts = Object.create(null);\n    const INF = Infinity;\n    // Set of Unicode Default_Ignorable_Code_Point characters, these will not produce visible glyphs\n    // eslint-disable-next-line no-misleading-character-class\n    const DEFAULT_IGNORABLE_CHARS = /[\\u00AD\\u034F\\u061C\\u115F-\\u1160\\u17B4-\\u17B5\\u180B-\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u3164\\uFE00-\\uFE0F\\uFEFF\\uFFA0\\uFFF0-\\uFFF8]/;\n    // This regex (instead of /\\s/) allows us to select all whitespace EXCEPT for non-breaking white spaces\n    const lineBreakingWhiteSpace = `[^\\\\S\\\\u00A0]`;\n    // Incomplete set of characters that allow line breaking after them\n    // In the future we may consider a full Unicode line breaking algorithm impl: https://www.unicode.org/reports/tr14\n    const BREAK_AFTER_CHARS = new RegExp(`${lineBreakingWhiteSpace}|[\\\\-\\\\u007C\\\\u00AD\\\\u2010\\\\u2012-\\\\u2014\\\\u2027\\\\u2056\\\\u2E17\\\\u2E40]`);\n    /**\n   * Load a given font url\n   */ function doLoadFont(url, callback) {\n        function tryLoad() {\n            const onError = (err)=>{\n                console.error(`Failure loading font ${url}${url === defaultFontURL ? \"\" : \"; trying fallback\"}`, err);\n                if (url !== defaultFontURL) {\n                    url = defaultFontURL;\n                    tryLoad();\n                }\n            };\n            try {\n                const request = new XMLHttpRequest();\n                request.open(\"get\", url, true);\n                request.responseType = \"arraybuffer\";\n                request.onload = function() {\n                    if (request.status >= 400) {\n                        onError(new Error(request.statusText));\n                    } else if (request.status > 0) {\n                        try {\n                            const fontObj = fontParser(request.response);\n                            callback(fontObj);\n                        } catch (e) {\n                            onError(e);\n                        }\n                    }\n                };\n                request.onerror = onError;\n                request.send();\n            } catch (err) {\n                onError(err);\n            }\n        }\n        tryLoad();\n    }\n    /**\n   * Load a given font url if needed, invoking a callback when it's loaded. If already\n   * loaded, the callback will be called synchronously.\n   */ function loadFont(fontUrl, callback) {\n        if (!fontUrl) fontUrl = defaultFontURL;\n        let font = fonts[fontUrl];\n        if (font) {\n            // if currently loading font, add to callbacks, otherwise execute immediately\n            if (font.pending) {\n                font.pending.push(callback);\n            } else {\n                callback(font);\n            }\n        } else {\n            fonts[fontUrl] = {\n                pending: [\n                    callback\n                ]\n            };\n            doLoadFont(fontUrl, (fontObj)=>{\n                let callbacks = fonts[fontUrl].pending;\n                fonts[fontUrl] = fontObj;\n                callbacks.forEach((cb)=>cb(fontObj));\n            });\n        }\n    }\n    /**\n   * Main entry point.\n   * Process a text string with given font and formatting parameters, and return all info\n   * necessary to render all its glyphs.\n   */ function typeset({ text = \"\", font = defaultFontURL, sdfGlyphSize = 64, fontSize = 1, letterSpacing = 0, lineHeight = \"normal\", maxWidth = INF, direction, textAlign = \"left\", textIndent = 0, whiteSpace = \"normal\", overflowWrap = \"normal\", anchorX = 0, anchorY = 0, includeCaretPositions = false, chunkedBoundsSize = 8192, colorRanges = null }, callback, metricsOnly = false) {\n        const mainStart = now();\n        const timings = {\n            fontLoad: 0,\n            typesetting: 0\n        };\n        // Ensure newlines are normalized\n        if (text.indexOf(\"\\r\") > -1) {\n            console.info(\"Typesetter: got text with \\\\r chars; normalizing to \\\\n\");\n            text = text.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n        }\n        // Ensure we've got numbers not strings\n        fontSize = +fontSize;\n        letterSpacing = +letterSpacing;\n        maxWidth = +maxWidth;\n        lineHeight = lineHeight || \"normal\";\n        textIndent = +textIndent;\n        loadFont(font, (fontObj)=>{\n            const hasMaxWidth = isFinite(maxWidth);\n            let glyphIds = null;\n            let glyphPositions = null;\n            let glyphData = null;\n            let glyphColors = null;\n            let caretPositions = null;\n            let visibleBounds = null;\n            let chunkedBounds = null;\n            let maxLineWidth = 0;\n            let renderableGlyphCount = 0;\n            let canWrap = whiteSpace !== \"nowrap\";\n            const { ascender, descender, unitsPerEm, lineGap, capHeight, xHeight } = fontObj;\n            timings.fontLoad = now() - mainStart;\n            const typesetStart = now();\n            // Find conversion between native font units and fontSize units; this will already be done\n            // for the gx/gy values below but everything else we'll need to convert\n            const fontSizeMult = fontSize / unitsPerEm;\n            // Determine appropriate value for 'normal' line height based on the font's actual metrics\n            // TODO this does not guarantee individual glyphs won't exceed the line height, e.g. Roboto; should we use yMin/Max instead?\n            if (lineHeight === \"normal\") {\n                lineHeight = (ascender - descender + lineGap) / unitsPerEm;\n            }\n            // Determine line height and leading adjustments\n            lineHeight = lineHeight * fontSize;\n            const halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;\n            const topBaseline = -(ascender * fontSizeMult + halfLeading);\n            const caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);\n            const caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2;\n            // Distribute glyphs into lines based on wrapping\n            let lineXOffset = textIndent;\n            let currentLine = new TextLine();\n            const lines = [\n                currentLine\n            ];\n            fontObj.forEachGlyph(text, fontSize, letterSpacing, (glyphObj, glyphX, charIndex)=>{\n                const char = text.charAt(charIndex);\n                const glyphWidth = glyphObj.advanceWidth * fontSizeMult;\n                const curLineCount = currentLine.count;\n                let nextLine;\n                // Calc isWhitespace and isEmpty once per glyphObj\n                if (!(\"isEmpty\" in glyphObj)) {\n                    glyphObj.isWhitespace = !!char && new RegExp(lineBreakingWhiteSpace).test(char);\n                    glyphObj.canBreakAfter = !!char && BREAK_AFTER_CHARS.test(char);\n                    glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax || DEFAULT_IGNORABLE_CHARS.test(char);\n                }\n                if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n                    renderableGlyphCount++;\n                }\n                // If a non-whitespace character overflows the max width, we need to soft-wrap\n                if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {\n                    // If it's the first char after a whitespace, start a new line\n                    if (currentLine.glyphAt(curLineCount - 1).glyphObj.canBreakAfter) {\n                        nextLine = new TextLine();\n                        lineXOffset = -glyphX;\n                    } else {\n                        // Back up looking for a whitespace character to wrap at\n                        for(let i = curLineCount; i--;){\n                            // If we got the start of the line there's no soft break point; make hard break if overflowWrap='break-word'\n                            if (i === 0 && overflowWrap === \"break-word\") {\n                                nextLine = new TextLine();\n                                lineXOffset = -glyphX;\n                                break;\n                            } else if (currentLine.glyphAt(i).glyphObj.canBreakAfter) {\n                                nextLine = currentLine.splitAt(i + 1);\n                                const adjustX = nextLine.glyphAt(0).x;\n                                lineXOffset -= adjustX;\n                                for(let j = nextLine.count; j--;){\n                                    nextLine.glyphAt(j).x -= adjustX;\n                                }\n                                break;\n                            }\n                        }\n                    }\n                    if (nextLine) {\n                        currentLine.isSoftWrapped = true;\n                        currentLine = nextLine;\n                        lines.push(currentLine);\n                        maxLineWidth = maxWidth; //after soft wrapping use maxWidth as calculated width\n                    }\n                }\n                let fly = currentLine.glyphAt(currentLine.count);\n                fly.glyphObj = glyphObj;\n                fly.x = glyphX + lineXOffset;\n                fly.width = glyphWidth;\n                fly.charIndex = charIndex;\n                // Handle hard line breaks\n                if (char === \"\\n\") {\n                    currentLine = new TextLine();\n                    lines.push(currentLine);\n                    lineXOffset = -(glyphX + glyphWidth + letterSpacing * fontSize) + textIndent;\n                }\n            });\n            // Calculate width of each line (excluding trailing whitespace) and maximum block width\n            lines.forEach((line)=>{\n                for(let i = line.count; i--;){\n                    let { glyphObj, x, width } = line.glyphAt(i);\n                    if (!glyphObj.isWhitespace) {\n                        line.width = x + width;\n                        if (line.width > maxLineWidth) {\n                            maxLineWidth = line.width;\n                        }\n                        return;\n                    }\n                }\n            });\n            // Find overall position adjustments for anchoring\n            let anchorXOffset = 0;\n            let anchorYOffset = 0;\n            if (anchorX) {\n                if (typeof anchorX === \"number\") {\n                    anchorXOffset = -anchorX;\n                } else if (typeof anchorX === \"string\") {\n                    anchorXOffset = -maxLineWidth * (anchorX === \"left\" ? 0 : anchorX === \"center\" ? 0.5 : anchorX === \"right\" ? 1 : parsePercent(anchorX));\n                }\n            }\n            if (anchorY) {\n                if (typeof anchorY === \"number\") {\n                    anchorYOffset = -anchorY;\n                } else if (typeof anchorY === \"string\") {\n                    let height = lines.length * lineHeight;\n                    anchorYOffset = anchorY === \"top\" ? 0 : anchorY === \"top-baseline\" ? -topBaseline : anchorY === \"top-cap\" ? -topBaseline - capHeight * fontSizeMult : anchorY === \"top-ex\" ? -topBaseline - xHeight * fontSizeMult : anchorY === \"middle\" ? height / 2 : anchorY === \"bottom\" ? height : anchorY === \"bottom-baseline\" ? height - halfLeading + descender * fontSizeMult : parsePercent(anchorY) * height;\n                }\n            }\n            if (!metricsOnly) {\n                // Resolve bidi levels\n                const bidiLevelsResult = bidi.getEmbeddingLevels(text, direction);\n                // Process each line, applying alignment offsets, adding each glyph to the atlas, and\n                // collecting all renderable glyphs into a single collection.\n                glyphIds = new Uint16Array(renderableGlyphCount);\n                glyphPositions = new Float32Array(renderableGlyphCount * 2);\n                glyphData = {};\n                visibleBounds = [\n                    INF,\n                    INF,\n                    -INF,\n                    -INF\n                ];\n                chunkedBounds = [];\n                let lineYOffset = topBaseline;\n                if (includeCaretPositions) {\n                    caretPositions = new Float32Array(text.length * 3);\n                }\n                if (colorRanges) {\n                    glyphColors = new Uint8Array(renderableGlyphCount * 3);\n                }\n                let renderableGlyphIndex = 0;\n                let prevCharIndex = -1;\n                let colorCharIndex = -1;\n                let chunk;\n                let currentColor;\n                lines.forEach((line, lineIndex)=>{\n                    let { count: lineGlyphCount, width: lineWidth } = line;\n                    // Ignore empty lines\n                    if (lineGlyphCount > 0) {\n                        // Count trailing whitespaces, we want to ignore these for certain things\n                        let trailingWhitespaceCount = 0;\n                        for(let i = lineGlyphCount; i-- && line.glyphAt(i).glyphObj.isWhitespace;){\n                            trailingWhitespaceCount++;\n                        }\n                        // Apply horizontal alignment adjustments\n                        let lineXOffset = 0;\n                        let justifyAdjust = 0;\n                        if (textAlign === \"center\") {\n                            lineXOffset = (maxLineWidth - lineWidth) / 2;\n                        } else if (textAlign === \"right\") {\n                            lineXOffset = maxLineWidth - lineWidth;\n                        } else if (textAlign === \"justify\" && line.isSoftWrapped) {\n                            // count non-trailing whitespace characters, and we'll adjust the offsets per character in the next loop\n                            let whitespaceCount = 0;\n                            for(let i = lineGlyphCount - trailingWhitespaceCount; i--;){\n                                if (line.glyphAt(i).glyphObj.isWhitespace) {\n                                    whitespaceCount++;\n                                }\n                            }\n                            justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;\n                        }\n                        if (justifyAdjust || lineXOffset) {\n                            let justifyOffset = 0;\n                            for(let i = 0; i < lineGlyphCount; i++){\n                                let glyphInfo = line.glyphAt(i);\n                                const glyphObj = glyphInfo.glyphObj;\n                                glyphInfo.x += lineXOffset + justifyOffset;\n                                // Expand non-trailing whitespaces for justify alignment\n                                if (justifyAdjust !== 0 && glyphObj.isWhitespace && i < lineGlyphCount - trailingWhitespaceCount) {\n                                    justifyOffset += justifyAdjust;\n                                    glyphInfo.width += justifyAdjust;\n                                }\n                            }\n                        }\n                        // Perform bidi range flipping\n                        const flips = bidi.getReorderSegments(text, bidiLevelsResult, line.glyphAt(0).charIndex, line.glyphAt(line.count - 1).charIndex);\n                        for(let fi = 0; fi < flips.length; fi++){\n                            const [start, end] = flips[fi];\n                            // Map start/end string indices to indices in the line\n                            let left = Infinity, right = -Infinity;\n                            for(let i = 0; i < lineGlyphCount; i++){\n                                if (line.glyphAt(i).charIndex >= start) {\n                                    let startInLine = i, endInLine = i;\n                                    for(; endInLine < lineGlyphCount; endInLine++){\n                                        let info = line.glyphAt(endInLine);\n                                        if (info.charIndex > end) {\n                                            break;\n                                        }\n                                        if (endInLine < lineGlyphCount - trailingWhitespaceCount) {\n                                            left = Math.min(left, info.x);\n                                            right = Math.max(right, info.x + info.width);\n                                        }\n                                    }\n                                    for(let j = startInLine; j < endInLine; j++){\n                                        const glyphInfo = line.glyphAt(j);\n                                        glyphInfo.x = right - (glyphInfo.x + glyphInfo.width - left);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                        // Assemble final data arrays\n                        let glyphObj;\n                        const setGlyphObj = (g)=>glyphObj = g;\n                        for(let i = 0; i < lineGlyphCount; i++){\n                            let glyphInfo = line.glyphAt(i);\n                            glyphObj = glyphInfo.glyphObj;\n                            const glyphId = glyphObj.index;\n                            // Replace mirrored characters in rtl\n                            const rtl = bidiLevelsResult.levels[glyphInfo.charIndex] & 1; //odd level means rtl\n                            if (rtl) {\n                                const mirrored = bidi.getMirroredCharacter(text[glyphInfo.charIndex]);\n                                if (mirrored) {\n                                    fontObj.forEachGlyph(mirrored, 0, 0, setGlyphObj);\n                                }\n                            }\n                            // Add caret positions\n                            if (includeCaretPositions) {\n                                const { charIndex } = glyphInfo;\n                                const caretLeft = glyphInfo.x + anchorXOffset;\n                                const caretRight = glyphInfo.x + glyphInfo.width + anchorXOffset;\n                                caretPositions[charIndex * 3] = rtl ? caretRight : caretLeft; //start edge x\n                                caretPositions[charIndex * 3 + 1] = rtl ? caretLeft : caretRight; //end edge x\n                                caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset; //common bottom y\n                                // If we skipped any chars from the previous glyph (due to ligature subs), fill in caret\n                                // positions for those missing char indices; currently this uses a best-guess by dividing\n                                // the ligature's width evenly. In the future we may try to use the font's LigatureCaretList\n                                // table to get better interior caret positions.\n                                const ligCount = charIndex - prevCharIndex;\n                                if (ligCount > 1) {\n                                    fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);\n                                }\n                                prevCharIndex = charIndex;\n                            }\n                            // Track current color range\n                            if (colorRanges) {\n                                const { charIndex } = glyphInfo;\n                                while(charIndex > colorCharIndex){\n                                    colorCharIndex++;\n                                    if (colorRanges.hasOwnProperty(colorCharIndex)) {\n                                        currentColor = colorRanges[colorCharIndex];\n                                    }\n                                }\n                            }\n                            // Get atlas data for renderable glyphs\n                            if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n                                const idx = renderableGlyphIndex++;\n                                // Add this glyph's path data\n                                if (!glyphData[glyphId]) {\n                                    glyphData[glyphId] = {\n                                        path: glyphObj.path,\n                                        pathBounds: [\n                                            glyphObj.xMin,\n                                            glyphObj.yMin,\n                                            glyphObj.xMax,\n                                            glyphObj.yMax\n                                        ]\n                                    };\n                                }\n                                // Determine final glyph position and add to glyphPositions array\n                                const glyphX = glyphInfo.x + anchorXOffset;\n                                const glyphY = lineYOffset + anchorYOffset;\n                                glyphPositions[idx * 2] = glyphX;\n                                glyphPositions[idx * 2 + 1] = glyphY;\n                                // Track total visible bounds\n                                const visX0 = glyphX + glyphObj.xMin * fontSizeMult;\n                                const visY0 = glyphY + glyphObj.yMin * fontSizeMult;\n                                const visX1 = glyphX + glyphObj.xMax * fontSizeMult;\n                                const visY1 = glyphY + glyphObj.yMax * fontSizeMult;\n                                if (visX0 < visibleBounds[0]) visibleBounds[0] = visX0;\n                                if (visY0 < visibleBounds[1]) visibleBounds[1] = visY0;\n                                if (visX1 > visibleBounds[2]) visibleBounds[2] = visX1;\n                                if (visY1 > visibleBounds[3]) visibleBounds[3] = visY1;\n                                // Track bounding rects for each chunk of N glyphs\n                                if (idx % chunkedBoundsSize === 0) {\n                                    chunk = {\n                                        start: idx,\n                                        end: idx,\n                                        rect: [\n                                            INF,\n                                            INF,\n                                            -INF,\n                                            -INF\n                                        ]\n                                    };\n                                    chunkedBounds.push(chunk);\n                                }\n                                chunk.end++;\n                                const chunkRect = chunk.rect;\n                                if (visX0 < chunkRect[0]) chunkRect[0] = visX0;\n                                if (visY0 < chunkRect[1]) chunkRect[1] = visY0;\n                                if (visX1 > chunkRect[2]) chunkRect[2] = visX1;\n                                if (visY1 > chunkRect[3]) chunkRect[3] = visY1;\n                                // Add to glyph ids array\n                                glyphIds[idx] = glyphId;\n                                // Add colors\n                                if (colorRanges) {\n                                    const start = idx * 3;\n                                    glyphColors[start] = currentColor >> 16 & 255;\n                                    glyphColors[start + 1] = currentColor >> 8 & 255;\n                                    glyphColors[start + 2] = currentColor & 255;\n                                }\n                            }\n                        }\n                    }\n                    // Increment y offset for next line\n                    lineYOffset -= lineHeight;\n                });\n                // Fill in remaining caret positions in case the final character was a ligature\n                if (caretPositions) {\n                    const ligCount = text.length - prevCharIndex;\n                    if (ligCount > 1) {\n                        fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);\n                    }\n                }\n            }\n            // Timing stats\n            timings.typesetting = now() - typesetStart;\n            callback({\n                glyphIds,\n                glyphPositions,\n                glyphData,\n                caretPositions,\n                caretHeight,\n                glyphColors,\n                chunkedBounds,\n                fontSize,\n                unitsPerEm,\n                ascender: ascender * fontSizeMult,\n                descender: descender * fontSizeMult,\n                capHeight: capHeight * fontSizeMult,\n                xHeight: xHeight * fontSizeMult,\n                lineHeight,\n                topBaseline,\n                blockBounds: [\n                    anchorXOffset,\n                    anchorYOffset - lines.length * lineHeight,\n                    anchorXOffset + maxLineWidth,\n                    anchorYOffset\n                ],\n                visibleBounds,\n                timings\n            });\n        });\n    }\n    /**\n   * For a given text string and font parameters, determine the resulting block dimensions\n   * after wrapping for the given maxWidth.\n   * @param args\n   * @param callback\n   */ function measure(args, callback) {\n        typeset(args, (result)=>{\n            const [x0, y0, x1, y1] = result.blockBounds;\n            callback({\n                width: x1 - x0,\n                height: y1 - y0\n            });\n        }, {\n            metricsOnly: true\n        });\n    }\n    function parsePercent(str) {\n        let match = str.match(/^([\\d.]+)%$/);\n        let pct = match ? parseFloat(match[1]) : NaN;\n        return isNaN(pct) ? 0 : pct / 100;\n    }\n    function fillLigatureCaretPositions(caretPositions, ligStartIndex, ligCount) {\n        const ligStartX = caretPositions[ligStartIndex * 3];\n        const ligEndX = caretPositions[ligStartIndex * 3 + 1];\n        const ligY = caretPositions[ligStartIndex * 3 + 2];\n        const guessedAdvanceX = (ligEndX - ligStartX) / ligCount;\n        for(let i = 0; i < ligCount; i++){\n            const startIndex = (ligStartIndex + i) * 3;\n            caretPositions[startIndex] = ligStartX + guessedAdvanceX * i;\n            caretPositions[startIndex + 1] = ligStartX + guessedAdvanceX * (i + 1);\n            caretPositions[startIndex + 2] = ligY;\n        }\n    }\n    function now() {\n        return (self.performance || Date).now();\n    }\n    // Array-backed structure for a single line's glyphs data\n    function TextLine() {\n        this.data = [];\n    }\n    const textLineProps = [\n        \"glyphObj\",\n        \"x\",\n        \"width\",\n        \"charIndex\"\n    ];\n    TextLine.prototype = {\n        width: 0,\n        isSoftWrapped: false,\n        get count () {\n            return Math.ceil(this.data.length / textLineProps.length);\n        },\n        glyphAt (i) {\n            let fly = TextLine.flyweight;\n            fly.data = this.data;\n            fly.index = i;\n            return fly;\n        },\n        splitAt (i) {\n            let newLine = new TextLine();\n            newLine.data = this.data.splice(i * textLineProps.length);\n            return newLine;\n        }\n    };\n    TextLine.flyweight = textLineProps.reduce((obj, prop, i, all)=>{\n        Object.defineProperty(obj, prop, {\n            get () {\n                return this.data[this.index * textLineProps.length + i];\n            },\n            set (val) {\n                this.data[this.index * textLineProps.length + i] = val;\n            }\n        });\n        return obj;\n    }, {\n        data: null,\n        index: 0\n    });\n    return {\n        typeset,\n        measure,\n        loadFont\n    };\n}\nconst now = ()=>(self.performance || Date).now();\nconst mainThreadGenerator = /*#__PURE__*/ (0,webgl_sdf_generator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\nlet warned;\n/**\n * Generate an SDF texture image for a single glyph path, placing the result into a webgl canvas at a\n * given location and channel. Utilizes the webgl-sdf-generator external package for GPU-accelerated SDF\n * generation when supported.\n */ function generateSDF(width, height, path, viewBox, distance, exponent, canvas, x, y, channel, useWebGL = true) {\n    // Allow opt-out\n    if (!useWebGL) {\n        return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel);\n    }\n    // Attempt GPU-accelerated generation first\n    return generateSDF_GL(width, height, path, viewBox, distance, exponent, canvas, x, y, channel).then(null, (err)=>{\n        // WebGL failed either due to a hard error or unexpected results; fall back to JS in workers\n        if (!warned) {\n            console.warn(`WebGL SDF generation failed, falling back to JS`, err);\n            warned = true;\n        }\n        return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel);\n    });\n}\nconst queue = [];\nconst chunkTimeBudget = 5; // ms\nlet timer = 0;\nfunction nextChunk() {\n    const start = now();\n    while(queue.length && now() - start < chunkTimeBudget){\n        queue.shift()();\n    }\n    timer = queue.length ? setTimeout(nextChunk, 0) : 0;\n}\n/**\n * WebGL-based implementation executed on the main thread. Requests are executed in time-bounded\n * macrotask chunks to allow render frames to execute in between.\n */ const generateSDF_GL = (...args)=>{\n    return new Promise((resolve, reject)=>{\n        queue.push(()=>{\n            const start = now();\n            try {\n                mainThreadGenerator.webgl.generateIntoCanvas(...args);\n                resolve({\n                    timing: now() - start\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n        if (!timer) {\n            timer = setTimeout(nextChunk, 0);\n        }\n    });\n};\nconst threadCount = 4; // how many workers to spawn\nconst idleTimeout = 2000; // workers will be terminated after being idle this many milliseconds\nconst threads = {};\nlet callNum = 0;\n/**\n * Fallback JS-based implementation, fanned out to a number of worker threads for parallelism\n */ function generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel) {\n    const workerId = \"TroikaTextSDFGenerator_JS_\" + callNum++ % threadCount;\n    let thread = threads[workerId];\n    if (!thread) {\n        thread = threads[workerId] = {\n            workerModule: (0,troika_worker_utils__WEBPACK_IMPORTED_MODULE_2__.defineWorkerModule)({\n                name: workerId,\n                workerId,\n                dependencies: [\n                    webgl_sdf_generator__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n                    now\n                ],\n                init (_createSDFGenerator, now) {\n                    const generate = _createSDFGenerator().javascript.generate;\n                    return function(...args) {\n                        const start = now();\n                        const textureData = generate(...args);\n                        return {\n                            textureData,\n                            timing: now() - start\n                        };\n                    };\n                },\n                getTransferables (result) {\n                    return [\n                        result.textureData.buffer\n                    ];\n                }\n            }),\n            requests: 0,\n            idleTimer: null\n        };\n    }\n    thread.requests++;\n    clearTimeout(thread.idleTimer);\n    return thread.workerModule(width, height, path, viewBox, distance, exponent).then(({ textureData, timing })=>{\n        // copy result data into the canvas\n        const start = now();\n        // expand single-channel data into rgba\n        const imageData = new Uint8Array(textureData.length * 4);\n        for(let i = 0; i < textureData.length; i++){\n            imageData[i * 4 + channel] = textureData[i];\n        }\n        mainThreadGenerator.webglUtils.renderImageData(canvas, imageData, x, y, width, height, 1 << 3 - channel);\n        timing += now() - start;\n        // clean up workers after a while\n        if (--thread.requests === 0) {\n            thread.idleTimer = setTimeout(()=>{\n                (0,troika_worker_utils__WEBPACK_IMPORTED_MODULE_2__.terminateWorker)(workerId);\n            }, idleTimeout);\n        }\n        return {\n            timing\n        };\n    });\n}\nfunction warmUpSDFCanvas(canvas) {\n    if (!canvas._warm) {\n        mainThreadGenerator.webgl.isSupported(canvas);\n        canvas._warm = true;\n    }\n}\nconst resizeWebGLCanvasWithoutClearing = mainThreadGenerator.webglUtils.resizeWebGLCanvasWithoutClearing;\n/*!\nCustom build of Typr.ts (https://github.com/fredli74/Typr.ts) for use in Troika text rendering.\nOriginal MIT license applies: https://github.com/fredli74/Typr.ts/blob/master/LICENSE\n*/ function typrFactory() {\n    return  true && (self.window = self), function(r) {\n        var e = {\n            parse: function(r) {\n                var t = e._bin, a = new Uint8Array(r);\n                if (\"ttcf\" == t.readASCII(a, 0, 4)) {\n                    var n = 4;\n                    t.readUshort(a, n), n += 2, t.readUshort(a, n), n += 2;\n                    var o = t.readUint(a, n);\n                    n += 4;\n                    for(var s = [], i = 0; i < o; i++){\n                        var h = t.readUint(a, n);\n                        n += 4, s.push(e._readFont(a, h));\n                    }\n                    return s;\n                }\n                return [\n                    e._readFont(a, 0)\n                ];\n            },\n            _readFont: function(r, t) {\n                var a = e._bin, n = t;\n                a.readFixed(r, t), t += 4;\n                var o = a.readUshort(r, t);\n                t += 2, a.readUshort(r, t), t += 2, a.readUshort(r, t), t += 2, a.readUshort(r, t), t += 2;\n                for(var s = [\n                    \"cmap\",\n                    \"head\",\n                    \"hhea\",\n                    \"maxp\",\n                    \"hmtx\",\n                    \"name\",\n                    \"OS/2\",\n                    \"post\",\n                    \"loca\",\n                    \"glyf\",\n                    \"kern\",\n                    \"CFF \",\n                    \"GPOS\",\n                    \"GSUB\",\n                    \"SVG \"\n                ], i = {\n                    _data: r,\n                    _offset: n\n                }, h = {}, f = 0; f < o; f++){\n                    var d = a.readASCII(r, t, 4);\n                    t += 4, a.readUint(r, t), t += 4;\n                    var u = a.readUint(r, t);\n                    t += 4;\n                    var l = a.readUint(r, t);\n                    t += 4, h[d] = {\n                        offset: u,\n                        length: l\n                    };\n                }\n                for(f = 0; f < s.length; f++){\n                    var v = s[f];\n                    h[v] && (i[v.trim()] = e[v.trim()].parse(r, h[v].offset, h[v].length, i));\n                }\n                return i;\n            },\n            _tabOffset: function(r, t, a) {\n                for(var n = e._bin, o = n.readUshort(r, a + 4), s = a + 12, i = 0; i < o; i++){\n                    var h = n.readASCII(r, s, 4);\n                    s += 4, n.readUint(r, s), s += 4;\n                    var f = n.readUint(r, s);\n                    if (s += 4, n.readUint(r, s), s += 4, h == t) return f;\n                }\n                return 0;\n            }\n        };\n        e._bin = {\n            readFixed: function(r, e) {\n                return (r[e] << 8 | r[e + 1]) + (r[e + 2] << 8 | r[e + 3]) / 65540;\n            },\n            readF2dot14: function(r, t) {\n                return e._bin.readShort(r, t) / 16384;\n            },\n            readInt: function(r, t) {\n                return e._bin._view(r).getInt32(t);\n            },\n            readInt8: function(r, t) {\n                return e._bin._view(r).getInt8(t);\n            },\n            readShort: function(r, t) {\n                return e._bin._view(r).getInt16(t);\n            },\n            readUshort: function(r, t) {\n                return e._bin._view(r).getUint16(t);\n            },\n            readUshorts: function(r, t, a) {\n                for(var n = [], o = 0; o < a; o++)n.push(e._bin.readUshort(r, t + 2 * o));\n                return n;\n            },\n            readUint: function(r, t) {\n                return e._bin._view(r).getUint32(t);\n            },\n            readUint64: function(r, t) {\n                return 4294967296 * e._bin.readUint(r, t) + e._bin.readUint(r, t + 4);\n            },\n            readASCII: function(r, e, t) {\n                for(var a = \"\", n = 0; n < t; n++)a += String.fromCharCode(r[e + n]);\n                return a;\n            },\n            readUnicode: function(r, e, t) {\n                for(var a = \"\", n = 0; n < t; n++){\n                    var o = r[e++] << 8 | r[e++];\n                    a += String.fromCharCode(o);\n                }\n                return a;\n            },\n            _tdec:  false ? 0 : null,\n            readUTF8: function(r, t, a) {\n                var n = e._bin._tdec;\n                return n && 0 == t && a == r.length ? n.decode(r) : e._bin.readASCII(r, t, a);\n            },\n            readBytes: function(r, e, t) {\n                for(var a = [], n = 0; n < t; n++)a.push(r[e + n]);\n                return a;\n            },\n            readASCIIArray: function(r, e, t) {\n                for(var a = [], n = 0; n < t; n++)a.push(String.fromCharCode(r[e + n]));\n                return a;\n            },\n            _view: function(r) {\n                return r._dataView || (r._dataView = r.buffer ? new DataView(r.buffer, r.byteOffset, r.byteLength) : new DataView(new Uint8Array(r).buffer));\n            }\n        }, e._lctf = {}, e._lctf.parse = function(r, t, a, n, o) {\n            var s = e._bin, i = {}, h = t;\n            s.readFixed(r, t), t += 4;\n            var f = s.readUshort(r, t);\n            t += 2;\n            var d = s.readUshort(r, t);\n            t += 2;\n            var u = s.readUshort(r, t);\n            return t += 2, i.scriptList = e._lctf.readScriptList(r, h + f), i.featureList = e._lctf.readFeatureList(r, h + d), i.lookupList = e._lctf.readLookupList(r, h + u, o), i;\n        }, e._lctf.readLookupList = function(r, t, a) {\n            var n = e._bin, o = t, s = [], i = n.readUshort(r, t);\n            t += 2;\n            for(var h = 0; h < i; h++){\n                var f = n.readUshort(r, t);\n                t += 2;\n                var d = e._lctf.readLookupTable(r, o + f, a);\n                s.push(d);\n            }\n            return s;\n        }, e._lctf.readLookupTable = function(r, t, a) {\n            var n = e._bin, o = t, s = {\n                tabs: []\n            };\n            s.ltype = n.readUshort(r, t), t += 2, s.flag = n.readUshort(r, t), t += 2;\n            var i = n.readUshort(r, t);\n            t += 2;\n            for(var h = s.ltype, f = 0; f < i; f++){\n                var d = n.readUshort(r, t);\n                t += 2;\n                var u = a(r, h, o + d, s);\n                s.tabs.push(u);\n            }\n            return s;\n        }, e._lctf.numOfOnes = function(r) {\n            for(var e = 0, t = 0; t < 32; t++)0 != (r >>> t & 1) && e++;\n            return e;\n        }, e._lctf.readClassDef = function(r, t) {\n            var a = e._bin, n = [], o = a.readUshort(r, t);\n            if (t += 2, 1 == o) {\n                var s = a.readUshort(r, t);\n                t += 2;\n                var i = a.readUshort(r, t);\n                t += 2;\n                for(var h = 0; h < i; h++)n.push(s + h), n.push(s + h), n.push(a.readUshort(r, t)), t += 2;\n            }\n            if (2 == o) {\n                var f = a.readUshort(r, t);\n                t += 2;\n                for(h = 0; h < f; h++)n.push(a.readUshort(r, t)), t += 2, n.push(a.readUshort(r, t)), t += 2, n.push(a.readUshort(r, t)), t += 2;\n            }\n            return n;\n        }, e._lctf.getInterval = function(r, e) {\n            for(var t = 0; t < r.length; t += 3){\n                var a = r[t], n = r[t + 1];\n                if (r[t + 2], a <= e && e <= n) return t;\n            }\n            return -1;\n        }, e._lctf.readCoverage = function(r, t) {\n            var a = e._bin, n = {};\n            n.fmt = a.readUshort(r, t), t += 2;\n            var o = a.readUshort(r, t);\n            return t += 2, 1 == n.fmt && (n.tab = a.readUshorts(r, t, o)), 2 == n.fmt && (n.tab = a.readUshorts(r, t, 3 * o)), n;\n        }, e._lctf.coverageIndex = function(r, t) {\n            var a = r.tab;\n            if (1 == r.fmt) return a.indexOf(t);\n            if (2 == r.fmt) {\n                var n = e._lctf.getInterval(a, t);\n                if (-1 != n) return a[n + 2] + (t - a[n]);\n            }\n            return -1;\n        }, e._lctf.readFeatureList = function(r, t) {\n            var a = e._bin, n = t, o = [], s = a.readUshort(r, t);\n            t += 2;\n            for(var i = 0; i < s; i++){\n                var h = a.readASCII(r, t, 4);\n                t += 4;\n                var f = a.readUshort(r, t);\n                t += 2;\n                var d = e._lctf.readFeatureTable(r, n + f);\n                d.tag = h.trim(), o.push(d);\n            }\n            return o;\n        }, e._lctf.readFeatureTable = function(r, t) {\n            var a = e._bin, n = t, o = {}, s = a.readUshort(r, t);\n            t += 2, s > 0 && (o.featureParams = n + s);\n            var i = a.readUshort(r, t);\n            t += 2, o.tab = [];\n            for(var h = 0; h < i; h++)o.tab.push(a.readUshort(r, t + 2 * h));\n            return o;\n        }, e._lctf.readScriptList = function(r, t) {\n            var a = e._bin, n = t, o = {}, s = a.readUshort(r, t);\n            t += 2;\n            for(var i = 0; i < s; i++){\n                var h = a.readASCII(r, t, 4);\n                t += 4;\n                var f = a.readUshort(r, t);\n                t += 2, o[h.trim()] = e._lctf.readScriptTable(r, n + f);\n            }\n            return o;\n        }, e._lctf.readScriptTable = function(r, t) {\n            var a = e._bin, n = t, o = {}, s = a.readUshort(r, t);\n            t += 2, o.default = e._lctf.readLangSysTable(r, n + s);\n            var i = a.readUshort(r, t);\n            t += 2;\n            for(var h = 0; h < i; h++){\n                var f = a.readASCII(r, t, 4);\n                t += 4;\n                var d = a.readUshort(r, t);\n                t += 2, o[f.trim()] = e._lctf.readLangSysTable(r, n + d);\n            }\n            return o;\n        }, e._lctf.readLangSysTable = function(r, t) {\n            var a = e._bin, n = {};\n            a.readUshort(r, t), t += 2, n.reqFeature = a.readUshort(r, t), t += 2;\n            var o = a.readUshort(r, t);\n            return t += 2, n.features = a.readUshorts(r, t, o), n;\n        }, e.CFF = {}, e.CFF.parse = function(r, t, a) {\n            var n = e._bin;\n            (r = new Uint8Array(r.buffer, t, a))[t = 0], r[++t], r[++t], r[++t], t++;\n            var o = [];\n            t = e.CFF.readIndex(r, t, o);\n            for(var s = [], i = 0; i < o.length - 1; i++)s.push(n.readASCII(r, t + o[i], o[i + 1] - o[i]));\n            t += o[o.length - 1];\n            var h = [];\n            t = e.CFF.readIndex(r, t, h);\n            var f = [];\n            for(i = 0; i < h.length - 1; i++)f.push(e.CFF.readDict(r, t + h[i], t + h[i + 1]));\n            t += h[h.length - 1];\n            var d = f[0], u = [];\n            t = e.CFF.readIndex(r, t, u);\n            var l = [];\n            for(i = 0; i < u.length - 1; i++)l.push(n.readASCII(r, t + u[i], u[i + 1] - u[i]));\n            if (t += u[u.length - 1], e.CFF.readSubrs(r, t, d), d.CharStrings) {\n                t = d.CharStrings;\n                u = [];\n                t = e.CFF.readIndex(r, t, u);\n                var v = [];\n                for(i = 0; i < u.length - 1; i++)v.push(n.readBytes(r, t + u[i], u[i + 1] - u[i]));\n                d.CharStrings = v;\n            }\n            if (d.ROS) {\n                t = d.FDArray;\n                var c = [];\n                t = e.CFF.readIndex(r, t, c), d.FDArray = [];\n                for(i = 0; i < c.length - 1; i++){\n                    var p = e.CFF.readDict(r, t + c[i], t + c[i + 1]);\n                    e.CFF._readFDict(r, p, l), d.FDArray.push(p);\n                }\n                t += c[c.length - 1], t = d.FDSelect, d.FDSelect = [];\n                var U = r[t];\n                if (t++, 3 != U) throw U;\n                var g = n.readUshort(r, t);\n                t += 2;\n                for(i = 0; i < g + 1; i++)d.FDSelect.push(n.readUshort(r, t), r[t + 2]), t += 3;\n            }\n            return d.Encoding && (d.Encoding = e.CFF.readEncoding(r, d.Encoding, d.CharStrings.length)), d.charset && (d.charset = e.CFF.readCharset(r, d.charset, d.CharStrings.length)), e.CFF._readFDict(r, d, l), d;\n        }, e.CFF._readFDict = function(r, t, a) {\n            var n;\n            for(var o in t.Private && (n = t.Private[1], t.Private = e.CFF.readDict(r, n, n + t.Private[0]), t.Private.Subrs && e.CFF.readSubrs(r, n + t.Private.Subrs, t.Private)), t)-1 != [\n                \"FamilyName\",\n                \"FontName\",\n                \"FullName\",\n                \"Notice\",\n                \"version\",\n                \"Copyright\"\n            ].indexOf(o) && (t[o] = a[t[o] - 426 + 35]);\n        }, e.CFF.readSubrs = function(r, t, a) {\n            var n = e._bin, o = [];\n            t = e.CFF.readIndex(r, t, o);\n            var s, i = o.length;\n            s = i < 1240 ? 107 : i < 33900 ? 1131 : 32768, a.Bias = s, a.Subrs = [];\n            for(var h = 0; h < o.length - 1; h++)a.Subrs.push(n.readBytes(r, t + o[h], o[h + 1] - o[h]));\n        }, e.CFF.tableSE = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            10,\n            11,\n            12,\n            13,\n            14,\n            15,\n            16,\n            17,\n            18,\n            19,\n            20,\n            21,\n            22,\n            23,\n            24,\n            25,\n            26,\n            27,\n            28,\n            29,\n            30,\n            31,\n            32,\n            33,\n            34,\n            35,\n            36,\n            37,\n            38,\n            39,\n            40,\n            41,\n            42,\n            43,\n            44,\n            45,\n            46,\n            47,\n            48,\n            49,\n            50,\n            51,\n            52,\n            53,\n            54,\n            55,\n            56,\n            57,\n            58,\n            59,\n            60,\n            61,\n            62,\n            63,\n            64,\n            65,\n            66,\n            67,\n            68,\n            69,\n            70,\n            71,\n            72,\n            73,\n            74,\n            75,\n            76,\n            77,\n            78,\n            79,\n            80,\n            81,\n            82,\n            83,\n            84,\n            85,\n            86,\n            87,\n            88,\n            89,\n            90,\n            91,\n            92,\n            93,\n            94,\n            95,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            96,\n            97,\n            98,\n            99,\n            100,\n            101,\n            102,\n            103,\n            104,\n            105,\n            106,\n            107,\n            108,\n            109,\n            110,\n            0,\n            111,\n            112,\n            113,\n            114,\n            0,\n            115,\n            116,\n            117,\n            118,\n            119,\n            120,\n            121,\n            122,\n            0,\n            123,\n            0,\n            124,\n            125,\n            126,\n            127,\n            128,\n            129,\n            130,\n            131,\n            0,\n            132,\n            133,\n            0,\n            134,\n            135,\n            136,\n            137,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            138,\n            0,\n            139,\n            0,\n            0,\n            0,\n            0,\n            140,\n            141,\n            142,\n            143,\n            0,\n            0,\n            0,\n            0,\n            0,\n            144,\n            0,\n            0,\n            0,\n            145,\n            0,\n            0,\n            146,\n            147,\n            148,\n            149,\n            0,\n            0,\n            0,\n            0\n        ], e.CFF.glyphByUnicode = function(r, e) {\n            for(var t = 0; t < r.charset.length; t++)if (r.charset[t] == e) return t;\n            return -1;\n        }, e.CFF.glyphBySE = function(r, t) {\n            return t < 0 || t > 255 ? -1 : e.CFF.glyphByUnicode(r, e.CFF.tableSE[t]);\n        }, e.CFF.readEncoding = function(r, t, a) {\n            e._bin;\n            var n = [\n                \".notdef\"\n            ], o = r[t];\n            if (t++, 0 != o) throw \"error: unknown encoding format: \" + o;\n            var s = r[t];\n            t++;\n            for(var i = 0; i < s; i++)n.push(r[t + i]);\n            return n;\n        }, e.CFF.readCharset = function(r, t, a) {\n            var n = e._bin, o = [\n                \".notdef\"\n            ], s = r[t];\n            if (t++, 0 == s) for(var i = 0; i < a; i++){\n                var h = n.readUshort(r, t);\n                t += 2, o.push(h);\n            }\n            else {\n                if (1 != s && 2 != s) throw \"error: format: \" + s;\n                for(; o.length < a;){\n                    h = n.readUshort(r, t);\n                    t += 2;\n                    var f = 0;\n                    1 == s ? (f = r[t], t++) : (f = n.readUshort(r, t), t += 2);\n                    for(i = 0; i <= f; i++)o.push(h), h++;\n                }\n            }\n            return o;\n        }, e.CFF.readIndex = function(r, t, a) {\n            var n = e._bin, o = n.readUshort(r, t) + 1, s = r[t += 2];\n            if (t++, 1 == s) for(var i = 0; i < o; i++)a.push(r[t + i]);\n            else if (2 == s) for(i = 0; i < o; i++)a.push(n.readUshort(r, t + 2 * i));\n            else if (3 == s) for(i = 0; i < o; i++)a.push(16777215 & n.readUint(r, t + 3 * i - 1));\n            else if (1 != o) throw \"unsupported offset size: \" + s + \", count: \" + o;\n            return (t += o * s) - 1;\n        }, e.CFF.getCharString = function(r, t, a) {\n            var n = e._bin, o = r[t], s = r[t + 1];\n            r[t + 2], r[t + 3], r[t + 4];\n            var i = 1, h = null, f = null;\n            o <= 20 && (h = o, i = 1), 12 == o && (h = 100 * o + s, i = 2), 21 <= o && o <= 27 && (h = o, i = 1), 28 == o && (f = n.readShort(r, t + 1), i = 3), 29 <= o && o <= 31 && (h = o, i = 1), 32 <= o && o <= 246 && (f = o - 139, i = 1), 247 <= o && o <= 250 && (f = 256 * (o - 247) + s + 108, i = 2), 251 <= o && o <= 254 && (f = 256 * -(o - 251) - s - 108, i = 2), 255 == o && (f = n.readInt(r, t + 1) / 65535, i = 5), a.val = null != f ? f : \"o\" + h, a.size = i;\n        }, e.CFF.readCharString = function(r, t, a) {\n            for(var n = t + a, o = e._bin, s = []; t < n;){\n                var i = r[t], h = r[t + 1];\n                r[t + 2], r[t + 3], r[t + 4];\n                var f = 1, d = null, u = null;\n                i <= 20 && (d = i, f = 1), 12 == i && (d = 100 * i + h, f = 2), 19 != i && 20 != i || (d = i, f = 2), 21 <= i && i <= 27 && (d = i, f = 1), 28 == i && (u = o.readShort(r, t + 1), f = 3), 29 <= i && i <= 31 && (d = i, f = 1), 32 <= i && i <= 246 && (u = i - 139, f = 1), 247 <= i && i <= 250 && (u = 256 * (i - 247) + h + 108, f = 2), 251 <= i && i <= 254 && (u = 256 * -(i - 251) - h - 108, f = 2), 255 == i && (u = o.readInt(r, t + 1) / 65535, f = 5), s.push(null != u ? u : \"o\" + d), t += f;\n            }\n            return s;\n        }, e.CFF.readDict = function(r, t, a) {\n            for(var n = e._bin, o = {}, s = []; t < a;){\n                var i = r[t], h = r[t + 1];\n                r[t + 2], r[t + 3], r[t + 4];\n                var f = 1, d = null, u = null;\n                if (28 == i && (u = n.readShort(r, t + 1), f = 3), 29 == i && (u = n.readInt(r, t + 1), f = 5), 32 <= i && i <= 246 && (u = i - 139, f = 1), 247 <= i && i <= 250 && (u = 256 * (i - 247) + h + 108, f = 2), 251 <= i && i <= 254 && (u = 256 * -(i - 251) - h - 108, f = 2), 255 == i) throw u = n.readInt(r, t + 1) / 65535, f = 5, \"unknown number\";\n                if (30 == i) {\n                    var l = [];\n                    for(f = 1;;){\n                        var v = r[t + f];\n                        f++;\n                        var c = v >> 4, p = 15 & v;\n                        if (15 != c && l.push(c), 15 != p && l.push(p), 15 == p) break;\n                    }\n                    for(var U = \"\", g = [\n                        0,\n                        1,\n                        2,\n                        3,\n                        4,\n                        5,\n                        6,\n                        7,\n                        8,\n                        9,\n                        \".\",\n                        \"e\",\n                        \"e-\",\n                        \"reserved\",\n                        \"-\",\n                        \"endOfNumber\"\n                    ], S = 0; S < l.length; S++)U += g[l[S]];\n                    u = parseFloat(U);\n                }\n                if (i <= 21) {\n                    if (d = [\n                        \"version\",\n                        \"Notice\",\n                        \"FullName\",\n                        \"FamilyName\",\n                        \"Weight\",\n                        \"FontBBox\",\n                        \"BlueValues\",\n                        \"OtherBlues\",\n                        \"FamilyBlues\",\n                        \"FamilyOtherBlues\",\n                        \"StdHW\",\n                        \"StdVW\",\n                        \"escape\",\n                        \"UniqueID\",\n                        \"XUID\",\n                        \"charset\",\n                        \"Encoding\",\n                        \"CharStrings\",\n                        \"Private\",\n                        \"Subrs\",\n                        \"defaultWidthX\",\n                        \"nominalWidthX\"\n                    ][i], f = 1, 12 == i) d = [\n                        \"Copyright\",\n                        \"isFixedPitch\",\n                        \"ItalicAngle\",\n                        \"UnderlinePosition\",\n                        \"UnderlineThickness\",\n                        \"PaintType\",\n                        \"CharstringType\",\n                        \"FontMatrix\",\n                        \"StrokeWidth\",\n                        \"BlueScale\",\n                        \"BlueShift\",\n                        \"BlueFuzz\",\n                        \"StemSnapH\",\n                        \"StemSnapV\",\n                        \"ForceBold\",\n                        0,\n                        0,\n                        \"LanguageGroup\",\n                        \"ExpansionFactor\",\n                        \"initialRandomSeed\",\n                        \"SyntheticBase\",\n                        \"PostScript\",\n                        \"BaseFontName\",\n                        \"BaseFontBlend\",\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        \"ROS\",\n                        \"CIDFontVersion\",\n                        \"CIDFontRevision\",\n                        \"CIDFontType\",\n                        \"CIDCount\",\n                        \"UIDBase\",\n                        \"FDArray\",\n                        \"FDSelect\",\n                        \"FontName\"\n                    ][h], f = 2;\n                }\n                null != d ? (o[d] = 1 == s.length ? s[0] : s, s = []) : s.push(u), t += f;\n            }\n            return o;\n        }, e.cmap = {}, e.cmap.parse = function(r, t, a) {\n            r = new Uint8Array(r.buffer, t, a), t = 0;\n            var n = e._bin, o = {};\n            n.readUshort(r, t), t += 2;\n            var s = n.readUshort(r, t);\n            t += 2;\n            var i = [];\n            o.tables = [];\n            for(var h = 0; h < s; h++){\n                var f = n.readUshort(r, t);\n                t += 2;\n                var d = n.readUshort(r, t);\n                t += 2;\n                var u = n.readUint(r, t);\n                t += 4;\n                var l = \"p\" + f + \"e\" + d, v = i.indexOf(u);\n                if (-1 == v) {\n                    var c;\n                    v = o.tables.length, i.push(u);\n                    var p = n.readUshort(r, u);\n                    0 == p ? c = e.cmap.parse0(r, u) : 4 == p ? c = e.cmap.parse4(r, u) : 6 == p ? c = e.cmap.parse6(r, u) : 12 == p ? c = e.cmap.parse12(r, u) : console.debug(\"unknown format: \" + p, f, d, u), o.tables.push(c);\n                }\n                if (null != o[l]) throw \"multiple tables for one platform+encoding\";\n                o[l] = v;\n            }\n            return o;\n        }, e.cmap.parse0 = function(r, t) {\n            var a = e._bin, n = {};\n            n.format = a.readUshort(r, t), t += 2;\n            var o = a.readUshort(r, t);\n            t += 2, a.readUshort(r, t), t += 2, n.map = [];\n            for(var s = 0; s < o - 6; s++)n.map.push(r[t + s]);\n            return n;\n        }, e.cmap.parse4 = function(r, t) {\n            var a = e._bin, n = t, o = {};\n            o.format = a.readUshort(r, t), t += 2;\n            var s = a.readUshort(r, t);\n            t += 2, a.readUshort(r, t), t += 2;\n            var i = a.readUshort(r, t);\n            t += 2;\n            var h = i / 2;\n            o.searchRange = a.readUshort(r, t), t += 2, o.entrySelector = a.readUshort(r, t), t += 2, o.rangeShift = a.readUshort(r, t), t += 2, o.endCount = a.readUshorts(r, t, h), t += 2 * h, t += 2, o.startCount = a.readUshorts(r, t, h), t += 2 * h, o.idDelta = [];\n            for(var f = 0; f < h; f++)o.idDelta.push(a.readShort(r, t)), t += 2;\n            for(o.idRangeOffset = a.readUshorts(r, t, h), t += 2 * h, o.glyphIdArray = []; t < n + s;)o.glyphIdArray.push(a.readUshort(r, t)), t += 2;\n            return o;\n        }, e.cmap.parse6 = function(r, t) {\n            var a = e._bin, n = {};\n            n.format = a.readUshort(r, t), t += 2, a.readUshort(r, t), t += 2, a.readUshort(r, t), t += 2, n.firstCode = a.readUshort(r, t), t += 2;\n            var o = a.readUshort(r, t);\n            t += 2, n.glyphIdArray = [];\n            for(var s = 0; s < o; s++)n.glyphIdArray.push(a.readUshort(r, t)), t += 2;\n            return n;\n        }, e.cmap.parse12 = function(r, t) {\n            var a = e._bin, n = {};\n            n.format = a.readUshort(r, t), t += 2, t += 2, a.readUint(r, t), t += 4, a.readUint(r, t), t += 4;\n            var o = a.readUint(r, t);\n            t += 4, n.groups = [];\n            for(var s = 0; s < o; s++){\n                var i = t + 12 * s, h = a.readUint(r, i + 0), f = a.readUint(r, i + 4), d = a.readUint(r, i + 8);\n                n.groups.push([\n                    h,\n                    f,\n                    d\n                ]);\n            }\n            return n;\n        }, e.glyf = {}, e.glyf.parse = function(r, e, t, a) {\n            for(var n = [], o = 0; o < a.maxp.numGlyphs; o++)n.push(null);\n            return n;\n        }, e.glyf._parseGlyf = function(r, t) {\n            var a = e._bin, n = r._data, o = e._tabOffset(n, \"glyf\", r._offset) + r.loca[t];\n            if (r.loca[t] == r.loca[t + 1]) return null;\n            var s = {};\n            if (s.noc = a.readShort(n, o), o += 2, s.xMin = a.readShort(n, o), o += 2, s.yMin = a.readShort(n, o), o += 2, s.xMax = a.readShort(n, o), o += 2, s.yMax = a.readShort(n, o), o += 2, s.xMin >= s.xMax || s.yMin >= s.yMax) return null;\n            if (s.noc > 0) {\n                s.endPts = [];\n                for(var i = 0; i < s.noc; i++)s.endPts.push(a.readUshort(n, o)), o += 2;\n                var h = a.readUshort(n, o);\n                if (o += 2, n.length - o < h) return null;\n                s.instructions = a.readBytes(n, o, h), o += h;\n                var f = s.endPts[s.noc - 1] + 1;\n                s.flags = [];\n                for(i = 0; i < f; i++){\n                    var d = n[o];\n                    if (o++, s.flags.push(d), 0 != (8 & d)) {\n                        var u = n[o];\n                        o++;\n                        for(var l = 0; l < u; l++)s.flags.push(d), i++;\n                    }\n                }\n                s.xs = [];\n                for(i = 0; i < f; i++){\n                    var v = 0 != (2 & s.flags[i]), c = 0 != (16 & s.flags[i]);\n                    v ? (s.xs.push(c ? n[o] : -n[o]), o++) : c ? s.xs.push(0) : (s.xs.push(a.readShort(n, o)), o += 2);\n                }\n                s.ys = [];\n                for(i = 0; i < f; i++){\n                    v = 0 != (4 & s.flags[i]), c = 0 != (32 & s.flags[i]);\n                    v ? (s.ys.push(c ? n[o] : -n[o]), o++) : c ? s.ys.push(0) : (s.ys.push(a.readShort(n, o)), o += 2);\n                }\n                var p = 0, U = 0;\n                for(i = 0; i < f; i++)p += s.xs[i], U += s.ys[i], s.xs[i] = p, s.ys[i] = U;\n            } else {\n                var g;\n                s.parts = [];\n                do {\n                    g = a.readUshort(n, o), o += 2;\n                    var S = {\n                        m: {\n                            a: 1,\n                            b: 0,\n                            c: 0,\n                            d: 1,\n                            tx: 0,\n                            ty: 0\n                        },\n                        p1: -1,\n                        p2: -1\n                    };\n                    if (s.parts.push(S), S.glyphIndex = a.readUshort(n, o), o += 2, 1 & g) {\n                        var m = a.readShort(n, o);\n                        o += 2;\n                        var b = a.readShort(n, o);\n                        o += 2;\n                    } else {\n                        m = a.readInt8(n, o);\n                        o++;\n                        b = a.readInt8(n, o);\n                        o++;\n                    }\n                    2 & g ? (S.m.tx = m, S.m.ty = b) : (S.p1 = m, S.p2 = b), 8 & g ? (S.m.a = S.m.d = a.readF2dot14(n, o), o += 2) : 64 & g ? (S.m.a = a.readF2dot14(n, o), o += 2, S.m.d = a.readF2dot14(n, o), o += 2) : 128 & g && (S.m.a = a.readF2dot14(n, o), o += 2, S.m.b = a.readF2dot14(n, o), o += 2, S.m.c = a.readF2dot14(n, o), o += 2, S.m.d = a.readF2dot14(n, o), o += 2);\n                }while (32 & g);\n                if (256 & g) {\n                    var y = a.readUshort(n, o);\n                    o += 2, s.instr = [];\n                    for(i = 0; i < y; i++)s.instr.push(n[o]), o++;\n                }\n            }\n            return s;\n        }, e.GPOS = {}, e.GPOS.parse = function(r, t, a, n) {\n            return e._lctf.parse(r, t, a, n, e.GPOS.subt);\n        }, e.GPOS.subt = function(r, t, a, n) {\n            var o = e._bin, s = a, i = {};\n            if (i.fmt = o.readUshort(r, a), a += 2, 1 == t || 2 == t || 3 == t || 7 == t || 8 == t && i.fmt <= 2) {\n                var h = o.readUshort(r, a);\n                a += 2, i.coverage = e._lctf.readCoverage(r, h + s);\n            }\n            if (1 == t && 1 == i.fmt) {\n                var f = o.readUshort(r, a);\n                a += 2;\n                var d = e._lctf.numOfOnes(f);\n                0 != f && (i.pos = e.GPOS.readValueRecord(r, a, f));\n            } else if (2 == t && i.fmt >= 1 && i.fmt <= 2) {\n                f = o.readUshort(r, a);\n                a += 2;\n                var u = o.readUshort(r, a);\n                a += 2;\n                d = e._lctf.numOfOnes(f);\n                var l = e._lctf.numOfOnes(u);\n                if (1 == i.fmt) {\n                    i.pairsets = [];\n                    var v = o.readUshort(r, a);\n                    a += 2;\n                    for(var c = 0; c < v; c++){\n                        var p = s + o.readUshort(r, a);\n                        a += 2;\n                        var U = o.readUshort(r, p);\n                        p += 2;\n                        for(var g = [], S = 0; S < U; S++){\n                            var m = o.readUshort(r, p);\n                            p += 2, 0 != f && (x = e.GPOS.readValueRecord(r, p, f), p += 2 * d), 0 != u && (P = e.GPOS.readValueRecord(r, p, u), p += 2 * l), g.push({\n                                gid2: m,\n                                val1: x,\n                                val2: P\n                            });\n                        }\n                        i.pairsets.push(g);\n                    }\n                }\n                if (2 == i.fmt) {\n                    var b = o.readUshort(r, a);\n                    a += 2;\n                    var y = o.readUshort(r, a);\n                    a += 2;\n                    var F = o.readUshort(r, a);\n                    a += 2;\n                    var _ = o.readUshort(r, a);\n                    a += 2, i.classDef1 = e._lctf.readClassDef(r, s + b), i.classDef2 = e._lctf.readClassDef(r, s + y), i.matrix = [];\n                    for(c = 0; c < F; c++){\n                        var C = [];\n                        for(S = 0; S < _; S++){\n                            var x = null, P = null;\n                            0 != f && (x = e.GPOS.readValueRecord(r, a, f), a += 2 * d), 0 != u && (P = e.GPOS.readValueRecord(r, a, u), a += 2 * l), C.push({\n                                val1: x,\n                                val2: P\n                            });\n                        }\n                        i.matrix.push(C);\n                    }\n                }\n            } else {\n                if (9 == t && 1 == i.fmt) {\n                    var I = o.readUshort(r, a);\n                    a += 2;\n                    var w = o.readUint(r, a);\n                    if (a += 4, 9 == n.ltype) n.ltype = I;\n                    else if (n.ltype != I) throw \"invalid extension substitution\";\n                    return e.GPOS.subt(r, n.ltype, s + w);\n                }\n                console.debug(\"unsupported GPOS table LookupType\", t, \"format\", i.fmt);\n            }\n            return i;\n        }, e.GPOS.readValueRecord = function(r, t, a) {\n            var n = e._bin, o = [];\n            return o.push(1 & a ? n.readShort(r, t) : 0), t += 1 & a ? 2 : 0, o.push(2 & a ? n.readShort(r, t) : 0), t += 2 & a ? 2 : 0, o.push(4 & a ? n.readShort(r, t) : 0), t += 4 & a ? 2 : 0, o.push(8 & a ? n.readShort(r, t) : 0), t += 8 & a ? 2 : 0, o;\n        }, e.GSUB = {}, e.GSUB.parse = function(r, t, a, n) {\n            return e._lctf.parse(r, t, a, n, e.GSUB.subt);\n        }, e.GSUB.subt = function(r, t, a, n) {\n            var o = e._bin, s = a, i = {};\n            if (i.fmt = o.readUshort(r, a), a += 2, 1 != t && 4 != t && 5 != t && 6 != t) return null;\n            if (1 == t || 4 == t || 5 == t && i.fmt <= 2 || 6 == t && i.fmt <= 2) {\n                var h = o.readUshort(r, a);\n                a += 2, i.coverage = e._lctf.readCoverage(r, s + h);\n            }\n            if (1 == t && i.fmt >= 1 && i.fmt <= 2) {\n                if (1 == i.fmt) i.delta = o.readShort(r, a), a += 2;\n                else if (2 == i.fmt) {\n                    var f = o.readUshort(r, a);\n                    a += 2, i.newg = o.readUshorts(r, a, f), a += 2 * i.newg.length;\n                }\n            } else if (4 == t) {\n                i.vals = [];\n                f = o.readUshort(r, a);\n                a += 2;\n                for(var d = 0; d < f; d++){\n                    var u = o.readUshort(r, a);\n                    a += 2, i.vals.push(e.GSUB.readLigatureSet(r, s + u));\n                }\n            } else if (5 == t && 2 == i.fmt) {\n                if (2 == i.fmt) {\n                    var l = o.readUshort(r, a);\n                    a += 2, i.cDef = e._lctf.readClassDef(r, s + l), i.scset = [];\n                    var v = o.readUshort(r, a);\n                    a += 2;\n                    for(d = 0; d < v; d++){\n                        var c = o.readUshort(r, a);\n                        a += 2, i.scset.push(0 == c ? null : e.GSUB.readSubClassSet(r, s + c));\n                    }\n                }\n            } else if (6 == t && 3 == i.fmt) {\n                if (3 == i.fmt) {\n                    for(d = 0; d < 3; d++){\n                        f = o.readUshort(r, a);\n                        a += 2;\n                        for(var p = [], U = 0; U < f; U++)p.push(e._lctf.readCoverage(r, s + o.readUshort(r, a + 2 * U)));\n                        a += 2 * f, 0 == d && (i.backCvg = p), 1 == d && (i.inptCvg = p), 2 == d && (i.ahedCvg = p);\n                    }\n                    f = o.readUshort(r, a);\n                    a += 2, i.lookupRec = e.GSUB.readSubstLookupRecords(r, a, f);\n                }\n            } else {\n                if (7 == t && 1 == i.fmt) {\n                    var g = o.readUshort(r, a);\n                    a += 2;\n                    var S = o.readUint(r, a);\n                    if (a += 4, 9 == n.ltype) n.ltype = g;\n                    else if (n.ltype != g) throw \"invalid extension substitution\";\n                    return e.GSUB.subt(r, n.ltype, s + S);\n                }\n                console.debug(\"unsupported GSUB table LookupType\", t, \"format\", i.fmt);\n            }\n            return i;\n        }, e.GSUB.readSubClassSet = function(r, t) {\n            var a = e._bin.readUshort, n = t, o = [], s = a(r, t);\n            t += 2;\n            for(var i = 0; i < s; i++){\n                var h = a(r, t);\n                t += 2, o.push(e.GSUB.readSubClassRule(r, n + h));\n            }\n            return o;\n        }, e.GSUB.readSubClassRule = function(r, t) {\n            var a = e._bin.readUshort, n = {}, o = a(r, t), s = a(r, t += 2);\n            t += 2, n.input = [];\n            for(var i = 0; i < o - 1; i++)n.input.push(a(r, t)), t += 2;\n            return n.substLookupRecords = e.GSUB.readSubstLookupRecords(r, t, s), n;\n        }, e.GSUB.readSubstLookupRecords = function(r, t, a) {\n            for(var n = e._bin.readUshort, o = [], s = 0; s < a; s++)o.push(n(r, t), n(r, t + 2)), t += 4;\n            return o;\n        }, e.GSUB.readChainSubClassSet = function(r, t) {\n            var a = e._bin, n = t, o = [], s = a.readUshort(r, t);\n            t += 2;\n            for(var i = 0; i < s; i++){\n                var h = a.readUshort(r, t);\n                t += 2, o.push(e.GSUB.readChainSubClassRule(r, n + h));\n            }\n            return o;\n        }, e.GSUB.readChainSubClassRule = function(r, t) {\n            for(var a = e._bin, n = {}, o = [\n                \"backtrack\",\n                \"input\",\n                \"lookahead\"\n            ], s = 0; s < o.length; s++){\n                var i = a.readUshort(r, t);\n                t += 2, 1 == s && i--, n[o[s]] = a.readUshorts(r, t, i), t += 2 * n[o[s]].length;\n            }\n            i = a.readUshort(r, t);\n            return t += 2, n.subst = a.readUshorts(r, t, 2 * i), t += 2 * n.subst.length, n;\n        }, e.GSUB.readLigatureSet = function(r, t) {\n            var a = e._bin, n = t, o = [], s = a.readUshort(r, t);\n            t += 2;\n            for(var i = 0; i < s; i++){\n                var h = a.readUshort(r, t);\n                t += 2, o.push(e.GSUB.readLigature(r, n + h));\n            }\n            return o;\n        }, e.GSUB.readLigature = function(r, t) {\n            var a = e._bin, n = {\n                chain: []\n            };\n            n.nglyph = a.readUshort(r, t), t += 2;\n            var o = a.readUshort(r, t);\n            t += 2;\n            for(var s = 0; s < o - 1; s++)n.chain.push(a.readUshort(r, t)), t += 2;\n            return n;\n        }, e.head = {}, e.head.parse = function(r, t, a) {\n            var n = e._bin, o = {};\n            return n.readFixed(r, t), t += 4, o.fontRevision = n.readFixed(r, t), t += 4, n.readUint(r, t), t += 4, n.readUint(r, t), t += 4, o.flags = n.readUshort(r, t), t += 2, o.unitsPerEm = n.readUshort(r, t), t += 2, o.created = n.readUint64(r, t), t += 8, o.modified = n.readUint64(r, t), t += 8, o.xMin = n.readShort(r, t), t += 2, o.yMin = n.readShort(r, t), t += 2, o.xMax = n.readShort(r, t), t += 2, o.yMax = n.readShort(r, t), t += 2, o.macStyle = n.readUshort(r, t), t += 2, o.lowestRecPPEM = n.readUshort(r, t), t += 2, o.fontDirectionHint = n.readShort(r, t), t += 2, o.indexToLocFormat = n.readShort(r, t), t += 2, o.glyphDataFormat = n.readShort(r, t), t += 2, o;\n        }, e.hhea = {}, e.hhea.parse = function(r, t, a) {\n            var n = e._bin, o = {};\n            return n.readFixed(r, t), t += 4, o.ascender = n.readShort(r, t), t += 2, o.descender = n.readShort(r, t), t += 2, o.lineGap = n.readShort(r, t), t += 2, o.advanceWidthMax = n.readUshort(r, t), t += 2, o.minLeftSideBearing = n.readShort(r, t), t += 2, o.minRightSideBearing = n.readShort(r, t), t += 2, o.xMaxExtent = n.readShort(r, t), t += 2, o.caretSlopeRise = n.readShort(r, t), t += 2, o.caretSlopeRun = n.readShort(r, t), t += 2, o.caretOffset = n.readShort(r, t), t += 2, t += 8, o.metricDataFormat = n.readShort(r, t), t += 2, o.numberOfHMetrics = n.readUshort(r, t), t += 2, o;\n        }, e.hmtx = {}, e.hmtx.parse = function(r, t, a, n) {\n            for(var o = e._bin, s = {\n                aWidth: [],\n                lsBearing: []\n            }, i = 0, h = 0, f = 0; f < n.maxp.numGlyphs; f++)f < n.hhea.numberOfHMetrics && (i = o.readUshort(r, t), t += 2, h = o.readShort(r, t), t += 2), s.aWidth.push(i), s.lsBearing.push(h);\n            return s;\n        }, e.kern = {}, e.kern.parse = function(r, t, a, n) {\n            var o = e._bin, s = o.readUshort(r, t);\n            if (t += 2, 1 == s) return e.kern.parseV1(r, t - 2, a, n);\n            var i = o.readUshort(r, t);\n            t += 2;\n            for(var h = {\n                glyph1: [],\n                rval: []\n            }, f = 0; f < i; f++){\n                t += 2;\n                a = o.readUshort(r, t);\n                t += 2;\n                var d = o.readUshort(r, t);\n                t += 2;\n                var u = d >>> 8;\n                if (0 != (u &= 15)) throw \"unknown kern table format: \" + u;\n                t = e.kern.readFormat0(r, t, h);\n            }\n            return h;\n        }, e.kern.parseV1 = function(r, t, a, n) {\n            var o = e._bin;\n            o.readFixed(r, t), t += 4;\n            var s = o.readUint(r, t);\n            t += 4;\n            for(var i = {\n                glyph1: [],\n                rval: []\n            }, h = 0; h < s; h++){\n                o.readUint(r, t), t += 4;\n                var f = o.readUshort(r, t);\n                t += 2, o.readUshort(r, t), t += 2;\n                var d = f >>> 8;\n                if (0 != (d &= 15)) throw \"unknown kern table format: \" + d;\n                t = e.kern.readFormat0(r, t, i);\n            }\n            return i;\n        }, e.kern.readFormat0 = function(r, t, a) {\n            var n = e._bin, o = -1, s = n.readUshort(r, t);\n            t += 2, n.readUshort(r, t), t += 2, n.readUshort(r, t), t += 2, n.readUshort(r, t), t += 2;\n            for(var i = 0; i < s; i++){\n                var h = n.readUshort(r, t);\n                t += 2;\n                var f = n.readUshort(r, t);\n                t += 2;\n                var d = n.readShort(r, t);\n                t += 2, h != o && (a.glyph1.push(h), a.rval.push({\n                    glyph2: [],\n                    vals: []\n                }));\n                var u = a.rval[a.rval.length - 1];\n                u.glyph2.push(f), u.vals.push(d), o = h;\n            }\n            return t;\n        }, e.loca = {}, e.loca.parse = function(r, t, a, n) {\n            var o = e._bin, s = [], i = n.head.indexToLocFormat, h = n.maxp.numGlyphs + 1;\n            if (0 == i) for(var f = 0; f < h; f++)s.push(o.readUshort(r, t + (f << 1)) << 1);\n            if (1 == i) for(f = 0; f < h; f++)s.push(o.readUint(r, t + (f << 2)));\n            return s;\n        }, e.maxp = {}, e.maxp.parse = function(r, t, a) {\n            var n = e._bin, o = {}, s = n.readUint(r, t);\n            return t += 4, o.numGlyphs = n.readUshort(r, t), t += 2, 65536 == s && (o.maxPoints = n.readUshort(r, t), t += 2, o.maxContours = n.readUshort(r, t), t += 2, o.maxCompositePoints = n.readUshort(r, t), t += 2, o.maxCompositeContours = n.readUshort(r, t), t += 2, o.maxZones = n.readUshort(r, t), t += 2, o.maxTwilightPoints = n.readUshort(r, t), t += 2, o.maxStorage = n.readUshort(r, t), t += 2, o.maxFunctionDefs = n.readUshort(r, t), t += 2, o.maxInstructionDefs = n.readUshort(r, t), t += 2, o.maxStackElements = n.readUshort(r, t), t += 2, o.maxSizeOfInstructions = n.readUshort(r, t), t += 2, o.maxComponentElements = n.readUshort(r, t), t += 2, o.maxComponentDepth = n.readUshort(r, t), t += 2), o;\n        }, e.name = {}, e.name.parse = function(r, t, a) {\n            var n = e._bin, o = {};\n            n.readUshort(r, t), t += 2;\n            var s = n.readUshort(r, t);\n            t += 2, n.readUshort(r, t);\n            for(var i, h = [\n                \"copyright\",\n                \"fontFamily\",\n                \"fontSubfamily\",\n                \"ID\",\n                \"fullName\",\n                \"version\",\n                \"postScriptName\",\n                \"trademark\",\n                \"manufacturer\",\n                \"designer\",\n                \"description\",\n                \"urlVendor\",\n                \"urlDesigner\",\n                \"licence\",\n                \"licenceURL\",\n                \"---\",\n                \"typoFamilyName\",\n                \"typoSubfamilyName\",\n                \"compatibleFull\",\n                \"sampleText\",\n                \"postScriptCID\",\n                \"wwsFamilyName\",\n                \"wwsSubfamilyName\",\n                \"lightPalette\",\n                \"darkPalette\"\n            ], f = t += 2, d = 0; d < s; d++){\n                var u = n.readUshort(r, t);\n                t += 2;\n                var l = n.readUshort(r, t);\n                t += 2;\n                var v = n.readUshort(r, t);\n                t += 2;\n                var c = n.readUshort(r, t);\n                t += 2;\n                var p = n.readUshort(r, t);\n                t += 2;\n                var U = n.readUshort(r, t);\n                t += 2;\n                var g, S = h[c], m = f + 12 * s + U;\n                if (0 == u) g = n.readUnicode(r, m, p / 2);\n                else if (3 == u && 0 == l) g = n.readUnicode(r, m, p / 2);\n                else if (0 == l) g = n.readASCII(r, m, p);\n                else if (1 == l) g = n.readUnicode(r, m, p / 2);\n                else if (3 == l) g = n.readUnicode(r, m, p / 2);\n                else {\n                    if (1 != u) throw \"unknown encoding \" + l + \", platformID: \" + u;\n                    g = n.readASCII(r, m, p), console.debug(\"reading unknown MAC encoding \" + l + \" as ASCII\");\n                }\n                var b = \"p\" + u + \",\" + v.toString(16);\n                null == o[b] && (o[b] = {}), o[b][void 0 !== S ? S : c] = g, o[b]._lang = v;\n            }\n            for(var y in o)if (null != o[y].postScriptName && 1033 == o[y]._lang) return o[y];\n            for(var y in o)if (null != o[y].postScriptName && 0 == o[y]._lang) return o[y];\n            for(var y in o)if (null != o[y].postScriptName && 3084 == o[y]._lang) return o[y];\n            for(var y in o)if (null != o[y].postScriptName) return o[y];\n            for(var y in o){\n                i = y;\n                break;\n            }\n            return console.debug(\"returning name table with languageID \" + o[i]._lang), o[i];\n        }, e[\"OS/2\"] = {}, e[\"OS/2\"].parse = function(r, t, a) {\n            var n = e._bin.readUshort(r, t);\n            t += 2;\n            var o = {};\n            if (0 == n) e[\"OS/2\"].version0(r, t, o);\n            else if (1 == n) e[\"OS/2\"].version1(r, t, o);\n            else if (2 == n || 3 == n || 4 == n) e[\"OS/2\"].version2(r, t, o);\n            else {\n                if (5 != n) throw \"unknown OS/2 table version: \" + n;\n                e[\"OS/2\"].version5(r, t, o);\n            }\n            return o;\n        }, e[\"OS/2\"].version0 = function(r, t, a) {\n            var n = e._bin;\n            return a.xAvgCharWidth = n.readShort(r, t), t += 2, a.usWeightClass = n.readUshort(r, t), t += 2, a.usWidthClass = n.readUshort(r, t), t += 2, a.fsType = n.readUshort(r, t), t += 2, a.ySubscriptXSize = n.readShort(r, t), t += 2, a.ySubscriptYSize = n.readShort(r, t), t += 2, a.ySubscriptXOffset = n.readShort(r, t), t += 2, a.ySubscriptYOffset = n.readShort(r, t), t += 2, a.ySuperscriptXSize = n.readShort(r, t), t += 2, a.ySuperscriptYSize = n.readShort(r, t), t += 2, a.ySuperscriptXOffset = n.readShort(r, t), t += 2, a.ySuperscriptYOffset = n.readShort(r, t), t += 2, a.yStrikeoutSize = n.readShort(r, t), t += 2, a.yStrikeoutPosition = n.readShort(r, t), t += 2, a.sFamilyClass = n.readShort(r, t), t += 2, a.panose = n.readBytes(r, t, 10), t += 10, a.ulUnicodeRange1 = n.readUint(r, t), t += 4, a.ulUnicodeRange2 = n.readUint(r, t), t += 4, a.ulUnicodeRange3 = n.readUint(r, t), t += 4, a.ulUnicodeRange4 = n.readUint(r, t), t += 4, a.achVendID = [\n                n.readInt8(r, t),\n                n.readInt8(r, t + 1),\n                n.readInt8(r, t + 2),\n                n.readInt8(r, t + 3)\n            ], t += 4, a.fsSelection = n.readUshort(r, t), t += 2, a.usFirstCharIndex = n.readUshort(r, t), t += 2, a.usLastCharIndex = n.readUshort(r, t), t += 2, a.sTypoAscender = n.readShort(r, t), t += 2, a.sTypoDescender = n.readShort(r, t), t += 2, a.sTypoLineGap = n.readShort(r, t), t += 2, a.usWinAscent = n.readUshort(r, t), t += 2, a.usWinDescent = n.readUshort(r, t), t += 2;\n        }, e[\"OS/2\"].version1 = function(r, t, a) {\n            var n = e._bin;\n            return t = e[\"OS/2\"].version0(r, t, a), a.ulCodePageRange1 = n.readUint(r, t), t += 4, a.ulCodePageRange2 = n.readUint(r, t), t += 4;\n        }, e[\"OS/2\"].version2 = function(r, t, a) {\n            var n = e._bin;\n            return t = e[\"OS/2\"].version1(r, t, a), a.sxHeight = n.readShort(r, t), t += 2, a.sCapHeight = n.readShort(r, t), t += 2, a.usDefault = n.readUshort(r, t), t += 2, a.usBreak = n.readUshort(r, t), t += 2, a.usMaxContext = n.readUshort(r, t), t += 2;\n        }, e[\"OS/2\"].version5 = function(r, t, a) {\n            var n = e._bin;\n            return t = e[\"OS/2\"].version2(r, t, a), a.usLowerOpticalPointSize = n.readUshort(r, t), t += 2, a.usUpperOpticalPointSize = n.readUshort(r, t), t += 2;\n        }, e.post = {}, e.post.parse = function(r, t, a) {\n            var n = e._bin, o = {};\n            return o.version = n.readFixed(r, t), t += 4, o.italicAngle = n.readFixed(r, t), t += 4, o.underlinePosition = n.readShort(r, t), t += 2, o.underlineThickness = n.readShort(r, t), t += 2, o;\n        }, null == e && (e = {}), null == e.U && (e.U = {}), e.U.codeToGlyph = function(r, e) {\n            var t = r.cmap, a = -1;\n            if (null != t.p0e4 ? a = t.p0e4 : null != t.p3e1 ? a = t.p3e1 : null != t.p1e0 ? a = t.p1e0 : null != t.p0e3 && (a = t.p0e3), -1 == a) throw \"no familiar platform and encoding!\";\n            var n = t.tables[a];\n            if (0 == n.format) return e >= n.map.length ? 0 : n.map[e];\n            if (4 == n.format) {\n                for(var o = -1, s = 0; s < n.endCount.length; s++)if (e <= n.endCount[s]) {\n                    o = s;\n                    break;\n                }\n                if (-1 == o) return 0;\n                if (n.startCount[o] > e) return 0;\n                return 65535 & (0 != n.idRangeOffset[o] ? n.glyphIdArray[e - n.startCount[o] + (n.idRangeOffset[o] >> 1) - (n.idRangeOffset.length - o)] : e + n.idDelta[o]);\n            }\n            if (12 == n.format) {\n                if (e > n.groups[n.groups.length - 1][1]) return 0;\n                for(s = 0; s < n.groups.length; s++){\n                    var i = n.groups[s];\n                    if (i[0] <= e && e <= i[1]) return i[2] + (e - i[0]);\n                }\n                return 0;\n            }\n            throw \"unknown cmap table format \" + n.format;\n        }, e.U.glyphToPath = function(r, t) {\n            var a = {\n                cmds: [],\n                crds: []\n            };\n            if (r.SVG && r.SVG.entries[t]) {\n                var n = r.SVG.entries[t];\n                return null == n ? a : (\"string\" == typeof n && (n = e.SVG.toPath(n), r.SVG.entries[t] = n), n);\n            }\n            if (r.CFF) {\n                var o = {\n                    x: 0,\n                    y: 0,\n                    stack: [],\n                    nStems: 0,\n                    haveWidth: !1,\n                    width: r.CFF.Private ? r.CFF.Private.defaultWidthX : 0,\n                    open: !1\n                }, s = r.CFF, i = r.CFF.Private;\n                if (s.ROS) {\n                    for(var h = 0; s.FDSelect[h + 2] <= t;)h += 2;\n                    i = s.FDArray[s.FDSelect[h + 1]].Private;\n                }\n                e.U._drawCFF(r.CFF.CharStrings[t], o, s, i, a);\n            } else r.glyf && e.U._drawGlyf(t, r, a);\n            return a;\n        }, e.U._drawGlyf = function(r, t, a) {\n            var n = t.glyf[r];\n            null == n && (n = t.glyf[r] = e.glyf._parseGlyf(t, r)), null != n && (n.noc > -1 ? e.U._simpleGlyph(n, a) : e.U._compoGlyph(n, t, a));\n        }, e.U._simpleGlyph = function(r, t) {\n            for(var a = 0; a < r.noc; a++){\n                for(var n = 0 == a ? 0 : r.endPts[a - 1] + 1, o = r.endPts[a], s = n; s <= o; s++){\n                    var i = s == n ? o : s - 1, h = s == o ? n : s + 1, f = 1 & r.flags[s], d = 1 & r.flags[i], u = 1 & r.flags[h], l = r.xs[s], v = r.ys[s];\n                    if (s == n) if (f) {\n                        if (!d) {\n                            e.U.P.moveTo(t, l, v);\n                            continue;\n                        }\n                        e.U.P.moveTo(t, r.xs[i], r.ys[i]);\n                    } else d ? e.U.P.moveTo(t, r.xs[i], r.ys[i]) : e.U.P.moveTo(t, (r.xs[i] + l) / 2, (r.ys[i] + v) / 2);\n                    f ? d && e.U.P.lineTo(t, l, v) : u ? e.U.P.qcurveTo(t, l, v, r.xs[h], r.ys[h]) : e.U.P.qcurveTo(t, l, v, (l + r.xs[h]) / 2, (v + r.ys[h]) / 2);\n                }\n                e.U.P.closePath(t);\n            }\n        }, e.U._compoGlyph = function(r, t, a) {\n            for(var n = 0; n < r.parts.length; n++){\n                var o = {\n                    cmds: [],\n                    crds: []\n                }, s = r.parts[n];\n                e.U._drawGlyf(s.glyphIndex, t, o);\n                for(var i = s.m, h = 0; h < o.crds.length; h += 2){\n                    var f = o.crds[h], d = o.crds[h + 1];\n                    a.crds.push(f * i.a + d * i.b + i.tx), a.crds.push(f * i.c + d * i.d + i.ty);\n                }\n                for(h = 0; h < o.cmds.length; h++)a.cmds.push(o.cmds[h]);\n            }\n        }, e.U._getGlyphClass = function(r, t) {\n            var a = e._lctf.getInterval(t, r);\n            return -1 == a ? 0 : t[a + 2];\n        }, e.U.getPairAdjustment = function(r, t, a) {\n            var n = !1;\n            if (r.GPOS) for(var o = r.GPOS, s = o.lookupList, i = o.featureList, h = [], f = 0; f < i.length; f++){\n                var d = i[f];\n                if (\"kern\" == d.tag) {\n                    n = !0;\n                    for(var u = 0; u < d.tab.length; u++)if (!h[d.tab[u]]) {\n                        h[d.tab[u]] = !0;\n                        for(var l = s[d.tab[u]], v = 0; v < l.tabs.length; v++)if (null != l.tabs[v]) {\n                            var c, p = l.tabs[v];\n                            if (!p.coverage || -1 != (c = e._lctf.coverageIndex(p.coverage, t))) {\n                                if (1 == l.ltype) ;\n                                else if (2 == l.ltype) {\n                                    var U = null;\n                                    if (1 == p.fmt) {\n                                        var g = p.pairsets[c];\n                                        for(f = 0; f < g.length; f++)g[f].gid2 == a && (U = g[f]);\n                                    } else if (2 == p.fmt) {\n                                        var S = e.U._getGlyphClass(t, p.classDef1), m = e.U._getGlyphClass(a, p.classDef2);\n                                        U = p.matrix[S][m];\n                                    }\n                                    if (U) {\n                                        var b = 0;\n                                        return U.val1 && U.val1[2] && (b += U.val1[2]), U.val2 && U.val2[0] && (b += U.val2[0]), b;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (r.kern && !n) {\n                var y = r.kern.glyph1.indexOf(t);\n                if (-1 != y) {\n                    var F = r.kern.rval[y].glyph2.indexOf(a);\n                    if (-1 != F) return r.kern.rval[y].vals[F];\n                }\n            }\n            return 0;\n        }, e.U._applySubs = function(r, t, a, n) {\n            for(var o = r.length - t - 1, s = 0; s < a.tabs.length; s++)if (null != a.tabs[s]) {\n                var i, h = a.tabs[s];\n                if (!h.coverage || -1 != (i = e._lctf.coverageIndex(h.coverage, r[t]))) {\n                    if (1 == a.ltype) r[t], 1 == h.fmt ? r[t] = r[t] + h.delta : r[t] = h.newg[i];\n                    else if (4 == a.ltype) for(var f = h.vals[i], d = 0; d < f.length; d++){\n                        var u = f[d], l = u.chain.length;\n                        if (!(l > o)) {\n                            for(var v = !0, c = 0, p = 0; p < l; p++){\n                                for(; -1 == r[t + c + (1 + p)];)c++;\n                                u.chain[p] != r[t + c + (1 + p)] && (v = !1);\n                            }\n                            if (v) {\n                                r[t] = u.nglyph;\n                                for(p = 0; p < l + c; p++)r[t + p + 1] = -1;\n                                break;\n                            }\n                        }\n                    }\n                    else if (5 == a.ltype && 2 == h.fmt) for(var U = e._lctf.getInterval(h.cDef, r[t]), g = h.cDef[U + 2], S = h.scset[g], m = 0; m < S.length; m++){\n                        var b = S[m], y = b.input;\n                        if (!(y.length > o)) {\n                            for(v = !0, p = 0; p < y.length; p++){\n                                var F = e._lctf.getInterval(h.cDef, r[t + 1 + p]);\n                                if (-1 == U && h.cDef[F + 2] != y[p]) {\n                                    v = !1;\n                                    break;\n                                }\n                            }\n                            if (v) {\n                                var _ = b.substLookupRecords;\n                                for(d = 0; d < _.length; d += 2)_[d], _[d + 1];\n                            }\n                        }\n                    }\n                    else if (6 == a.ltype && 3 == h.fmt) {\n                        if (!e.U._glsCovered(r, h.backCvg, t - h.backCvg.length)) continue;\n                        if (!e.U._glsCovered(r, h.inptCvg, t)) continue;\n                        if (!e.U._glsCovered(r, h.ahedCvg, t + h.inptCvg.length)) continue;\n                        var C = h.lookupRec;\n                        for(m = 0; m < C.length; m += 2){\n                            U = C[m];\n                            var x = n[C[m + 1]];\n                            e.U._applySubs(r, t + U, x, n);\n                        }\n                    }\n                }\n            }\n        }, e.U._glsCovered = function(r, t, a) {\n            for(var n = 0; n < t.length; n++){\n                if (-1 == e._lctf.coverageIndex(t[n], r[a + n])) return !1;\n            }\n            return !0;\n        }, e.U.glyphsToPath = function(r, t, a) {\n            for(var n = {\n                cmds: [],\n                crds: []\n            }, o = 0, s = 0; s < t.length; s++){\n                var i = t[s];\n                if (-1 != i) {\n                    for(var h = s < t.length - 1 && -1 != t[s + 1] ? t[s + 1] : 0, f = e.U.glyphToPath(r, i), d = 0; d < f.crds.length; d += 2)n.crds.push(f.crds[d] + o), n.crds.push(f.crds[d + 1]);\n                    a && n.cmds.push(a);\n                    for(d = 0; d < f.cmds.length; d++)n.cmds.push(f.cmds[d]);\n                    a && n.cmds.push(\"X\"), o += r.hmtx.aWidth[i], s < t.length - 1 && (o += e.U.getPairAdjustment(r, i, h));\n                }\n            }\n            return n;\n        }, e.U.P = {}, e.U.P.moveTo = function(r, e, t) {\n            r.cmds.push(\"M\"), r.crds.push(e, t);\n        }, e.U.P.lineTo = function(r, e, t) {\n            r.cmds.push(\"L\"), r.crds.push(e, t);\n        }, e.U.P.curveTo = function(r, e, t, a, n, o, s) {\n            r.cmds.push(\"C\"), r.crds.push(e, t, a, n, o, s);\n        }, e.U.P.qcurveTo = function(r, e, t, a, n) {\n            r.cmds.push(\"Q\"), r.crds.push(e, t, a, n);\n        }, e.U.P.closePath = function(r) {\n            r.cmds.push(\"Z\");\n        }, e.U._drawCFF = function(r, t, a, n, o) {\n            for(var s = t.stack, i = t.nStems, h = t.haveWidth, f = t.width, d = t.open, u = 0, l = t.x, v = t.y, c = 0, p = 0, U = 0, g = 0, S = 0, m = 0, b = 0, y = 0, F = 0, _ = 0, C = {\n                val: 0,\n                size: 0\n            }; u < r.length;){\n                e.CFF.getCharString(r, u, C);\n                var x = C.val;\n                if (u += C.size, \"o1\" == x || \"o18\" == x) s.length % 2 != 0 && !h && (f = s.shift() + n.nominalWidthX), i += s.length >> 1, s.length = 0, h = !0;\n                else if (\"o3\" == x || \"o23\" == x) {\n                    s.length % 2 != 0 && !h && (f = s.shift() + n.nominalWidthX), i += s.length >> 1, s.length = 0, h = !0;\n                } else if (\"o4\" == x) s.length > 1 && !h && (f = s.shift() + n.nominalWidthX, h = !0), d && e.U.P.closePath(o), v += s.pop(), e.U.P.moveTo(o, l, v), d = !0;\n                else if (\"o5\" == x) for(; s.length > 0;)l += s.shift(), v += s.shift(), e.U.P.lineTo(o, l, v);\n                else if (\"o6\" == x || \"o7\" == x) for(var P = s.length, I = \"o6\" == x, w = 0; w < P; w++){\n                    var O = s.shift();\n                    I ? l += O : v += O, I = !I, e.U.P.lineTo(o, l, v);\n                }\n                else if (\"o8\" == x || \"o24\" == x) {\n                    P = s.length;\n                    for(var T = 0; T + 6 <= P;)c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), l = U + s.shift(), v = g + s.shift(), e.U.P.curveTo(o, c, p, U, g, l, v), T += 6;\n                    \"o24\" == x && (l += s.shift(), v += s.shift(), e.U.P.lineTo(o, l, v));\n                } else {\n                    if (\"o11\" == x) break;\n                    if (\"o1234\" == x || \"o1235\" == x || \"o1236\" == x || \"o1237\" == x) \"o1234\" == x && (p = v, U = (c = l + s.shift()) + s.shift(), _ = g = p + s.shift(), m = g, y = v, l = (b = (S = (F = U + s.shift()) + s.shift()) + s.shift()) + s.shift(), e.U.P.curveTo(o, c, p, U, g, F, _), e.U.P.curveTo(o, S, m, b, y, l, v)), \"o1235\" == x && (c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), F = U + s.shift(), _ = g + s.shift(), S = F + s.shift(), m = _ + s.shift(), b = S + s.shift(), y = m + s.shift(), l = b + s.shift(), v = y + s.shift(), s.shift(), e.U.P.curveTo(o, c, p, U, g, F, _), e.U.P.curveTo(o, S, m, b, y, l, v)), \"o1236\" == x && (c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), _ = g = p + s.shift(), m = g, b = (S = (F = U + s.shift()) + s.shift()) + s.shift(), y = m + s.shift(), l = b + s.shift(), e.U.P.curveTo(o, c, p, U, g, F, _), e.U.P.curveTo(o, S, m, b, y, l, v)), \"o1237\" == x && (c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), F = U + s.shift(), _ = g + s.shift(), S = F + s.shift(), m = _ + s.shift(), b = S + s.shift(), y = m + s.shift(), Math.abs(b - l) > Math.abs(y - v) ? l = b + s.shift() : v = y + s.shift(), e.U.P.curveTo(o, c, p, U, g, F, _), e.U.P.curveTo(o, S, m, b, y, l, v));\n                    else if (\"o14\" == x) {\n                        if (s.length > 0 && !h && (f = s.shift() + a.nominalWidthX, h = !0), 4 == s.length) {\n                            var k = s.shift(), G = s.shift(), D = s.shift(), B = s.shift(), L = e.CFF.glyphBySE(a, D), R = e.CFF.glyphBySE(a, B);\n                            e.U._drawCFF(a.CharStrings[L], t, a, n, o), t.x = k, t.y = G, e.U._drawCFF(a.CharStrings[R], t, a, n, o);\n                        }\n                        d && (e.U.P.closePath(o), d = !1);\n                    } else if (\"o19\" == x || \"o20\" == x) {\n                        s.length % 2 != 0 && !h && (f = s.shift() + n.nominalWidthX), i += s.length >> 1, s.length = 0, h = !0, u += i + 7 >> 3;\n                    } else if (\"o21\" == x) s.length > 2 && !h && (f = s.shift() + n.nominalWidthX, h = !0), v += s.pop(), l += s.pop(), d && e.U.P.closePath(o), e.U.P.moveTo(o, l, v), d = !0;\n                    else if (\"o22\" == x) s.length > 1 && !h && (f = s.shift() + n.nominalWidthX, h = !0), l += s.pop(), d && e.U.P.closePath(o), e.U.P.moveTo(o, l, v), d = !0;\n                    else if (\"o25\" == x) {\n                        for(; s.length > 6;)l += s.shift(), v += s.shift(), e.U.P.lineTo(o, l, v);\n                        c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), l = U + s.shift(), v = g + s.shift(), e.U.P.curveTo(o, c, p, U, g, l, v);\n                    } else if (\"o26\" == x) for(s.length % 2 && (l += s.shift()); s.length > 0;)c = l, p = v + s.shift(), l = U = c + s.shift(), v = (g = p + s.shift()) + s.shift(), e.U.P.curveTo(o, c, p, U, g, l, v);\n                    else if (\"o27\" == x) for(s.length % 2 && (v += s.shift()); s.length > 0;)p = v, U = (c = l + s.shift()) + s.shift(), g = p + s.shift(), l = U + s.shift(), v = g, e.U.P.curveTo(o, c, p, U, g, l, v);\n                    else if (\"o10\" == x || \"o29\" == x) {\n                        var A = \"o10\" == x ? n : a;\n                        if (0 == s.length) console.debug(\"error: empty stack\");\n                        else {\n                            var W = s.pop(), M = A.Subrs[W + A.Bias];\n                            t.x = l, t.y = v, t.nStems = i, t.haveWidth = h, t.width = f, t.open = d, e.U._drawCFF(M, t, a, n, o), l = t.x, v = t.y, i = t.nStems, h = t.haveWidth, f = t.width, d = t.open;\n                        }\n                    } else if (\"o30\" == x || \"o31\" == x) {\n                        var V = s.length, N = (T = 0, \"o31\" == x);\n                        for(T += V - (P = -3 & V); T < P;)N ? (p = v, U = (c = l + s.shift()) + s.shift(), v = (g = p + s.shift()) + s.shift(), P - T == 5 ? (l = U + s.shift(), T++) : l = U, N = !1) : (c = l, p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), l = U + s.shift(), P - T == 5 ? (v = g + s.shift(), T++) : v = g, N = !0), e.U.P.curveTo(o, c, p, U, g, l, v), T += 4;\n                    } else {\n                        if (\"o\" == (x + \"\").charAt(0)) throw console.debug(\"Unknown operation: \" + x, r), x;\n                        s.push(x);\n                    }\n                }\n            }\n            t.x = l, t.y = v, t.nStems = i, t.haveWidth = h, t.width = f, t.open = d;\n        };\n        var t = e, a = {\n            Typr: t\n        };\n        return r.Typr = t, r.default = a, Object.defineProperty(r, \"__esModule\", {\n            value: !0\n        }), r;\n    }({}).Typr;\n}\n/*!\nCustom bundle of woff2otf (https://github.com/arty-name/woff2otf) with fflate\n(https://github.com/101arrowz/fflate) for use in Troika text rendering. \nOriginal licenses apply: \n- fflate: https://github.com/101arrowz/fflate/blob/master/LICENSE (MIT)\n- woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)\n*/ function woff2otfFactory() {\n    return function(r) {\n        var e = Uint8Array, n = Uint16Array, t = Uint32Array, a = new e([\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            2,\n            2,\n            2,\n            2,\n            3,\n            3,\n            3,\n            3,\n            4,\n            4,\n            4,\n            4,\n            5,\n            5,\n            5,\n            5,\n            0,\n            0,\n            0,\n            0\n        ]), i = new e([\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            2,\n            2,\n            3,\n            3,\n            4,\n            4,\n            5,\n            5,\n            6,\n            6,\n            7,\n            7,\n            8,\n            8,\n            9,\n            9,\n            10,\n            10,\n            11,\n            11,\n            12,\n            12,\n            13,\n            13,\n            0,\n            0\n        ]), o = new e([\n            16,\n            17,\n            18,\n            0,\n            8,\n            7,\n            9,\n            6,\n            10,\n            5,\n            11,\n            4,\n            12,\n            3,\n            13,\n            2,\n            14,\n            1,\n            15\n        ]), f = function(r, e) {\n            for(var a = new n(31), i = 0; i < 31; ++i)a[i] = e += 1 << r[i - 1];\n            var o = new t(a[30]);\n            for(i = 1; i < 30; ++i)for(var f = a[i]; f < a[i + 1]; ++f)o[f] = f - a[i] << 5 | i;\n            return [\n                a,\n                o\n            ];\n        }, u = f(a, 2), v = u[0], s = u[1];\n        v[28] = 258, s[258] = 28;\n        for(var l = f(i, 0)[0], c = new n(32768), g = 0; g < 32768; ++g){\n            var h = (43690 & g) >>> 1 | (21845 & g) << 1;\n            h = (61680 & (h = (52428 & h) >>> 2 | (13107 & h) << 2)) >>> 4 | (3855 & h) << 4, c[g] = ((65280 & h) >>> 8 | (255 & h) << 8) >>> 1;\n        }\n        var w = function(r, e, t) {\n            for(var a = r.length, i = 0, o = new n(e); i < a; ++i)++o[r[i] - 1];\n            var f, u = new n(e);\n            for(i = 0; i < e; ++i)u[i] = u[i - 1] + o[i - 1] << 1;\n            if (t) {\n                f = new n(1 << e);\n                var v = 15 - e;\n                for(i = 0; i < a; ++i)if (r[i]) for(var s = i << 4 | r[i], l = e - r[i], g = u[r[i] - 1]++ << l, h = g | (1 << l) - 1; g <= h; ++g)f[c[g] >>> v] = s;\n            } else for(f = new n(a), i = 0; i < a; ++i)r[i] && (f[i] = c[u[r[i] - 1]++] >>> 15 - r[i]);\n            return f;\n        }, d = new e(288);\n        for(g = 0; g < 144; ++g)d[g] = 8;\n        for(g = 144; g < 256; ++g)d[g] = 9;\n        for(g = 256; g < 280; ++g)d[g] = 7;\n        for(g = 280; g < 288; ++g)d[g] = 8;\n        var m = new e(32);\n        for(g = 0; g < 32; ++g)m[g] = 5;\n        var b = w(d, 9, 1), p = w(m, 5, 1), y = function(r) {\n            for(var e = r[0], n = 1; n < r.length; ++n)r[n] > e && (e = r[n]);\n            return e;\n        }, L = function(r, e, n) {\n            var t = e / 8 | 0;\n            return (r[t] | r[t + 1] << 8) >> (7 & e) & n;\n        }, U = function(r, e) {\n            var n = e / 8 | 0;\n            return (r[n] | r[n + 1] << 8 | r[n + 2] << 16) >> (7 & e);\n        }, k = [\n            \"unexpected EOF\",\n            \"invalid block type\",\n            \"invalid length/literal\",\n            \"invalid distance\",\n            \"stream finished\",\n            \"no stream handler\",\n            ,\n            \"no callback\",\n            \"invalid UTF-8 data\",\n            \"extra field too long\",\n            \"date not in range 1980-2099\",\n            \"filename too long\",\n            \"stream finishing\",\n            \"invalid zip data\"\n        ], T = function(r, e, n) {\n            var t = new Error(e || k[r]);\n            if (t.code = r, Error.captureStackTrace && Error.captureStackTrace(t, T), !n) throw t;\n            return t;\n        }, O = function(r, f, u) {\n            var s = r.length;\n            if (!s || u && !u.l && s < 5) return f || new e(0);\n            var c = !f || u, g = !u || u.i;\n            u || (u = {}), f || (f = new e(3 * s));\n            var h, d = function(r) {\n                var n = f.length;\n                if (r > n) {\n                    var t = new e(Math.max(2 * n, r));\n                    t.set(f), f = t;\n                }\n            }, m = u.f || 0, k = u.p || 0, O = u.b || 0, A = u.l, x = u.d, E = u.m, D = u.n, M = 8 * s;\n            do {\n                if (!A) {\n                    u.f = m = L(r, k, 1);\n                    var S = L(r, k + 1, 3);\n                    if (k += 3, !S) {\n                        var V = r[(I = ((h = k) / 8 | 0) + (7 & h && 1) + 4) - 4] | r[I - 3] << 8, _ = I + V;\n                        if (_ > s) {\n                            g && T(0);\n                            break;\n                        }\n                        c && d(O + V), f.set(r.subarray(I, _), O), u.b = O += V, u.p = k = 8 * _;\n                        continue;\n                    }\n                    if (1 == S) A = b, x = p, E = 9, D = 5;\n                    else if (2 == S) {\n                        var j = L(r, k, 31) + 257, z = L(r, k + 10, 15) + 4, C = j + L(r, k + 5, 31) + 1;\n                        k += 14;\n                        for(var F = new e(C), P = new e(19), q = 0; q < z; ++q)P[o[q]] = L(r, k + 3 * q, 7);\n                        k += 3 * z;\n                        var B = y(P), G = (1 << B) - 1, H = w(P, B, 1);\n                        for(q = 0; q < C;){\n                            var I, J = H[L(r, k, G)];\n                            if (k += 15 & J, (I = J >>> 4) < 16) F[q++] = I;\n                            else {\n                                var K = 0, N = 0;\n                                for(16 == I ? (N = 3 + L(r, k, 3), k += 2, K = F[q - 1]) : 17 == I ? (N = 3 + L(r, k, 7), k += 3) : 18 == I && (N = 11 + L(r, k, 127), k += 7); N--;)F[q++] = K;\n                            }\n                        }\n                        var Q = F.subarray(0, j), R = F.subarray(j);\n                        E = y(Q), D = y(R), A = w(Q, E, 1), x = w(R, D, 1);\n                    } else T(1);\n                    if (k > M) {\n                        g && T(0);\n                        break;\n                    }\n                }\n                c && d(O + 131072);\n                for(var W = (1 << E) - 1, X = (1 << D) - 1, Y = k;; Y = k){\n                    var Z = (K = A[U(r, k) & W]) >>> 4;\n                    if ((k += 15 & K) > M) {\n                        g && T(0);\n                        break;\n                    }\n                    if (K || T(2), Z < 256) f[O++] = Z;\n                    else {\n                        if (256 == Z) {\n                            Y = k, A = null;\n                            break;\n                        }\n                        var $ = Z - 254;\n                        if (Z > 264) {\n                            var rr = a[q = Z - 257];\n                            $ = L(r, k, (1 << rr) - 1) + v[q], k += rr;\n                        }\n                        var er = x[U(r, k) & X], nr = er >>> 4;\n                        er || T(3), k += 15 & er;\n                        R = l[nr];\n                        if (nr > 3) {\n                            rr = i[nr];\n                            R += U(r, k) & (1 << rr) - 1, k += rr;\n                        }\n                        if (k > M) {\n                            g && T(0);\n                            break;\n                        }\n                        c && d(O + 131072);\n                        for(var tr = O + $; O < tr; O += 4)f[O] = f[O - R], f[O + 1] = f[O + 1 - R], f[O + 2] = f[O + 2 - R], f[O + 3] = f[O + 3 - R];\n                        O = tr;\n                    }\n                }\n                u.l = A, u.p = Y, u.b = O, A && (m = 1, u.m = E, u.d = x, u.n = D);\n            }while (!m);\n            return O == f.length ? f : function(r, a, i) {\n                (null == a || a < 0) && (a = 0), (null == i || i > r.length) && (i = r.length);\n                var o = new (r instanceof n ? n : r instanceof t ? t : e)(i - a);\n                return o.set(r.subarray(a, i)), o;\n            }(f, 0, O);\n        }, A = new e(0);\n        var x = \"undefined\" != typeof TextDecoder && new TextDecoder;\n        try {\n            x.decode(A, {\n                stream: !0\n            }), 1;\n        } catch (r) {}\n        return r.convert_streams = function(r) {\n            var e = new DataView(r), n = 0;\n            function t() {\n                var r = e.getUint16(n);\n                return n += 2, r;\n            }\n            function a() {\n                var r = e.getUint32(n);\n                return n += 4, r;\n            }\n            function i(r) {\n                m.setUint16(b, r), b += 2;\n            }\n            function o(r) {\n                m.setUint32(b, r), b += 4;\n            }\n            for(var f = {\n                signature: a(),\n                flavor: a(),\n                length: a(),\n                numTables: t(),\n                reserved: t(),\n                totalSfntSize: a(),\n                majorVersion: t(),\n                minorVersion: t(),\n                metaOffset: a(),\n                metaLength: a(),\n                metaOrigLength: a(),\n                privOffset: a(),\n                privLength: a()\n            }, u = 0; Math.pow(2, u) <= f.numTables;)u++;\n            u--;\n            for(var v = 16 * Math.pow(2, u), s = 16 * f.numTables - v, l = 12, c = [], g = 0; g < f.numTables; g++)c.push({\n                tag: a(),\n                offset: a(),\n                compLength: a(),\n                origLength: a(),\n                origChecksum: a()\n            }), l += 16;\n            var h, w = new Uint8Array(12 + 16 * c.length + c.reduce(function(r, e) {\n                return r + e.origLength + 4;\n            }, 0)), d = w.buffer, m = new DataView(d), b = 0;\n            return o(f.flavor), i(f.numTables), i(v), i(u), i(s), c.forEach(function(r) {\n                o(r.tag), o(r.origChecksum), o(l), o(r.origLength), r.outOffset = l, (l += r.origLength) % 4 != 0 && (l += 4 - l % 4);\n            }), c.forEach(function(e) {\n                var n, t = r.slice(e.offset, e.offset + e.compLength);\n                if (e.compLength != e.origLength) {\n                    var a = new Uint8Array(e.origLength);\n                    n = new Uint8Array(t, 2), O(n, a);\n                } else a = new Uint8Array(t);\n                w.set(a, e.outOffset);\n                var i = 0;\n                (l = e.outOffset + e.origLength) % 4 != 0 && (i = 4 - l % 4), w.set(new Uint8Array(i).buffer, e.outOffset + e.origLength), h = l + i;\n            }), d.slice(0, h);\n        }, Object.defineProperty(r, \"__esModule\", {\n            value: !0\n        }), r;\n    }({}).convert_streams;\n}\n/**\n * A factory wrapper parsing a font file using Typr.\n * Also adds support for WOFF files (not WOFF2).\n */ function parserFactory(Typr, woff2otf) {\n    const cmdArgLengths = {\n        M: 2,\n        L: 2,\n        Q: 4,\n        C: 6,\n        Z: 0\n    };\n    // {joinType: \"skip+step,...\"}\n    const joiningTypeRawData = {\n        \"C\": \"18g,ca,368,1kz\",\n        \"D\": \"17k,6,2,2+4,5+c,2+6,2+1,10+1,9+f,j+11,2+1,a,2,2+1,15+2,3,j+2,6+3,2+8,2,2,2+1,w+a,4+e,3+3,2,3+2,3+5,23+w,2f+4,3,2+9,2,b,2+3,3,1k+9,6+1,3+1,2+2,2+d,30g,p+y,1,1+1g,f+x,2,sd2+1d,jf3+4,f+3,2+4,2+2,b+3,42,2,4+2,2+1,2,3,t+1,9f+w,2,el+2,2+g,d+2,2l,2+1,5,3+1,2+1,2,3,6,16wm+1v\",\n        \"R\": \"17m+3,2,2,6+3,m,15+2,2+2,h+h,13,3+8,2,2,3+1,2,p+1,x,5+4,5,a,2,2,3,u,c+2,g+1,5,2+1,4+1,5j,6+1,2,b,2+2,f,2+1,1s+2,2,3+1,7,1ez0,2,2+1,4+4,b,4,3,b,42,2+2,4,3,2+1,2,o+3,ae,ep,x,2o+2,3+1,3,5+1,6\",\n        \"L\": \"x9u,jff,a,fd,jv\",\n        \"T\": \"4t,gj+33,7o+4,1+1,7c+18,2,2+1,2+1,2,21+a,2,1b+k,h,2u+6,3+5,3+1,2+3,y,2,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,3,7,6+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+d,1,1+1,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,ek,3+1,r+4,1e+4,6+5,2p+c,1+3,1,1+2,1+b,2db+2,3y,2p+v,ff+3,30+1,n9x,1+2,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,5s,6y+2,ea,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+9,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2,2b+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,470+8,at4+4,1o+6,t5,1s+3,2a,f5l+1,2+3,43o+2,a+7,1+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,1,gzau,v+2n,3l+6n\"\n    };\n    const JT_LEFT = 1, JT_RIGHT = 2, JT_DUAL = 4, JT_TRANSPARENT = 8, JT_JOIN_CAUSING = 16, JT_NON_JOINING = 32; //indicates that a character does not join with the preceding or with the subsequent character.,\n    let joiningTypeMap;\n    function getCharJoiningType(ch) {\n        if (!joiningTypeMap) {\n            const m = {\n                R: JT_RIGHT,\n                L: JT_LEFT,\n                D: JT_DUAL,\n                C: JT_JOIN_CAUSING,\n                U: JT_NON_JOINING,\n                T: JT_TRANSPARENT\n            };\n            joiningTypeMap = new Map();\n            for(let type in joiningTypeRawData){\n                let lastCode = 0;\n                joiningTypeRawData[type].split(\",\").forEach((range)=>{\n                    let [skip, step] = range.split(\"+\");\n                    skip = parseInt(skip, 36);\n                    step = step ? parseInt(step, 36) : 0;\n                    joiningTypeMap.set(lastCode += skip, m[type]);\n                    for(let i = step; i--;){\n                        joiningTypeMap.set(++lastCode, m[type]);\n                    }\n                });\n            }\n        }\n        return joiningTypeMap.get(ch) || JT_NON_JOINING;\n    }\n    const ISOL = 1, INIT = 2, FINA = 3, MEDI = 4;\n    const formsToFeatures = [\n        null,\n        \"isol\",\n        \"init\",\n        \"fina\",\n        \"medi\"\n    ];\n    function detectJoiningForms(str) {\n        // This implements the algorithm described here:\n        // https://github.com/n8willis/opentype-shaping-documents/blob/master/opentype-shaping-arabic-general.md\n        const joiningForms = new Uint8Array(str.length);\n        let prevJoiningType = JT_NON_JOINING;\n        let prevForm = ISOL;\n        let prevIndex = -1;\n        for(let i = 0; i < str.length; i++){\n            const code = str.codePointAt(i);\n            let joiningType = getCharJoiningType(code) | 0;\n            let form = ISOL;\n            if (joiningType & JT_TRANSPARENT) {\n                continue;\n            }\n            if (prevJoiningType & (JT_LEFT | JT_DUAL | JT_JOIN_CAUSING)) {\n                if (joiningType & (JT_RIGHT | JT_DUAL | JT_JOIN_CAUSING)) {\n                    form = FINA;\n                    // isol->init, fina->medi\n                    if (prevForm === ISOL || prevForm === FINA) {\n                        joiningForms[prevIndex]++;\n                    }\n                } else if (joiningType & (JT_LEFT | JT_NON_JOINING)) {\n                    // medi->fina, init->isol\n                    if (prevForm === INIT || prevForm === MEDI) {\n                        joiningForms[prevIndex]--;\n                    }\n                }\n            } else if (prevJoiningType & (JT_RIGHT | JT_NON_JOINING)) {\n                // medi->fina, init->isol\n                if (prevForm === INIT || prevForm === MEDI) {\n                    joiningForms[prevIndex]--;\n                }\n            }\n            prevForm = joiningForms[i] = form;\n            prevJoiningType = joiningType;\n            prevIndex = i;\n            if (code > 0xffff) i++;\n        }\n        // console.log(str.split('').map(ch => ch.codePointAt(0).toString(16)))\n        // console.log(str.split('').map(ch => getCharJoiningType(ch.codePointAt(0))))\n        // console.log(Array.from(joiningForms).map(f => formsToFeatures[f] || 'none'))\n        return joiningForms;\n    }\n    function stringToGlyphs(font, str) {\n        const glyphIds = [];\n        for(let i = 0; i < str.length; i++){\n            const cc = str.codePointAt(i);\n            if (cc > 0xffff) i++;\n            glyphIds.push(Typr.U.codeToGlyph(font, cc));\n        }\n        const gsub = font[\"GSUB\"];\n        if (gsub) {\n            const { lookupList, featureList } = gsub;\n            let joiningForms;\n            const supportedFeatures = /^(rlig|liga|mset|isol|init|fina|medi|half|pres|blws)$/;\n            const usedLookups = [];\n            featureList.forEach((feature)=>{\n                if (supportedFeatures.test(feature.tag)) {\n                    for(let ti = 0; ti < feature.tab.length; ti++){\n                        if (usedLookups[feature.tab[ti]]) continue;\n                        usedLookups[feature.tab[ti]] = true;\n                        const tab = lookupList[feature.tab[ti]];\n                        const isJoiningFeature = /^(isol|init|fina|medi)$/.test(feature.tag);\n                        if (isJoiningFeature && !joiningForms) {\n                            joiningForms = detectJoiningForms(str);\n                        }\n                        for(let ci = 0; ci < glyphIds.length; ci++){\n                            if (!joiningForms || !isJoiningFeature || formsToFeatures[joiningForms[ci]] === feature.tag) {\n                                Typr.U._applySubs(glyphIds, ci, tab, lookupList);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        return glyphIds;\n    }\n    function firstNum(...args) {\n        for(let i = 0; i < args.length; i++){\n            if (typeof args[i] === \"number\") {\n                return args[i];\n            }\n        }\n    }\n    function wrapFontObj(typrFont) {\n        const glyphMap = Object.create(null);\n        const os2 = typrFont[\"OS/2\"];\n        const hhea = typrFont.hhea;\n        const unitsPerEm = typrFont.head.unitsPerEm;\n        const ascender = firstNum(os2 && os2.sTypoAscender, hhea && hhea.ascender, unitsPerEm);\n        const fontObj = {\n            unitsPerEm,\n            ascender,\n            descender: firstNum(os2 && os2.sTypoDescender, hhea && hhea.descender, 0),\n            capHeight: firstNum(os2 && os2.sCapHeight, ascender),\n            xHeight: firstNum(os2 && os2.sxHeight, ascender),\n            lineGap: firstNum(os2 && os2.sTypoLineGap, hhea && hhea.lineGap),\n            forEachGlyph (text, fontSize, letterSpacing, callback) {\n                let glyphX = 0;\n                const fontScale = 1 / fontObj.unitsPerEm * fontSize;\n                const glyphIndices = stringToGlyphs(typrFont, text);\n                let charIndex = 0;\n                let prevGlyphIndex = -1;\n                glyphIndices.forEach((glyphIndex, i)=>{\n                    // Typr returns a glyph index per string codepoint, with -1s in place of those that\n                    // were omitted due to ligature substitution. So we can track original index in the\n                    // string via simple increment, and skip everything else when seeing a -1.\n                    if (glyphIndex !== -1) {\n                        let glyphObj = glyphMap[glyphIndex];\n                        if (!glyphObj) {\n                            const { cmds, crds } = Typr.U.glyphToPath(typrFont, glyphIndex);\n                            // Build path string\n                            let path = \"\";\n                            let crdsIdx = 0;\n                            for(let i = 0, len = cmds.length; i < len; i++){\n                                const numArgs = cmdArgLengths[cmds[i]];\n                                path += cmds[i];\n                                for(let j = 1; j <= numArgs; j++){\n                                    path += (j > 1 ? \",\" : \"\") + crds[crdsIdx++];\n                                }\n                            }\n                            // Find extents - Glyf gives this in metadata but not CFF, and Typr doesn't\n                            // normalize the two, so it's simplest just to iterate ourselves.\n                            let xMin, yMin, xMax, yMax;\n                            if (crds.length) {\n                                xMin = yMin = Infinity;\n                                xMax = yMax = -Infinity;\n                                for(let i = 0, len = crds.length; i < len; i += 2){\n                                    let x = crds[i];\n                                    let y = crds[i + 1];\n                                    if (x < xMin) xMin = x;\n                                    if (y < yMin) yMin = y;\n                                    if (x > xMax) xMax = x;\n                                    if (y > yMax) yMax = y;\n                                }\n                            } else {\n                                xMin = xMax = yMin = yMax = 0;\n                            }\n                            glyphObj = glyphMap[glyphIndex] = {\n                                index: glyphIndex,\n                                advanceWidth: typrFont.hmtx.aWidth[glyphIndex],\n                                xMin,\n                                yMin,\n                                xMax,\n                                yMax,\n                                path,\n                                pathCommandCount: cmds.length\n                            };\n                        }\n                        // Kerning\n                        if (prevGlyphIndex !== -1) {\n                            glyphX += Typr.U.getPairAdjustment(typrFont, prevGlyphIndex, glyphIndex) * fontScale;\n                        }\n                        callback.call(null, glyphObj, glyphX, charIndex);\n                        if (glyphObj.advanceWidth) {\n                            glyphX += glyphObj.advanceWidth * fontScale;\n                        }\n                        if (letterSpacing) {\n                            glyphX += letterSpacing * fontSize;\n                        }\n                        prevGlyphIndex = glyphIndex;\n                    }\n                    charIndex += text.codePointAt(charIndex) > 0xffff ? 2 : 1;\n                });\n                return glyphX;\n            }\n        };\n        return fontObj;\n    }\n    return function parse(buffer) {\n        // Look to see if we have a WOFF file and convert it if so:\n        const peek = new Uint8Array(buffer, 0, 4);\n        const tag = Typr._bin.readASCII(peek, 0, 4);\n        if (tag === \"wOFF\") {\n            buffer = woff2otf(buffer);\n        } else if (tag === \"wOF2\") {\n            throw new Error(\"woff2 fonts not supported\");\n        }\n        return wrapFontObj(Typr.parse(buffer)[0]);\n    };\n}\nconst workerModule = /*#__PURE__*/ (0,troika_worker_utils__WEBPACK_IMPORTED_MODULE_2__.defineWorkerModule)({\n    name: \"Typr Font Parser\",\n    dependencies: [\n        typrFactory,\n        woff2otfFactory,\n        parserFactory\n    ],\n    init (typrFactory, woff2otfFactory, parserFactory) {\n        const Typr = typrFactory();\n        const woff2otf = woff2otfFactory();\n        return parserFactory(Typr, woff2otf);\n    }\n});\nconst CONFIG = {\n    defaultFontURL: \"https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff\",\n    sdfGlyphSize: 64,\n    sdfMargin: 1 / 16,\n    sdfExponent: 9,\n    textureWidth: 2048\n};\nconst tempColor = /*#__PURE__*/ new three__WEBPACK_IMPORTED_MODULE_3__.Color();\nlet hasRequested = false;\nfunction now$1() {\n    return (self.performance || Date).now();\n}\n/**\n * Customizes the text builder configuration. This must be called prior to the first font processing\n * request, and applies to all fonts.\n *\n * @param {String} config.defaultFontURL - The URL of the default font to use for text processing\n *                 requests, in case none is specified or the specifiede font fails to load or parse.\n *                 Defaults to \"Roboto Regular\" from Google Fonts.\n * @param {Number} config.sdfGlyphSize - The default size of each glyph's SDF (signed distance field)\n *                 texture used for rendering. Must be a power-of-two number, and applies to all fonts,\n *                 but note that this can also be overridden per call to `getTextRenderInfo()`.\n *                 Larger sizes can improve the quality of glyph rendering by increasing the sharpness\n *                 of corners and preventing loss of very thin lines, at the expense of memory. Defaults\n *                 to 64 which is generally a good balance of size and quality.\n * @param {Number} config.sdfExponent - The exponent used when encoding the SDF values. A higher exponent\n *                 shifts the encoded 8-bit values to achieve higher precision/accuracy at texels nearer\n *                 the glyph's path, with lower precision further away. Defaults to 9.\n * @param {Number} config.sdfMargin - How much space to reserve in the SDF as margin outside the glyph's\n *                 path, as a percentage of the SDF width. A larger margin increases the quality of\n *                 extruded glyph outlines, but decreases the precision available for the glyph itself.\n *                 Defaults to 1/16th of the glyph size.\n * @param {Number} config.textureWidth - The width of the SDF texture; must be a power of 2. Defaults to\n *                 2048 which is a safe maximum texture dimension according to the stats at\n *                 https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE and should allow for a\n *                 reasonably large number of glyphs (default glyph size of 64^2 and safe texture size of\n *                 2048^2, times 4 channels, allows for 4096 glyphs.) This can be increased if you need to\n *                 increase the glyph size and/or have an extraordinary number of glyphs.\n */ function configureTextBuilder(config) {\n    if (hasRequested) {\n        console.warn(\"configureTextBuilder called after first font request; will be ignored.\");\n    } else {\n        assign(CONFIG, config);\n    }\n}\n/**\n * Repository for all font SDF atlas textures and their glyph mappings. There is a separate atlas for\n * each sdfGlyphSize. Each atlas has a single Texture that holds all glyphs for all fonts.\n *\n *   {\n *     [sdfGlyphSize]: {\n *       glyphCount: number,\n *       sdfGlyphSize: number,\n *       sdfTexture: Texture,\n *       sdfCanvas: HTMLCanvasElement,\n *       contextLost: boolean,\n *       glyphsByFont: Map<fontURL, Map<glyphID, {path, atlasIndex, sdfViewBox}>>\n *     }\n *   }\n */ const atlases = Object.create(null);\n/**\n * @typedef {object} TroikaTextRenderInfo - Format of the result from `getTextRenderInfo`.\n * @property {object} parameters - The normalized input arguments to the render call.\n * @property {Texture} sdfTexture - The SDF atlas texture.\n * @property {number} sdfGlyphSize - The size of each glyph's SDF; see `configureTextBuilder`.\n * @property {number} sdfExponent - The exponent used in encoding the SDF's values; see `configureTextBuilder`.\n * @property {Float32Array} glyphBounds - List of [minX, minY, maxX, maxY] quad bounds for each glyph.\n * @property {Float32Array} glyphAtlasIndices - List holding each glyph's index in the SDF atlas.\n * @property {Uint8Array} [glyphColors] - List holding each glyph's [r, g, b] color, if `colorRanges` was supplied.\n * @property {Float32Array} [caretPositions] - A list of caret positions for all characters in the string; each is\n *           three elements: the starting X, the ending X, and the bottom Y for the caret.\n * @property {number} [caretHeight] - An appropriate height for all selection carets.\n * @property {number} ascender - The font's ascender metric.\n * @property {number} descender - The font's descender metric.\n * @property {number} capHeight - The font's cap height metric, based on the height of Latin capital letters.\n * @property {number} xHeight - The font's x height metric, based on the height of Latin lowercase letters.\n * @property {number} lineHeight - The final computed lineHeight measurement.\n * @property {number} topBaseline - The y position of the top line's baseline.\n * @property {Array<number>} blockBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;\n *           this can include extra vertical space beyond the visible glyphs due to lineHeight, and is\n *           equivalent to the dimensions of a block-level text element in CSS.\n * @property {Array<number>} visibleBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;\n *           unlike `blockBounds` this is tightly wrapped to the visible glyph paths.\n * @property {Array<object>} chunkedBounds - List of bounding rects for each consecutive set of N glyphs,\n *           in the format `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`.\n * @property {object} timings - Timing info for various parts of the rendering logic including SDF\n *           generation, typesetting, etc.\n * @frozen\n */ /**\n * @callback getTextRenderInfo~callback\n * @param {TroikaTextRenderInfo} textRenderInfo\n */ /**\n * Main entry point for requesting the data needed to render a text string with given font parameters.\n * This is an asynchronous call, performing most of the logic in a web worker thread.\n * @param {object} args\n * @param {getTextRenderInfo~callback} callback\n */ function getTextRenderInfo(args, callback) {\n    hasRequested = true;\n    args = assign({}, args);\n    const totalStart = now$1();\n    // Apply default font here to avoid a 'null' atlas, and convert relative\n    // URLs to absolute so they can be resolved in the worker\n    args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL);\n    // Normalize text to a string\n    args.text = \"\" + args.text;\n    args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;\n    // Normalize colors\n    if (args.colorRanges != null) {\n        let colors = {};\n        for(let key in args.colorRanges){\n            if (args.colorRanges.hasOwnProperty(key)) {\n                let val = args.colorRanges[key];\n                if (typeof val !== \"number\") {\n                    val = tempColor.set(val).getHex();\n                }\n                colors[key] = val;\n            }\n        }\n        args.colorRanges = colors;\n    }\n    Object.freeze(args);\n    // Init the atlas if needed\n    const { textureWidth, sdfExponent } = CONFIG;\n    const { sdfGlyphSize } = args;\n    const glyphsPerRow = textureWidth / sdfGlyphSize * 4;\n    let atlas = atlases[sdfGlyphSize];\n    if (!atlas) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = textureWidth;\n        canvas.height = sdfGlyphSize * 256 / glyphsPerRow; // start tall enough to fit 256 glyphs\n        atlas = atlases[sdfGlyphSize] = {\n            glyphCount: 0,\n            sdfGlyphSize,\n            sdfCanvas: canvas,\n            sdfTexture: new three__WEBPACK_IMPORTED_MODULE_3__.Texture(canvas, undefined, undefined, undefined, three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter, three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter),\n            contextLost: false,\n            glyphsByFont: new Map()\n        };\n        atlas.sdfTexture.generateMipmaps = false;\n        initContextLossHandling(atlas);\n    }\n    const { sdfTexture, sdfCanvas } = atlas;\n    let fontGlyphs = atlas.glyphsByFont.get(args.font);\n    if (!fontGlyphs) {\n        atlas.glyphsByFont.set(args.font, fontGlyphs = new Map());\n    }\n    // Issue request to the typesetting engine in the worker\n    typesetInWorker(args).then((result)=>{\n        const { glyphIds, glyphPositions, fontSize, unitsPerEm, timings } = result;\n        const neededSDFs = [];\n        const glyphBounds = new Float32Array(glyphIds.length * 4);\n        const fontSizeMult = fontSize / unitsPerEm;\n        let boundsIdx = 0;\n        let positionsIdx = 0;\n        const quadsStart = now$1();\n        glyphIds.forEach((glyphId, i)=>{\n            let glyphInfo = fontGlyphs.get(glyphId);\n            // If this is a glyphId not seen before, add it to the atlas\n            if (!glyphInfo) {\n                const { path, pathBounds } = result.glyphData[glyphId];\n                // Margin around path edges in SDF, based on a percentage of the glyph's max dimension.\n                // Note we add an extra 0.5 px over the configured value because the outer 0.5 doesn't contain\n                // useful interpolated values and will be ignored anyway.\n                const fontUnitsMargin = Math.max(pathBounds[2] - pathBounds[0], pathBounds[3] - pathBounds[1]) / sdfGlyphSize * (CONFIG.sdfMargin * sdfGlyphSize + 0.5);\n                const atlasIndex = atlas.glyphCount++;\n                const sdfViewBox = [\n                    pathBounds[0] - fontUnitsMargin,\n                    pathBounds[1] - fontUnitsMargin,\n                    pathBounds[2] + fontUnitsMargin,\n                    pathBounds[3] + fontUnitsMargin\n                ];\n                fontGlyphs.set(glyphId, glyphInfo = {\n                    path,\n                    atlasIndex,\n                    sdfViewBox\n                });\n                // Collect those that need SDF generation\n                neededSDFs.push(glyphInfo);\n            }\n            // Calculate bounds for renderable quads\n            // TODO can we get this back off the main thread?\n            const { sdfViewBox } = glyphInfo;\n            const posX = glyphPositions[positionsIdx++];\n            const posY = glyphPositions[positionsIdx++];\n            glyphBounds[boundsIdx++] = posX + sdfViewBox[0] * fontSizeMult;\n            glyphBounds[boundsIdx++] = posY + sdfViewBox[1] * fontSizeMult;\n            glyphBounds[boundsIdx++] = posX + sdfViewBox[2] * fontSizeMult;\n            glyphBounds[boundsIdx++] = posY + sdfViewBox[3] * fontSizeMult;\n            // Convert glyphId to SDF index for the shader\n            glyphIds[i] = glyphInfo.atlasIndex;\n        });\n        timings.quads = (timings.quads || 0) + (now$1() - quadsStart);\n        const sdfStart = now$1();\n        timings.sdf = {};\n        // Grow the texture height by power of 2 if needed\n        const currentHeight = sdfCanvas.height;\n        const neededRows = Math.ceil(atlas.glyphCount / glyphsPerRow);\n        const neededHeight = Math.pow(2, Math.ceil(Math.log2(neededRows * sdfGlyphSize)));\n        if (neededHeight > currentHeight) {\n            // Since resizing the canvas clears its render buffer, it needs special handling to copy the old contents over\n            console.info(`Increasing SDF texture size ${currentHeight}->${neededHeight}`);\n            resizeWebGLCanvasWithoutClearing(sdfCanvas, textureWidth, neededHeight);\n            // As of Three r136 textures cannot be resized once they're allocated on the GPU, we must dispose to reallocate it\n            sdfTexture.dispose();\n        }\n        Promise.all(neededSDFs.map((glyphInfo)=>generateGlyphSDF(glyphInfo, atlas, args.gpuAccelerateSDF).then(({ timing })=>{\n                timings.sdf[glyphInfo.atlasIndex] = timing;\n            }))).then(()=>{\n            if (neededSDFs.length && !atlas.contextLost) {\n                safariPre15Workaround(atlas);\n                sdfTexture.needsUpdate = true;\n            }\n            timings.sdfTotal = now$1() - sdfStart;\n            timings.total = now$1() - totalStart;\n            // console.log(`SDF - ${timings.sdfTotal}, Total - ${timings.total - timings.fontLoad}`)\n            // Invoke callback with the text layout arrays and updated texture\n            callback(Object.freeze({\n                parameters: args,\n                sdfTexture,\n                sdfGlyphSize,\n                sdfExponent,\n                glyphBounds,\n                glyphAtlasIndices: glyphIds,\n                glyphColors: result.glyphColors,\n                caretPositions: result.caretPositions,\n                caretHeight: result.caretHeight,\n                chunkedBounds: result.chunkedBounds,\n                ascender: result.ascender,\n                descender: result.descender,\n                lineHeight: result.lineHeight,\n                capHeight: result.capHeight,\n                xHeight: result.xHeight,\n                topBaseline: result.topBaseline,\n                blockBounds: result.blockBounds,\n                visibleBounds: result.visibleBounds,\n                timings: result.timings\n            }));\n        });\n    });\n    // While the typesetting request is being handled, go ahead and make sure the atlas canvas context is\n    // \"warmed up\"; the first request will be the longest due to shader program compilation so this gets\n    // a head start on that process before SDFs actually start getting processed.\n    Promise.resolve().then(()=>{\n        if (!atlas.contextLost) {\n            warmUpSDFCanvas(sdfCanvas);\n        }\n    });\n}\nfunction generateGlyphSDF({ path, atlasIndex, sdfViewBox }, { sdfGlyphSize, sdfCanvas, contextLost }, useGPU) {\n    if (contextLost) {\n        // If the context is lost there's nothing we can do, just quit silently and let it\n        // get regenerated when the context is restored\n        return Promise.resolve({\n            timing: -1\n        });\n    }\n    const { textureWidth, sdfExponent } = CONFIG;\n    const maxDist = Math.max(sdfViewBox[2] - sdfViewBox[0], sdfViewBox[3] - sdfViewBox[1]);\n    const squareIndex = Math.floor(atlasIndex / 4);\n    const x = squareIndex % (textureWidth / sdfGlyphSize) * sdfGlyphSize;\n    const y = Math.floor(squareIndex / (textureWidth / sdfGlyphSize)) * sdfGlyphSize;\n    const channel = atlasIndex % 4;\n    return generateSDF(sdfGlyphSize, sdfGlyphSize, path, sdfViewBox, maxDist, sdfExponent, sdfCanvas, x, y, channel, useGPU);\n}\nfunction initContextLossHandling(atlas) {\n    const canvas = atlas.sdfCanvas;\n    /*\n  // Begin context loss simulation\n  if (!window.WebGLDebugUtils) {\n    let script = document.getElementById('WebGLDebugUtilsScript')\n    if (!script) {\n      script = document.createElement('script')\n      script.id = 'WebGLDebugUtils'\n      document.head.appendChild(script)\n      script.src = 'https://cdn.jsdelivr.net/gh/KhronosGroup/WebGLDeveloperTools@b42e702/src/debug/webgl-debug.js'\n    }\n    script.addEventListener('load', () => {\n      initContextLossHandling(atlas)\n    })\n    return\n  }\n  window.WebGLDebugUtils.makeLostContextSimulatingCanvas(canvas)\n  canvas.loseContextInNCalls(500)\n  canvas.addEventListener('webglcontextrestored', (event) => {\n    canvas.loseContextInNCalls(5000)\n  })\n  // End context loss simulation\n  */ canvas.addEventListener(\"webglcontextlost\", (event)=>{\n        console.log(\"Context Lost\", event);\n        event.preventDefault();\n        atlas.contextLost = true;\n    });\n    canvas.addEventListener(\"webglcontextrestored\", (event)=>{\n        console.log(\"Context Restored\", event);\n        atlas.contextLost = false;\n        // Regenerate all glyphs into the restored canvas:\n        const promises = [];\n        atlas.glyphsByFont.forEach((glyphMap)=>{\n            glyphMap.forEach((glyph)=>{\n                promises.push(generateGlyphSDF(glyph, atlas, true));\n            });\n        });\n        Promise.all(promises).then(()=>{\n            safariPre15Workaround(atlas);\n            atlas.sdfTexture.needsUpdate = true;\n        });\n    });\n}\n/**\n * Preload a given font and optionally pre-generate glyph SDFs for one or more character sequences.\n * This can be useful to avoid long pauses when first showing text in a scene, by preloading the\n * needed fonts and glyphs up front along with other assets.\n *\n * @param {object} options\n * @param {string} options.font - URL of the font file to preload. If not given, the default font will\n *        be loaded.\n * @param {string|string[]} options.characters - One or more character sequences for which to pre-\n *        generate glyph SDFs. Note that this will honor ligature substitution, so you may need\n *        to specify ligature sequences in addition to their individual characters to get all\n *        possible glyphs, e.g. `[\"t\", \"h\", \"th\"]` to get the \"t\" and \"h\" glyphs plus the \"th\" ligature.\n * @param {number} options.sdfGlyphSize - The size at which to prerender the SDF textures for the\n *        specified `characters`.\n * @param {function} callback - A function that will be called when the preloading is complete.\n */ function preloadFont({ font, characters, sdfGlyphSize }, callback) {\n    let text = Array.isArray(characters) ? characters.join(\"\\n\") : \"\" + characters;\n    getTextRenderInfo({\n        font,\n        sdfGlyphSize,\n        text\n    }, callback);\n}\n// Local assign impl so we don't have to import troika-core\nfunction assign(toObj, fromObj) {\n    for(let key in fromObj){\n        if (fromObj.hasOwnProperty(key)) {\n            toObj[key] = fromObj[key];\n        }\n    }\n    return toObj;\n}\n// Utility for making URLs absolute\nlet linkEl;\nfunction toAbsoluteURL(path) {\n    if (!linkEl) {\n        linkEl = typeof document === \"undefined\" ? {} : document.createElement(\"a\");\n    }\n    linkEl.href = path;\n    return linkEl.href;\n}\n/**\n * Safari < v15 seems unable to use the SDF webgl canvas as a texture. This applies a workaround\n * where it reads the pixels out of that canvas and uploads them as a data texture instead, at\n * a slight performance cost.\n */ function safariPre15Workaround(atlas) {\n    // Use createImageBitmap support as a proxy for Safari<15, all other mainstream browsers\n    // have supported it for a long while so any false positives should be minimal.\n    if (typeof createImageBitmap !== \"function\") {\n        console.info(\"Safari<15: applying SDF canvas workaround\");\n        const { sdfCanvas, sdfTexture } = atlas;\n        const { width, height } = sdfCanvas;\n        const gl = atlas.sdfCanvas.getContext(\"webgl\");\n        let pixels = sdfTexture.image.data;\n        if (!pixels || pixels.length !== width * height * 4) {\n            pixels = new Uint8Array(width * height * 4);\n            sdfTexture.image = {\n                width,\n                height,\n                data: pixels\n            };\n            sdfTexture.flipY = false;\n            sdfTexture.isDataTexture = true;\n        }\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    }\n}\nconst typesetterWorkerModule = /*#__PURE__*/ (0,troika_worker_utils__WEBPACK_IMPORTED_MODULE_2__.defineWorkerModule)({\n    name: \"Typesetter\",\n    dependencies: [\n        CONFIG,\n        workerModule,\n        createTypesetter,\n        bidi_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n    ],\n    init (config, fontParser, createTypesetter, bidiFactory) {\n        const { defaultFontURL } = config;\n        return createTypesetter(fontParser, bidiFactory(), {\n            defaultFontURL\n        });\n    }\n});\nconst typesetInWorker = /*#__PURE__*/ (0,troika_worker_utils__WEBPACK_IMPORTED_MODULE_2__.defineWorkerModule)({\n    name: \"Typesetter\",\n    dependencies: [\n        typesetterWorkerModule\n    ],\n    init (typesetter) {\n        return function(args) {\n            return new Promise((resolve)=>{\n                typesetter.typeset(args, resolve);\n            });\n        };\n    },\n    getTransferables (result) {\n        // Mark array buffers as transferable to avoid cloning during postMessage\n        const transferables = [\n            result.glyphPositions.buffer,\n            result.glyphIds.buffer\n        ];\n        if (result.caretPositions) {\n            transferables.push(result.caretPositions.buffer);\n        }\n        if (result.glyphColors) {\n            transferables.push(result.glyphColors.buffer);\n        }\n        return transferables;\n    }\n});\nfunction dumpSDFTextures() {\n    Object.keys(atlases).forEach((size)=>{\n        const canvas = atlases[size].sdfCanvas;\n        const { width, height } = canvas;\n        console.log(\"%c.\", `\n      background: url(${canvas.toDataURL()});\n      background-size: ${width}px ${height}px;\n      color: transparent;\n      font-size: 0;\n      line-height: ${height}px;\n      padding-left: ${width}px;\n    `);\n    });\n}\nconst templateGeometries = {};\nfunction getTemplateGeometry(detail) {\n    let geom = templateGeometries[detail];\n    if (!geom) {\n        // Geometry is two planes back-to-back, which will always be rendered FrontSide only but\n        // appear as DoubleSide by default. FrontSide/BackSide are emulated using drawRange.\n        // We do it this way to avoid the performance hit of two draw calls for DoubleSide materials\n        // introduced by Three.js in r130 - see https://github.com/mrdoob/three.js/pull/21967\n        const front = new three__WEBPACK_IMPORTED_MODULE_3__.PlaneGeometry(1, 1, detail, detail);\n        const back = front.clone();\n        const frontAttrs = front.attributes;\n        const backAttrs = back.attributes;\n        const combined = new three__WEBPACK_IMPORTED_MODULE_3__.BufferGeometry();\n        const vertCount = frontAttrs.uv.count;\n        for(let i = 0; i < vertCount; i++){\n            backAttrs.position.array[i * 3] *= -1; // flip position x\n            backAttrs.normal.array[i * 3 + 2] *= -1; // flip normal z\n        }\n        [\n            \"position\",\n            \"normal\",\n            \"uv\"\n        ].forEach((name)=>{\n            combined.setAttribute(name, new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute([\n                ...frontAttrs[name].array,\n                ...backAttrs[name].array\n            ], frontAttrs[name].itemSize));\n        });\n        combined.setIndex([\n            ...front.index.array,\n            ...back.index.array.map((n)=>n + vertCount)\n        ]);\n        combined.translate(0.5, 0.5, 0);\n        geom = templateGeometries[detail] = combined;\n    }\n    return geom;\n}\nconst glyphBoundsAttrName = \"aTroikaGlyphBounds\";\nconst glyphIndexAttrName = \"aTroikaGlyphIndex\";\nconst glyphColorAttrName = \"aTroikaGlyphColor\";\n/**\n@class GlyphsGeometry\n\nA specialized Geometry for rendering a set of text glyphs. Uses InstancedBufferGeometry to\nrender the glyphs using GPU instancing of a single quad, rather than constructing a whole\ngeometry with vertices, for much smaller attribute arraybuffers according to this math:\n\n  Where N = number of glyphs...\n\n  Instanced:\n  - position: 4 * 3\n  - index: 2 * 3\n  - normal: 4 * 3\n  - uv: 4 * 2\n  - glyph x/y bounds: N * 4\n  - glyph indices: N * 1\n  = 5N + 38\n\n  Non-instanced:\n  - position: N * 4 * 3\n  - index: N * 2 * 3\n  - normal: N * 4 * 3\n  - uv: N * 4 * 2\n  - glyph indices: N * 1\n  = 39N\n\nA downside of this is the rare-but-possible lack of the instanced arrays extension,\nwhich we could potentially work around with a fallback non-instanced implementation.\n\n*/ class GlyphsGeometry extends three__WEBPACK_IMPORTED_MODULE_3__.InstancedBufferGeometry {\n    constructor(){\n        super();\n        this.detail = 1;\n        this.curveRadius = 0;\n        // Define groups for rendering text outline as a separate pass; these will only\n        // be used when the `material` getter returns an array, i.e. outlineWidth > 0.\n        this.groups = [\n            {\n                start: 0,\n                count: Infinity,\n                materialIndex: 0\n            },\n            {\n                start: 0,\n                count: Infinity,\n                materialIndex: 1\n            }\n        ];\n        // Preallocate empty bounding objects\n        this.boundingSphere = new three__WEBPACK_IMPORTED_MODULE_3__.Sphere();\n        this.boundingBox = new three__WEBPACK_IMPORTED_MODULE_3__.Box3();\n    }\n    computeBoundingSphere() {\n    // No-op; we'll sync the boundingSphere proactively when needed.\n    }\n    computeBoundingBox() {\n    // No-op; we'll sync the boundingBox proactively when needed.\n    }\n    // Since our base geometry contains triangles for both front and back sides, we can emulate\n    // the \"side\" by restricting the draw range.\n    setSide(side) {\n        const verts = this.getIndex().count;\n        this.setDrawRange(side === three__WEBPACK_IMPORTED_MODULE_3__.BackSide ? verts / 2 : 0, side === three__WEBPACK_IMPORTED_MODULE_3__.DoubleSide ? verts : verts / 2);\n    }\n    set detail(detail) {\n        if (detail !== this._detail) {\n            this._detail = detail;\n            if (typeof detail !== \"number\" || detail < 1) {\n                detail = 1;\n            }\n            let tpl = getTemplateGeometry(detail);\n            [\n                \"position\",\n                \"normal\",\n                \"uv\"\n            ].forEach((attr)=>{\n                this.attributes[attr] = tpl.attributes[attr].clone();\n            });\n            this.setIndex(tpl.getIndex().clone());\n        }\n    }\n    get detail() {\n        return this._detail;\n    }\n    set curveRadius(r) {\n        if (r !== this._curveRadius) {\n            this._curveRadius = r;\n            this._updateBounds();\n        }\n    }\n    get curveRadius() {\n        return this._curveRadius;\n    }\n    /**\n   * Update the geometry for a new set of glyphs.\n   * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs\n   *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1\n   * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within\n   *        the SDF atlas texture.\n   * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs\n   * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N\n   *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be\n   *        used with `applyClipRect` to choose an optimized `instanceCount`.\n   * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.\n   */ updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {\n        // Update the instance attributes\n        updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);\n        updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);\n        updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);\n        this._blockBounds = blockBounds;\n        this._chunkedBounds = chunkedBounds;\n        this.instanceCount = glyphAtlasIndices.length;\n        this._updateBounds();\n    }\n    _updateBounds() {\n        const bounds = this._blockBounds;\n        if (bounds) {\n            const { curveRadius, boundingBox: bbox } = this;\n            if (curveRadius) {\n                const { PI, floor, min, max, sin, cos } = Math;\n                const halfPi = PI / 2;\n                const twoPi = PI * 2;\n                const absR = Math.abs(curveRadius);\n                const leftAngle = bounds[0] / absR;\n                const rightAngle = bounds[2] / absR;\n                const minX = floor((leftAngle + halfPi) / twoPi) !== floor((rightAngle + halfPi) / twoPi) ? -absR : min(sin(leftAngle) * absR, sin(rightAngle) * absR);\n                const maxX = floor((leftAngle - halfPi) / twoPi) !== floor((rightAngle - halfPi) / twoPi) ? absR : max(sin(leftAngle) * absR, sin(rightAngle) * absR);\n                const maxZ = floor((leftAngle + PI) / twoPi) !== floor((rightAngle + PI) / twoPi) ? absR * 2 : max(absR - cos(leftAngle) * absR, absR - cos(rightAngle) * absR);\n                bbox.min.set(minX, bounds[1], curveRadius < 0 ? -maxZ : 0);\n                bbox.max.set(maxX, bounds[3], curveRadius < 0 ? 0 : maxZ);\n            } else {\n                bbox.min.set(bounds[0], bounds[1], 0);\n                bbox.max.set(bounds[2], bounds[3], 0);\n            }\n            bbox.getBoundingSphere(this.boundingSphere);\n        }\n    }\n    /**\n   * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest\n   * `instanceCount` that will show all glyphs within the clipped view. This is an optimization\n   * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would\n   * be clipped anyway.\n   *\n   * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting\n   * offset, this optimization becomes less effective as the clipRect moves closer to the end of the\n   * text block. We could fix that by switching from instancing to a full geometry with a drawRange,\n   * but at the expense of much larger attribute buffers (see classdoc above.)\n   *\n   * @param {Vector4} clipRect\n   */ applyClipRect(clipRect) {\n        let count = this.getAttribute(glyphIndexAttrName).count;\n        let chunks = this._chunkedBounds;\n        if (chunks) {\n            for(let i = chunks.length; i--;){\n                count = chunks[i].end;\n                let rect = chunks[i].rect;\n                // note: both rects are l-b-r-t\n                if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {\n                    break;\n                }\n            }\n        }\n        this.instanceCount = count;\n    }\n}\nfunction updateBufferAttr(geom, attrName, newArray, itemSize) {\n    const attr = geom.getAttribute(attrName);\n    if (newArray) {\n        // If length isn't changing, just update the attribute's array data\n        if (attr && attr.array.length === newArray.length) {\n            attr.array.set(newArray);\n            attr.needsUpdate = true;\n        } else {\n            geom.setAttribute(attrName, new three__WEBPACK_IMPORTED_MODULE_3__.InstancedBufferAttribute(newArray, itemSize));\n            // If the new attribute has a different size, we also have to (as of r117) manually clear the\n            // internal cached max instance count. See https://github.com/mrdoob/three.js/issues/19706\n            // It's unclear if this is a threejs bug or a truly unsupported scenario; discussion in\n            // that ticket is ambiguous as to whether replacing a BufferAttribute with one of a\n            // different size is supported, but https://github.com/mrdoob/three.js/pull/17418 strongly\n            // implies it should be supported. It's possible we need to\n            delete geom._maxInstanceCount; //for r117+, could be fragile\n            geom.dispose(); //for r118+, more robust feeling, but more heavy-handed than I'd like\n        }\n    } else if (attr) {\n        geom.deleteAttribute(attrName);\n    }\n}\n// language=GLSL\nconst VERTEX_DEFS = `\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform vec4 uTroikaTotalBounds;\nuniform vec4 uTroikaClipRect;\nuniform mat3 uTroikaOrient;\nuniform bool uTroikaUseGlyphColors;\nuniform float uTroikaDistanceOffset;\nuniform float uTroikaBlurRadius;\nuniform vec2 uTroikaPositionOffset;\nuniform float uTroikaCurveRadius;\nattribute vec4 aTroikaGlyphBounds;\nattribute float aTroikaGlyphIndex;\nattribute vec3 aTroikaGlyphColor;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying float vTroikaTextureChannel;\nvarying vec3 vTroikaGlyphColor;\nvarying vec2 vTroikaGlyphDimensions;\n`;\n// language=GLSL prefix=\"void main() {\" suffix=\"}\"\nconst VERTEX_TRANSFORM = `\nvec4 bounds = aTroikaGlyphBounds;\nbounds.xz += uTroikaPositionOffset.x;\nbounds.yw -= uTroikaPositionOffset.y;\n\nvec4 outlineBounds = vec4(\n  bounds.xy - uTroikaDistanceOffset - uTroikaBlurRadius,\n  bounds.zw + uTroikaDistanceOffset + uTroikaBlurRadius\n);\nvec4 clippedBounds = vec4(\n  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),\n  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)\n);\n\nvec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);\n\nposition.xy = mix(bounds.xy, bounds.zw, clippedXY);\n\nuv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);\n\nfloat rad = uTroikaCurveRadius;\nif (rad != 0.0) {\n  float angle = position.x / rad;\n  position.xz = vec2(sin(angle) * rad, rad - cos(angle) * rad);\n  normal.xz = vec2(sin(angle), cos(angle));\n}\n  \nposition = uTroikaOrient * position;\nnormal = uTroikaOrient * normal;\n\nvTroikaGlyphUV = clippedXY.xy;\nvTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);\n\n${\"\" /* NOTE: it seems important to calculate the glyph's bounding texture UVs here in the\n  vertex shader, rather than in the fragment shader, as the latter gives strange artifacts\n  on some glyphs (those in the leftmost texture column) on some systems. The exact reason\n  isn't understood but doing this here, then mix()-ing in the fragment shader, seems to work. */ }\nfloat txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;\nvec2 txUvPerSquare = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;\nvec2 txStartUV = txUvPerSquare * vec2(\n  mod(floor(aTroikaGlyphIndex / 4.0), txCols),\n  floor(floor(aTroikaGlyphIndex / 4.0) / txCols)\n);\nvTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerSquare);\nvTroikaTextureChannel = mod(aTroikaGlyphIndex, 4.0);\n`;\n// language=GLSL\nconst FRAGMENT_DEFS = `\nuniform sampler2D uTroikaSDFTexture;\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform float uTroikaSDFExponent;\nuniform float uTroikaDistanceOffset;\nuniform float uTroikaFillOpacity;\nuniform float uTroikaOutlineOpacity;\nuniform float uTroikaBlurRadius;\nuniform vec3 uTroikaStrokeColor;\nuniform float uTroikaStrokeWidth;\nuniform float uTroikaStrokeOpacity;\nuniform bool uTroikaSDFDebug;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying float vTroikaTextureChannel;\nvarying vec2 vTroikaGlyphDimensions;\n\nfloat troikaSdfValueToSignedDistance(float alpha) {\n  // Inverse of exponential encoding in webgl-sdf-generator\n  ${\"\" /* TODO - there's some slight inaccuracy here when dealing with interpolated alpha values; those\n    are linearly interpolated where the encoding is exponential. Look into improving this by rounding\n    to nearest 2 whole texels, decoding those exponential values, and linearly interpolating the result.\n  */ }\n  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);\n  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;\n  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);\n  return signedDist;\n}\n\nfloat troikaGlyphUvToSdfValue(vec2 glyphUV) {\n  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);\n  vec4 rgba = texture2D(uTroikaSDFTexture, textureUV);\n  float ch = floor(vTroikaTextureChannel + 0.5); //NOTE: can't use round() in WebGL1\n  return ch == 0.0 ? rgba.r : ch == 1.0 ? rgba.g : ch == 2.0 ? rgba.b : rgba.a;\n}\n\nfloat troikaGlyphUvToDistance(vec2 uv) {\n  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));\n}\n\nfloat troikaGetAADist() {\n  ${\"\" /*\n    When the standard derivatives extension is available, we choose an antialiasing alpha threshold based\n    on the potential change in the SDF's alpha from this fragment to its neighbor. This strategy maximizes \n    readability and edge crispness at all sizes and screen resolutions.\n  */ }\n  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300\n  return length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;\n  #else\n  return vTroikaGlyphDimensions.x / 64.0;\n  #endif\n}\n\nfloat troikaGetFragDistValue() {\n  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);\n  float distance = troikaGlyphUvToDistance(clampedGlyphUV);\n \n  // Extrapolate distance when outside bounds:\n  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : \n    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\n\n  ${\"\" /* \n  // TODO more refined extrapolated distance by adjusting for angle of gradient at edge...\n  // This has potential but currently gives very jagged extensions, maybe due to precision issues?\n  float uvStep = 1.0 / uTroikaSDFGlyphSize;\n  vec2 neighbor1UV = clampedGlyphUV + (\n    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * sign(0.5 - vTroikaGlyphUV.y)) :\n    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * sign(0.5 - vTroikaGlyphUV.x), 0.0) :\n    vec2(0.0)\n  );\n  vec2 neighbor2UV = clampedGlyphUV + (\n    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * -sign(0.5 - vTroikaGlyphUV.y)) :\n    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * -sign(0.5 - vTroikaGlyphUV.x), 0.0) :\n    vec2(0.0)\n  );\n  float neighbor1Distance = troikaGlyphUvToDistance(neighbor1UV);\n  float neighbor2Distance = troikaGlyphUvToDistance(neighbor2UV);\n  float distToUnclamped = length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\n  float distToNeighbor = length((clampedGlyphUV - neighbor1UV) * vTroikaGlyphDimensions);\n  float gradientAngle1 = min(asin(abs(neighbor1Distance - distance) / distToNeighbor), PI / 2.0);\n  float gradientAngle2 = min(asin(abs(neighbor2Distance - distance) / distToNeighbor), PI / 2.0);\n  distance += (cos(gradientAngle1) + cos(gradientAngle2)) / 2.0 * distToUnclamped;\n  */ }\n\n  return distance;\n}\n\nfloat troikaGetEdgeAlpha(float distance, float distanceOffset, float aaDist) {\n  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)\n  float alpha = step(-distanceOffset, -distance);\n  #else\n\n  float alpha = smoothstep(\n    distanceOffset + aaDist,\n    distanceOffset - aaDist,\n    distance\n  );\n  #endif\n\n  return alpha;\n}\n`;\n// language=GLSL prefix=\"void main() {\" suffix=\"}\"\nconst FRAGMENT_TRANSFORM = `\nfloat aaDist = troikaGetAADist();\nfloat fragDistance = troikaGetFragDistValue();\nfloat edgeAlpha = uTroikaSDFDebug ?\n  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :\n  troikaGetEdgeAlpha(fragDistance, uTroikaDistanceOffset, max(aaDist, uTroikaBlurRadius));\n\n#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)\nvec4 fillRGBA = gl_FragColor;\nfillRGBA.a *= uTroikaFillOpacity;\nvec4 strokeRGBA = uTroikaStrokeWidth == 0.0 ? fillRGBA : vec4(uTroikaStrokeColor, uTroikaStrokeOpacity);\nif (fillRGBA.a == 0.0) fillRGBA.rgb = strokeRGBA.rgb;\ngl_FragColor = mix(fillRGBA, strokeRGBA, smoothstep(\n  -uTroikaStrokeWidth - aaDist,\n  -uTroikaStrokeWidth + aaDist,\n  fragDistance\n));\ngl_FragColor.a *= edgeAlpha;\n#endif\n\nif (edgeAlpha == 0.0) {\n  discard;\n}\n`;\n/**\n * Create a material for rendering text, derived from a baseMaterial\n */ function createTextDerivedMaterial(baseMaterial) {\n    const textMaterial = (0,troika_three_utils__WEBPACK_IMPORTED_MODULE_4__.createDerivedMaterial)(baseMaterial, {\n        chained: true,\n        extensions: {\n            derivatives: true\n        },\n        uniforms: {\n            uTroikaSDFTexture: {\n                value: null\n            },\n            uTroikaSDFTextureSize: {\n                value: new three__WEBPACK_IMPORTED_MODULE_3__.Vector2()\n            },\n            uTroikaSDFGlyphSize: {\n                value: 0\n            },\n            uTroikaSDFExponent: {\n                value: 0\n            },\n            uTroikaTotalBounds: {\n                value: new three__WEBPACK_IMPORTED_MODULE_3__.Vector4(0, 0, 0, 0)\n            },\n            uTroikaClipRect: {\n                value: new three__WEBPACK_IMPORTED_MODULE_3__.Vector4(0, 0, 0, 0)\n            },\n            uTroikaDistanceOffset: {\n                value: 0\n            },\n            uTroikaOutlineOpacity: {\n                value: 0\n            },\n            uTroikaFillOpacity: {\n                value: 1\n            },\n            uTroikaPositionOffset: {\n                value: new three__WEBPACK_IMPORTED_MODULE_3__.Vector2()\n            },\n            uTroikaCurveRadius: {\n                value: 0\n            },\n            uTroikaBlurRadius: {\n                value: 0\n            },\n            uTroikaStrokeWidth: {\n                value: 0\n            },\n            uTroikaStrokeColor: {\n                value: new three__WEBPACK_IMPORTED_MODULE_3__.Color()\n            },\n            uTroikaStrokeOpacity: {\n                value: 1\n            },\n            uTroikaOrient: {\n                value: new three__WEBPACK_IMPORTED_MODULE_3__.Matrix3()\n            },\n            uTroikaUseGlyphColors: {\n                value: true\n            },\n            uTroikaSDFDebug: {\n                value: false\n            }\n        },\n        vertexDefs: VERTEX_DEFS,\n        vertexTransform: VERTEX_TRANSFORM,\n        fragmentDefs: FRAGMENT_DEFS,\n        fragmentColorTransform: FRAGMENT_TRANSFORM,\n        customRewriter ({ vertexShader, fragmentShader }) {\n            let uDiffuseRE = /\\buniform\\s+vec3\\s+diffuse\\b/;\n            if (uDiffuseRE.test(fragmentShader)) {\n                // Replace all instances of `diffuse` with our varying\n                fragmentShader = fragmentShader.replace(uDiffuseRE, \"varying vec3 vTroikaGlyphColor\").replace(/\\bdiffuse\\b/g, \"vTroikaGlyphColor\");\n                // Make sure the vertex shader declares the uniform so we can grab it as a fallback\n                if (!uDiffuseRE.test(vertexShader)) {\n                    vertexShader = vertexShader.replace(troika_three_utils__WEBPACK_IMPORTED_MODULE_4__.voidMainRegExp, \"uniform vec3 diffuse;\\n$&\\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\\n\");\n                }\n            }\n            return {\n                vertexShader,\n                fragmentShader\n            };\n        }\n    });\n    // Force transparency - TODO is this reasonable?\n    textMaterial.transparent = true;\n    Object.defineProperties(textMaterial, {\n        isTroikaTextMaterial: {\n            value: true\n        },\n        // WebGLShadowMap reverses the side of the shadow material by default, which fails\n        // for planes, so here we force the `shadowSide` to always match the main side.\n        shadowSide: {\n            get () {\n                return this.side;\n            },\n            set () {\n            //no-op\n            }\n        }\n    });\n    return textMaterial;\n}\nconst defaultMaterial = /*#__PURE__*/ new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial({\n    color: 0xffffff,\n    side: three__WEBPACK_IMPORTED_MODULE_3__.DoubleSide,\n    transparent: true\n});\nconst defaultStrokeColor = 0x808080;\nconst tempMat4 = /*#__PURE__*/ new three__WEBPACK_IMPORTED_MODULE_3__.Matrix4();\nconst tempVec3a = /*#__PURE__*/ new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\nconst tempVec3b = /*#__PURE__*/ new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\nconst tempArray = [];\nconst origin = /*#__PURE__*/ new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\nconst defaultOrient = \"+x+y\";\nfunction first(o) {\n    return Array.isArray(o) ? o[0] : o;\n}\nlet getFlatRaycastMesh = ()=>{\n    const mesh = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(new three__WEBPACK_IMPORTED_MODULE_3__.PlaneGeometry(1, 1), defaultMaterial);\n    getFlatRaycastMesh = ()=>mesh;\n    return mesh;\n};\nlet getCurvedRaycastMesh = ()=>{\n    const mesh = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(new three__WEBPACK_IMPORTED_MODULE_3__.PlaneGeometry(1, 1, 32, 1), defaultMaterial);\n    getCurvedRaycastMesh = ()=>mesh;\n    return mesh;\n};\nconst syncStartEvent = {\n    type: \"syncstart\"\n};\nconst syncCompleteEvent = {\n    type: \"synccomplete\"\n};\nconst SYNCABLE_PROPS = [\n    \"font\",\n    \"fontSize\",\n    \"letterSpacing\",\n    \"lineHeight\",\n    \"maxWidth\",\n    \"overflowWrap\",\n    \"text\",\n    \"direction\",\n    \"textAlign\",\n    \"textIndent\",\n    \"whiteSpace\",\n    \"anchorX\",\n    \"anchorY\",\n    \"colorRanges\",\n    \"sdfGlyphSize\"\n];\nconst COPYABLE_PROPS = SYNCABLE_PROPS.concat(\"material\", \"color\", \"depthOffset\", \"clipRect\", \"curveRadius\", \"orientation\", \"glyphGeometryDetail\");\n/**\n * @class Text\n *\n * A ThreeJS Mesh that renders a string of text on a plane in 3D space using signed distance\n * fields (SDF).\n */ class Text extends three__WEBPACK_IMPORTED_MODULE_3__.Mesh {\n    constructor(){\n        const geometry = new GlyphsGeometry();\n        super(geometry, null);\n        // === Text layout properties: === //\n        /**\n     * @member {string} text\n     * The string of text to be rendered.\n     */ this.text = \"\";\n        /**\n     * @member {number|string} anchorX\n     * Defines the horizontal position in the text block that should line up with the local origin.\n     * Can be specified as a numeric x position in local units, a string percentage of the total\n     * text block width e.g. `'25%'`, or one of the following keyword strings: 'left', 'center',\n     * or 'right'.\n     */ this.anchorX = 0;\n        /**\n     * @member {number|string} anchorX\n     * Defines the vertical position in the text block that should line up with the local origin.\n     * Can be specified as a numeric y position in local units (note: down is negative y), a string\n     * percentage of the total text block height e.g. `'25%'`, or one of the following keyword strings:\n     * 'top', 'top-baseline', 'top-cap', 'top-ex', 'middle', 'bottom-baseline', or 'bottom'.\n     */ this.anchorY = 0;\n        /**\n     * @member {number} curveRadius\n     * Defines a cylindrical radius along which the text's plane will be curved. Positive numbers put\n     * the cylinder's centerline (oriented vertically) that distance in front of the text, for a concave\n     * curvature, while negative numbers put it behind the text for a convex curvature. The centerline\n     * will be aligned with the text's local origin; you can use `anchorX` to offset it.\n     *\n     * Since each glyph is by default rendered with a simple quad, each glyph remains a flat plane\n     * internally. You can use `glyphGeometryDetail` to add more vertices for curvature inside glyphs.\n     */ this.curveRadius = 0;\n        /**\n     * @member {string} direction\n     * Sets the base direction for the text. The default value of \"auto\" will choose a direction based\n     * on the text's content according to the bidi spec. A value of \"ltr\" or \"rtl\" will force the direction.\n     */ this.direction = \"auto\";\n        /**\n     * @member {string} font\n     * URL of a custom font to be used. Font files can be in .ttf, .otf, or .woff (not .woff2) formats.\n     * Defaults to the Roboto font loaded from Google Fonts.\n     */ this.font = null; //will use default from TextBuilder\n        /**\n     * @member {number} fontSize\n     * The size at which to render the font in local units; corresponds to the em-box height\n     * of the chosen `font`.\n     */ this.fontSize = 0.1;\n        /**\n     * @member {number} letterSpacing\n     * Sets a uniform adjustment to spacing between letters after kerning is applied. Positive\n     * numbers increase spacing and negative numbers decrease it.\n     */ this.letterSpacing = 0;\n        /**\n     * @member {number|string} lineHeight\n     * Sets the height of each line of text, as a multiple of the `fontSize`. Defaults to 'normal'\n     * which chooses a reasonable height based on the chosen font's ascender/descender metrics.\n     */ this.lineHeight = \"normal\";\n        /**\n     * @member {number} maxWidth\n     * The maximum width of the text block, above which text may start wrapping according to the\n     * `whiteSpace` and `overflowWrap` properties.\n     */ this.maxWidth = Infinity;\n        /**\n     * @member {string} overflowWrap\n     * Defines how text wraps if the `whiteSpace` property is `normal`. Can be either `'normal'`\n     * to break at whitespace characters, or `'break-word'` to allow breaking within words.\n     * Defaults to `'normal'`.\n     */ this.overflowWrap = \"normal\";\n        /**\n     * @member {string} textAlign\n     * The horizontal alignment of each line of text within the overall text bounding box.\n     */ this.textAlign = \"left\";\n        /**\n     * @member {number} textIndent\n     * Indentation for the first character of a line; see CSS `text-indent`.\n     */ this.textIndent = 0;\n        /**\n     * @member {string} whiteSpace\n     * Defines whether text should wrap when a line reaches the `maxWidth`. Can\n     * be either `'normal'` (the default), to allow wrapping according to the `overflowWrap` property,\n     * or `'nowrap'` to prevent wrapping. Note that `'normal'` here honors newline characters to\n     * manually break lines, making it behave more like `'pre-wrap'` does in CSS.\n     */ this.whiteSpace = \"normal\";\n        // === Presentation properties: === //\n        /**\n     * @member {THREE.Material} material\n     * Defines a _base_ material to be used when rendering the text. This material will be\n     * automatically replaced with a material derived from it, that adds shader code to\n     * decrease the alpha for each fragment (pixel) outside the text glyphs, with antialiasing.\n     * By default it will derive from a simple white MeshBasicMaterial, but you can use any\n     * of the other mesh materials to gain other features like lighting, texture maps, etc.\n     *\n     * Also see the `color` shortcut property.\n     */ this.material = null;\n        /**\n     * @member {string|number|THREE.Color} color\n     * This is a shortcut for setting the `color` of the text's material. You can use this\n     * if you don't want to specify a whole custom `material`. Also, if you do use a custom\n     * `material`, this color will only be used for this particuar Text instance, even if\n     * that same material instance is shared across multiple Text objects.\n     */ this.color = null;\n        /**\n     * @member {object|null} colorRanges\n     * WARNING: This API is experimental and may change.\n     * This allows more fine-grained control of colors for individual or ranges of characters,\n     * taking precedence over the material's `color`. Its format is an Object whose keys each\n     * define a starting character index for a range, and whose values are the color for each\n     * range. The color value can be a numeric hex color value, a `THREE.Color` object, or\n     * any of the strings accepted by `THREE.Color`.\n     */ this.colorRanges = null;\n        /**\n     * @member {number|string} outlineWidth\n     * WARNING: This API is experimental and may change.\n     * The width of an outline/halo to be drawn around each text glyph using the `outlineColor` and `outlineOpacity`.\n     * Can be specified as either an absolute number in local units, or as a percentage string e.g.\n     * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`, which means\n     * no outline will be drawn unless an `outlineOffsetX/Y` or `outlineBlur` is set.\n     */ this.outlineWidth = 0;\n        /**\n     * @member {string|number|THREE.Color} outlineColor\n     * WARNING: This API is experimental and may change.\n     * The color of the text outline, if `outlineWidth`/`outlineBlur`/`outlineOffsetX/Y` are set.\n     * Defaults to black.\n     */ this.outlineColor = 0x000000;\n        /**\n     * @member {number} outlineOpacity\n     * WARNING: This API is experimental and may change.\n     * The opacity of the outline, if `outlineWidth`/`outlineBlur`/`outlineOffsetX/Y` are set.\n     * Defaults to `1`.\n     */ this.outlineOpacity = 1;\n        /**\n     * @member {number|string} outlineBlur\n     * WARNING: This API is experimental and may change.\n     * A blur radius applied to the outer edge of the text's outline. If the `outlineWidth` is\n     * zero, the blur will be applied at the glyph edge, like CSS's `text-shadow` blur radius.\n     * Can be specified as either an absolute number in local units, or as a percentage string e.g.\n     * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`.\n     */ this.outlineBlur = 0;\n        /**\n     * @member {number|string} outlineOffsetX\n     * WARNING: This API is experimental and may change.\n     * A horizontal offset for the text outline.\n     * Can be specified as either an absolute number in local units, or as a percentage string e.g. `\"12%\"`\n     * which is treated as a percentage of the `fontSize`. Defaults to `0`.\n     */ this.outlineOffsetX = 0;\n        /**\n     * @member {number|string} outlineOffsetY\n     * WARNING: This API is experimental and may change.\n     * A vertical offset for the text outline.\n     * Can be specified as either an absolute number in local units, or as a percentage string e.g. `\"12%\"`\n     * which is treated as a percentage of the `fontSize`. Defaults to `0`.\n     */ this.outlineOffsetY = 0;\n        /**\n     * @member {number|string} strokeWidth\n     * WARNING: This API is experimental and may change.\n     * The width of an inner stroke drawn inside each text glyph using the `strokeColor` and `strokeOpacity`.\n     * Can be specified as either an absolute number in local units, or as a percentage string e.g. `\"12%\"`\n     * which is treated as a percentage of the `fontSize`. Defaults to `0`.\n     */ this.strokeWidth = 0;\n        /**\n     * @member {string|number|THREE.Color} strokeColor\n     * WARNING: This API is experimental and may change.\n     * The color of the text stroke, if `strokeWidth` is greater than zero. Defaults to gray.\n     */ this.strokeColor = defaultStrokeColor;\n        /**\n     * @member {number} strokeOpacity\n     * WARNING: This API is experimental and may change.\n     * The opacity of the stroke, if `strokeWidth` is greater than zero. Defaults to `1`.\n     */ this.strokeOpacity = 1;\n        /**\n     * @member {number} fillOpacity\n     * WARNING: This API is experimental and may change.\n     * The opacity of the glyph's fill from 0 to 1. This behaves like the material's `opacity` but allows\n     * giving the fill a different opacity than the `strokeOpacity`. A fillOpacity of `0` makes the\n     * interior of the glyph invisible, leaving just the `strokeWidth`. Defaults to `1`.\n     */ this.fillOpacity = 1;\n        /**\n     * @member {number} depthOffset\n     * This is a shortcut for setting the material's `polygonOffset` and related properties,\n     * which can be useful in preventing z-fighting when this text is laid on top of another\n     * plane in the scene. Positive numbers are further from the camera, negatives closer.\n     */ this.depthOffset = 0;\n        /**\n     * @member {Array<number>} clipRect\n     * If specified, defines a `[minX, minY, maxX, maxY]` of a rectangle outside of which all\n     * pixels will be discarded. This can be used for example to clip overflowing text when\n     * `whiteSpace='nowrap'`.\n     */ this.clipRect = null;\n        /**\n     * @member {string} orientation\n     * Defines the axis plane on which the text should be laid out when the mesh has no extra\n     * rotation transform. It is specified as a string with two axes: the horizontal axis with\n     * positive pointing right, and the vertical axis with positive pointing up. By default this\n     * is '+x+y', meaning the text sits on the xy plane with the text's top toward positive y\n     * and facing positive z. A value of '+x-z' would place it on the xz plane with the text's\n     * top toward negative z and facing positive y.\n     */ this.orientation = defaultOrient;\n        /**\n     * @member {number} glyphGeometryDetail\n     * Controls number of vertical/horizontal segments that make up each glyph's rectangular\n     * plane. Defaults to 1. This can be increased to provide more geometrical detail for custom\n     * vertex shader effects, for example.\n     */ this.glyphGeometryDetail = 1;\n        /**\n     * @member {number|null} sdfGlyphSize\n     * The size of each glyph's SDF (signed distance field) used for rendering. This must be a\n     * power-of-two number. Defaults to 64 which is generally a good balance of size and quality\n     * for most fonts. Larger sizes can improve the quality of glyph rendering by increasing\n     * the sharpness of corners and preventing loss of very thin lines, at the expense of\n     * increased memory footprint and longer SDF generation time.\n     */ this.sdfGlyphSize = null;\n        /**\n     * @member {boolean} gpuAccelerateSDF\n     * When `true`, the SDF generation process will be GPU-accelerated with WebGL when possible,\n     * making it much faster especially for complex glyphs, and falling back to a JavaScript version\n     * executed in web workers when support isn't available. It should automatically detect support,\n     * but it's still somewhat experimental, so you can set it to `false` to force it to use the JS\n     * version if you encounter issues with it.\n     */ this.gpuAccelerateSDF = true;\n        this.debugSDF = false;\n    }\n    /**\n   * Updates the text rendering according to the current text-related configuration properties.\n   * This is an async process, so you can pass in a callback function to be executed when it\n   * finishes.\n   * @param {function} [callback]\n   */ sync(callback) {\n        if (this._needsSync) {\n            this._needsSync = false;\n            // If there's another sync still in progress, queue\n            if (this._isSyncing) {\n                (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);\n            } else {\n                this._isSyncing = true;\n                this.dispatchEvent(syncStartEvent);\n                getTextRenderInfo({\n                    text: this.text,\n                    font: this.font,\n                    fontSize: this.fontSize || 0.1,\n                    letterSpacing: this.letterSpacing || 0,\n                    lineHeight: this.lineHeight || \"normal\",\n                    maxWidth: this.maxWidth,\n                    direction: this.direction || \"auto\",\n                    textAlign: this.textAlign,\n                    textIndent: this.textIndent,\n                    whiteSpace: this.whiteSpace,\n                    overflowWrap: this.overflowWrap,\n                    anchorX: this.anchorX,\n                    anchorY: this.anchorY,\n                    colorRanges: this.colorRanges,\n                    includeCaretPositions: true,\n                    sdfGlyphSize: this.sdfGlyphSize,\n                    gpuAccelerateSDF: this.gpuAccelerateSDF\n                }, (textRenderInfo)=>{\n                    this._isSyncing = false;\n                    // Save result for later use in onBeforeRender\n                    this._textRenderInfo = textRenderInfo;\n                    // Update the geometry attributes\n                    this.geometry.updateGlyphs(textRenderInfo.glyphBounds, textRenderInfo.glyphAtlasIndices, textRenderInfo.blockBounds, textRenderInfo.chunkedBounds, textRenderInfo.glyphColors);\n                    // If we had extra sync requests queued up, kick it off\n                    const queued = this._queuedSyncs;\n                    if (queued) {\n                        this._queuedSyncs = null;\n                        this._needsSync = true;\n                        this.sync(()=>{\n                            queued.forEach((fn)=>fn && fn());\n                        });\n                    }\n                    this.dispatchEvent(syncCompleteEvent);\n                    if (callback) {\n                        callback();\n                    }\n                });\n            }\n        }\n    }\n    /**\n   * Initiate a sync if needed - note it won't complete until next frame at the\n   * earliest so if possible it's a good idea to call sync() manually as soon as\n   * all the properties have been set.\n   * @override\n   */ onBeforeRender(renderer, scene, camera, geometry, material, group) {\n        this.sync();\n        // This may not always be a text material, e.g. if there's a scene.overrideMaterial present\n        if (material.isTroikaTextMaterial) {\n            this._prepareForRender(material);\n        }\n        // We need to force the material to FrontSide to avoid the double-draw-call performance hit\n        // introduced in Three.js r130: https://github.com/mrdoob/three.js/pull/21967 - The sidedness\n        // is instead applied via drawRange in the GlyphsGeometry.\n        material._hadOwnSide = material.hasOwnProperty(\"side\");\n        this.geometry.setSide(material._actualSide = material.side);\n        material.side = three__WEBPACK_IMPORTED_MODULE_3__.FrontSide;\n    }\n    onAfterRender(renderer, scene, camera, geometry, material, group) {\n        // Restore original material side\n        if (material._hadOwnSide) {\n            material.side = material._actualSide;\n        } else {\n            delete material.side; // back to inheriting from base material\n        }\n    }\n    /**\n   * Shortcut to dispose the geometry specific to this instance.\n   * Note: we don't also dispose the derived material here because if anything else is\n   * sharing the same base material it will result in a pause next frame as the program\n   * is recompiled. Instead users can dispose the base material manually, like normal,\n   * and we'll also dispose the derived material at that time.\n   */ dispose() {\n        this.geometry.dispose();\n    }\n    /**\n   * @property {TroikaTextRenderInfo|null} textRenderInfo\n   * @readonly\n   * The current processed rendering data for this TextMesh, returned by the TextBuilder after\n   * a `sync()` call. This will be `null` initially, and may be stale for a short period until\n   * the asynchrous `sync()` process completes.\n   */ get textRenderInfo() {\n        return this._textRenderInfo || null;\n    }\n    // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n    get material() {\n        let derivedMaterial = this._derivedMaterial;\n        const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());\n        if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n            derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial);\n            // dispose the derived material when its base material is disposed:\n            baseMaterial.addEventListener(\"dispose\", function onDispose() {\n                baseMaterial.removeEventListener(\"dispose\", onDispose);\n                derivedMaterial.dispose();\n            });\n        }\n        // If text outline is configured, render it as a preliminary draw using Three's multi-material\n        // feature (see GlyphsGeometry which sets up `groups` for this purpose) Doing it with multi\n        // materials ensures the layers are always rendered consecutively in a consistent order.\n        // Each layer will trigger onBeforeRender with the appropriate material.\n        if (this.outlineWidth || this.outlineBlur || this.outlineOffsetX || this.outlineOffsetY) {\n            let outlineMaterial = derivedMaterial._outlineMtl;\n            if (!outlineMaterial) {\n                outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {\n                    id: {\n                        value: derivedMaterial.id + 0.1\n                    }\n                });\n                outlineMaterial.isTextOutlineMaterial = true;\n                outlineMaterial.depthWrite = false;\n                outlineMaterial.map = null; //???\n                derivedMaterial.addEventListener(\"dispose\", function onDispose() {\n                    derivedMaterial.removeEventListener(\"dispose\", onDispose);\n                    outlineMaterial.dispose();\n                });\n            }\n            return [\n                outlineMaterial,\n                derivedMaterial\n            ];\n        } else {\n            return derivedMaterial;\n        }\n    }\n    set material(baseMaterial) {\n        if (baseMaterial && baseMaterial.isTroikaTextMaterial) {\n            this._derivedMaterial = baseMaterial;\n            this._baseMaterial = baseMaterial.baseMaterial;\n        } else {\n            this._baseMaterial = baseMaterial;\n        }\n    }\n    get glyphGeometryDetail() {\n        return this.geometry.detail;\n    }\n    set glyphGeometryDetail(detail) {\n        this.geometry.detail = detail;\n    }\n    get curveRadius() {\n        return this.geometry.curveRadius;\n    }\n    set curveRadius(r) {\n        this.geometry.curveRadius = r;\n    }\n    // Create and update material for shadows upon request:\n    get customDepthMaterial() {\n        return first(this.material).getDepthMaterial();\n    }\n    get customDistanceMaterial() {\n        return first(this.material).getDistanceMaterial();\n    }\n    _prepareForRender(material) {\n        const isOutline = material.isTextOutlineMaterial;\n        const uniforms = material.uniforms;\n        const textInfo = this.textRenderInfo;\n        if (textInfo) {\n            const { sdfTexture, blockBounds } = textInfo;\n            uniforms.uTroikaSDFTexture.value = sdfTexture;\n            uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);\n            uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;\n            uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;\n            uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);\n            uniforms.uTroikaUseGlyphColors.value = !isOutline && !!textInfo.glyphColors;\n            let distanceOffset = 0;\n            let blurRadius = 0;\n            let strokeWidth = 0;\n            let fillOpacity;\n            let strokeOpacity;\n            let strokeColor;\n            let offsetX = 0;\n            let offsetY = 0;\n            if (isOutline) {\n                let { outlineWidth, outlineOffsetX, outlineOffsetY, outlineBlur, outlineOpacity } = this;\n                distanceOffset = this._parsePercent(outlineWidth) || 0;\n                blurRadius = Math.max(0, this._parsePercent(outlineBlur) || 0);\n                fillOpacity = outlineOpacity;\n                offsetX = this._parsePercent(outlineOffsetX) || 0;\n                offsetY = this._parsePercent(outlineOffsetY) || 0;\n            } else {\n                strokeWidth = Math.max(0, this._parsePercent(this.strokeWidth) || 0);\n                if (strokeWidth) {\n                    strokeColor = this.strokeColor;\n                    uniforms.uTroikaStrokeColor.value.set(strokeColor == null ? defaultStrokeColor : strokeColor);\n                    strokeOpacity = this.strokeOpacity;\n                    if (strokeOpacity == null) strokeOpacity = 1;\n                }\n                fillOpacity = this.fillOpacity;\n            }\n            uniforms.uTroikaDistanceOffset.value = distanceOffset;\n            uniforms.uTroikaPositionOffset.value.set(offsetX, offsetY);\n            uniforms.uTroikaBlurRadius.value = blurRadius;\n            uniforms.uTroikaStrokeWidth.value = strokeWidth;\n            uniforms.uTroikaStrokeOpacity.value = strokeOpacity;\n            uniforms.uTroikaFillOpacity.value = fillOpacity == null ? 1 : fillOpacity;\n            uniforms.uTroikaCurveRadius.value = this.curveRadius || 0;\n            let clipRect = this.clipRect;\n            if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {\n                uniforms.uTroikaClipRect.value.fromArray(clipRect);\n            } else {\n                // no clipping - choose a finite rect that shouldn't ever be reached by overflowing glyphs or outlines\n                const pad = (this.fontSize || 0.1) * 100;\n                uniforms.uTroikaClipRect.value.set(blockBounds[0] - pad, blockBounds[1] - pad, blockBounds[2] + pad, blockBounds[3] + pad);\n            }\n            this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);\n        }\n        uniforms.uTroikaSDFDebug.value = !!this.debugSDF;\n        material.polygonOffset = !!this.depthOffset;\n        material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;\n        // Shortcut for setting material color via `color` prop on the mesh; this is\n        // applied only to the derived material to avoid mutating a shared base material.\n        const color = isOutline ? this.outlineColor || 0 : this.color;\n        if (color == null) {\n            delete material.color; //inherit from base\n        } else {\n            const colorObj = material.hasOwnProperty(\"color\") ? material.color : material.color = new three__WEBPACK_IMPORTED_MODULE_3__.Color();\n            if (color !== colorObj._input || typeof color === \"object\") {\n                colorObj.set(colorObj._input = color);\n            }\n        }\n        // base orientation\n        let orient = this.orientation || defaultOrient;\n        if (orient !== material._orientation) {\n            let rotMat = uniforms.uTroikaOrient.value;\n            orient = orient.replace(/[^-+xyz]/g, \"\");\n            let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);\n            if (match) {\n                let [, hSign, hAxis, vSign, vAxis] = match;\n                tempVec3a.set(0, 0, 0)[hAxis] = hSign === \"-\" ? 1 : -1;\n                tempVec3b.set(0, 0, 0)[vAxis] = vSign === \"-\" ? -1 : 1;\n                tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);\n                rotMat.setFromMatrix4(tempMat4);\n            } else {\n                rotMat.identity();\n            }\n            material._orientation = orient;\n        }\n    }\n    _parsePercent(value) {\n        if (typeof value === \"string\") {\n            let match = value.match(/^(-?[\\d.]+)%$/);\n            let pct = match ? parseFloat(match[1]) : NaN;\n            value = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;\n        }\n        return value;\n    }\n    /**\n   * Translate a point in local space to an x/y in the text plane.\n   */ localPositionToTextCoords(position, target = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2()) {\n        target.copy(position); //simple non-curved case is 1:1\n        const r = this.curveRadius;\n        if (r) {\n            target.x = Math.atan2(position.x, Math.abs(r) - Math.abs(position.z)) * Math.abs(r);\n        }\n        return target;\n    }\n    /**\n   * Translate a point in world space to an x/y in the text plane.\n   */ worldPositionToTextCoords(position, target = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2()) {\n        tempVec3a.copy(position);\n        return this.localPositionToTextCoords(this.worldToLocal(tempVec3a), target);\n    }\n    /**\n   * @override Custom raycasting to test against the whole text block's max rectangular bounds\n   * TODO is there any reason to make this more granular, like within individual line or glyph rects?\n   */ raycast(raycaster, intersects) {\n        const { textRenderInfo, curveRadius } = this;\n        if (textRenderInfo) {\n            const bounds = textRenderInfo.blockBounds;\n            const raycastMesh = curveRadius ? getCurvedRaycastMesh() : getFlatRaycastMesh();\n            const geom = raycastMesh.geometry;\n            const { position, uv } = geom.attributes;\n            for(let i = 0; i < uv.count; i++){\n                let x = bounds[0] + uv.getX(i) * (bounds[2] - bounds[0]);\n                const y = bounds[1] + uv.getY(i) * (bounds[3] - bounds[1]);\n                let z = 0;\n                if (curveRadius) {\n                    z = curveRadius - Math.cos(x / curveRadius) * curveRadius;\n                    x = Math.sin(x / curveRadius) * curveRadius;\n                }\n                position.setXYZ(i, x, y, z);\n            }\n            geom.boundingSphere = this.geometry.boundingSphere;\n            geom.boundingBox = this.geometry.boundingBox;\n            raycastMesh.matrixWorld = this.matrixWorld;\n            raycastMesh.material.side = this.material.side;\n            tempArray.length = 0;\n            raycastMesh.raycast(raycaster, tempArray);\n            for(let i = 0; i < tempArray.length; i++){\n                tempArray[i].object = this;\n                intersects.push(tempArray[i]);\n            }\n        }\n    }\n    copy(source) {\n        // Prevent copying the geometry reference so we don't end up sharing attributes between instances\n        const geom = this.geometry;\n        super.copy(source);\n        this.geometry = geom;\n        COPYABLE_PROPS.forEach((prop)=>{\n            this[prop] = source[prop];\n        });\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n// Create setters for properties that affect text layout:\nSYNCABLE_PROPS.forEach((prop)=>{\n    const privateKey = \"_private_\" + prop;\n    Object.defineProperty(Text.prototype, prop, {\n        get () {\n            return this[privateKey];\n        },\n        set (value) {\n            if (value !== this[privateKey]) {\n                this[privateKey] = value;\n                this._needsSync = true;\n            }\n        }\n    });\n});\n//=== Utility functions for dealing with carets and selection ranges ===//\n/**\n * @typedef {object} TextCaret\n * @property {number} x - x position of the caret\n * @property {number} y - y position of the caret's bottom\n * @property {number} height - height of the caret\n * @property {number} charIndex - the index in the original input string of this caret's target\n *   character; the caret will be for the position _before_ that character.\n */ /**\n * Given a local x/y coordinate in the text block plane, find the nearest caret position.\n * @param {TroikaTextRenderInfo} textRenderInfo - a result object from TextBuilder#getTextRenderInfo\n * @param {number} x\n * @param {number} y\n * @return {TextCaret | null}\n */ function getCaretAtPoint(textRenderInfo, x, y) {\n    let closestCaret = null;\n    const { caretHeight } = textRenderInfo;\n    const caretsByRow = groupCaretsByRow(textRenderInfo);\n    // Find nearest row by y first\n    let closestRowY = Infinity;\n    caretsByRow.forEach((carets, rowY)=>{\n        if (Math.abs(y - (rowY + caretHeight / 2)) < Math.abs(y - (closestRowY + caretHeight / 2))) {\n            closestRowY = rowY;\n        }\n    });\n    // Then find closest caret by x within that row\n    caretsByRow.get(closestRowY).forEach((caret)=>{\n        if (!closestCaret || Math.abs(x - caret.x) < Math.abs(x - closestCaret.x)) {\n            closestCaret = caret;\n        }\n    });\n    return closestCaret;\n}\nconst _rectsCache = new WeakMap();\n/**\n * Given start and end character indexes, return a list of rectangles covering all the\n * characters within that selection.\n * @param {TroikaTextRenderInfo} textRenderInfo\n * @param {number} start - index of the first char in the selection\n * @param {number} end - index of the first char after the selection\n * @return {Array<{left, top, right, bottom}> | null}\n */ function getSelectionRects(textRenderInfo, start, end) {\n    let rects;\n    if (textRenderInfo) {\n        // Check cache - textRenderInfo is frozen so it's safe to cache based on it\n        let prevResult = _rectsCache.get(textRenderInfo);\n        if (prevResult && prevResult.start === start && prevResult.end === end) {\n            return prevResult.rects;\n        }\n        const { caretPositions, caretHeight } = textRenderInfo;\n        // Normalize\n        if (end < start) {\n            const s = start;\n            start = end;\n            end = s;\n        }\n        start = Math.max(start, 0);\n        end = Math.min(end, caretPositions.length + 1);\n        // Build list of rects, expanding the current rect for all characters in a run and starting\n        // a new rect whenever reaching a new line or a new bidi direction\n        rects = [];\n        let currentRect = null;\n        for(let i = start; i < end; i++){\n            const x1 = caretPositions[i * 3];\n            const x2 = caretPositions[i * 3 + 1];\n            const left = Math.min(x1, x2);\n            const right = Math.max(x1, x2);\n            const bottom = caretPositions[i * 3 + 2];\n            if (!currentRect || bottom !== currentRect.bottom || left > currentRect.right || right < currentRect.left) {\n                currentRect = {\n                    left: Infinity,\n                    right: -Infinity,\n                    bottom: bottom,\n                    top: bottom + caretHeight\n                };\n                rects.push(currentRect);\n            }\n            currentRect.left = Math.min(left, currentRect.left);\n            currentRect.right = Math.max(right, currentRect.right);\n        }\n        // Merge any overlapping rects, e.g. those formed by adjacent bidi runs\n        rects.sort((a, b)=>b.bottom - a.bottom || a.left - b.left);\n        for(let i = rects.length - 1; i-- > 0;){\n            const rectA = rects[i];\n            const rectB = rects[i + 1];\n            if (rectA.bottom === rectB.bottom && rectA.left <= rectB.right && rectA.right >= rectB.left) {\n                rectB.left = Math.min(rectB.left, rectA.left);\n                rectB.right = Math.max(rectB.right, rectA.right);\n                rects.splice(i, 1);\n            }\n        }\n        _rectsCache.set(textRenderInfo, {\n            start,\n            end,\n            rects\n        });\n    }\n    return rects;\n}\nconst _caretsByRowCache = new WeakMap();\nfunction groupCaretsByRow(textRenderInfo) {\n    // textRenderInfo is frozen so it's safe to cache based on it\n    let caretsByRow = _caretsByRowCache.get(textRenderInfo);\n    if (!caretsByRow) {\n        const { caretPositions, caretHeight } = textRenderInfo;\n        caretsByRow = new Map();\n        for(let i = 0; i < caretPositions.length; i += 3){\n            const rowY = caretPositions[i + 2];\n            let rowCarets = caretsByRow.get(rowY);\n            if (!rowCarets) {\n                caretsByRow.set(rowY, rowCarets = []);\n            }\n            rowCarets.push({\n                x: caretPositions[i],\n                y: rowY,\n                height: caretHeight,\n                charIndex: i / 3\n            });\n            // Add one more caret after the final char\n            if (i + 3 >= caretPositions.length) {\n                rowCarets.push({\n                    x: caretPositions[i + 1],\n                    y: rowY,\n                    height: caretHeight,\n                    charIndex: i / 3 + 1\n                });\n            }\n        }\n    }\n    _caretsByRowCache.set(textRenderInfo, caretsByRow);\n    return caretsByRow;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/troika-three-text/dist/troika-three-text.esm.js\n");

/***/ })

};
;