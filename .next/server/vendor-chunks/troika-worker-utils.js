"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/troika-worker-utils";
exports.ids = ["vendor-chunks/troika-worker-utils"];
exports.modules = {

/***/ "(ssr)/./node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineWorkerModule: () => (/* binding */ defineWorkerModule),\n/* harmony export */   stringifyFunction: () => (/* binding */ stringifyFunction),\n/* harmony export */   terminateWorker: () => (/* binding */ terminateWorker)\n/* harmony export */ });\n/**\n * Main content for the worker that handles the loading and execution of\n * modules within it.\n */ function workerBootstrap() {\n    var modules = Object.create(null);\n    // Handle messages for registering a module\n    function registerModule(ref, callback) {\n        var id = ref.id;\n        var name = ref.name;\n        var dependencies = ref.dependencies;\n        if (dependencies === void 0) dependencies = [];\n        var init = ref.init;\n        if (init === void 0) init = function() {};\n        var getTransferables = ref.getTransferables;\n        if (getTransferables === void 0) getTransferables = null;\n        // Only register once\n        if (modules[id]) {\n            return;\n        }\n        try {\n            // If any dependencies are modules, ensure they're registered and grab their value\n            dependencies = dependencies.map(function(dep) {\n                if (dep && dep.isWorkerModule) {\n                    registerModule(dep, function(depResult) {\n                        if (depResult instanceof Error) {\n                            throw depResult;\n                        }\n                    });\n                    dep = modules[dep.id].value;\n                }\n                return dep;\n            });\n            // Rehydrate functions\n            init = rehydrate(\"<\" + name + \">.init\", init);\n            if (getTransferables) {\n                getTransferables = rehydrate(\"<\" + name + \">.getTransferables\", getTransferables);\n            }\n            // Initialize the module and store its value\n            var value = null;\n            if (typeof init === \"function\") {\n                value = init.apply(void 0, dependencies);\n            } else {\n                console.error(\"worker module init function failed to rehydrate\");\n            }\n            modules[id] = {\n                id: id,\n                value: value,\n                getTransferables: getTransferables\n            };\n            callback(value);\n        } catch (err) {\n            if (!(err && err.noLog)) {\n                console.error(err);\n            }\n            callback(err);\n        }\n    }\n    // Handle messages for calling a registered module's result function\n    function callModule(ref, callback) {\n        var ref$1;\n        var id = ref.id;\n        var args = ref.args;\n        if (!modules[id] || typeof modules[id].value !== \"function\") {\n            callback(new Error(\"Worker module \" + id + \": not found or its 'init' did not return a function\"));\n        }\n        try {\n            var result = (ref$1 = modules[id]).value.apply(ref$1, args);\n            if (result && typeof result.then === \"function\") {\n                result.then(handleResult, function(rej) {\n                    return callback(rej instanceof Error ? rej : new Error(\"\" + rej));\n                });\n            } else {\n                handleResult(result);\n            }\n        } catch (err) {\n            callback(err);\n        }\n        function handleResult(result) {\n            try {\n                var tx = modules[id].getTransferables && modules[id].getTransferables(result);\n                if (!tx || !Array.isArray(tx) || !tx.length) {\n                    tx = undefined; //postMessage is very picky about not passing null or empty transferables\n                }\n                callback(result, tx);\n            } catch (err) {\n                console.error(err);\n                callback(err);\n            }\n        }\n    }\n    function rehydrate(name, str) {\n        var result = void 0;\n        self.troikaDefine = function(r) {\n            return result = r;\n        };\n        var url = URL.createObjectURL(new Blob([\n            \"/** \" + name.replace(/\\*/g, \"\") + \" **/\\n\\ntroikaDefine(\\n\" + str + \"\\n)\"\n        ], {\n            type: \"application/javascript\"\n        }));\n        try {\n            importScripts(url);\n        } catch (err) {\n            console.error(err);\n        }\n        URL.revokeObjectURL(url);\n        delete self.troikaDefine;\n        return result;\n    }\n    // Handler for all messages within the worker\n    self.addEventListener(\"message\", function(e) {\n        var ref = e.data;\n        var messageId = ref.messageId;\n        var action = ref.action;\n        var data = ref.data;\n        try {\n            // Module registration\n            if (action === \"registerModule\") {\n                registerModule(data, function(result) {\n                    if (result instanceof Error) {\n                        postMessage({\n                            messageId: messageId,\n                            success: false,\n                            error: result.message\n                        });\n                    } else {\n                        postMessage({\n                            messageId: messageId,\n                            success: true,\n                            result: {\n                                isCallable: typeof result === \"function\"\n                            }\n                        });\n                    }\n                });\n            }\n            // Invocation\n            if (action === \"callModule\") {\n                callModule(data, function(result, transferables) {\n                    if (result instanceof Error) {\n                        postMessage({\n                            messageId: messageId,\n                            success: false,\n                            error: result.message\n                        });\n                    } else {\n                        postMessage({\n                            messageId: messageId,\n                            success: true,\n                            result: result\n                        }, transferables || undefined);\n                    }\n                });\n            }\n        } catch (err) {\n            postMessage({\n                messageId: messageId,\n                success: false,\n                error: err.stack\n            });\n        }\n    });\n}\n/**\n * Fallback for `defineWorkerModule` that behaves identically but runs in the main\n * thread, for when the execution environment doesn't support web workers or they\n * are disallowed due to e.g. CSP security restrictions.\n */ function defineMainThreadModule(options) {\n    var moduleFunc = function() {\n        var args = [], len = arguments.length;\n        while(len--)args[len] = arguments[len];\n        return moduleFunc._getInitResult().then(function(initResult) {\n            if (typeof initResult === \"function\") {\n                return initResult.apply(void 0, args);\n            } else {\n                throw new Error(\"Worker module function was called but `init` did not return a callable function\");\n            }\n        });\n    };\n    moduleFunc._getInitResult = function() {\n        // We can ignore getTransferables in main thread. TODO workerId?\n        var dependencies = options.dependencies;\n        var init = options.init;\n        // Resolve dependencies\n        dependencies = Array.isArray(dependencies) ? dependencies.map(function(dep) {\n            return dep && dep._getInitResult ? dep._getInitResult() : dep;\n        }) : [];\n        // Invoke init with the resolved dependencies\n        var initPromise = Promise.all(dependencies).then(function(deps) {\n            return init.apply(null, deps);\n        });\n        // Cache the resolved promise for subsequent calls\n        moduleFunc._getInitResult = function() {\n            return initPromise;\n        };\n        return initPromise;\n    };\n    return moduleFunc;\n}\nvar supportsWorkers = function() {\n    var supported = false;\n    // Only attempt worker initialization in browsers; elsewhere it would just be\n    // noise e.g. loading into a Node environment for SSR.\n    if (false) { var worker; }\n    // Cached result\n    supportsWorkers = function() {\n        return supported;\n    };\n    return supported;\n};\nvar _workerModuleId = 0;\nvar _messageId = 0;\nvar _allowInitAsString = false;\nvar workers = Object.create(null);\nvar registeredModules = Object.create(null); //workerId -> Set<unregisterFn>\nvar openRequests = Object.create(null);\n/**\n * Define a module of code that will be executed with a web worker. This provides a simple\n * interface for moving chunks of logic off the main thread, and managing their dependencies\n * among one another.\n *\n * @param {object} options\n * @param {function} options.init\n * @param {array} [options.dependencies]\n * @param {function} [options.getTransferables]\n * @param {string} [options.name]\n * @param {string} [options.workerId]\n * @return {function(...[*]): {then}}\n */ function defineWorkerModule(options) {\n    if ((!options || typeof options.init !== \"function\") && !_allowInitAsString) {\n        throw new Error(\"requires `options.init` function\");\n    }\n    var dependencies = options.dependencies;\n    var init = options.init;\n    var getTransferables = options.getTransferables;\n    var workerId = options.workerId;\n    if (!supportsWorkers()) {\n        return defineMainThreadModule(options);\n    }\n    if (workerId == null) {\n        workerId = \"#default\";\n    }\n    var id = \"workerModule\" + ++_workerModuleId;\n    var name = options.name || id;\n    var registrationPromise = null;\n    dependencies = dependencies && dependencies.map(function(dep) {\n        // Wrap raw functions as worker modules with no dependencies\n        if (typeof dep === \"function\" && !dep.workerModuleData) {\n            _allowInitAsString = true;\n            dep = defineWorkerModule({\n                workerId: workerId,\n                name: \"<\" + name + \"> function dependency: \" + dep.name,\n                init: \"function(){return (\\n\" + stringifyFunction(dep) + \"\\n)}\"\n            });\n            _allowInitAsString = false;\n        }\n        // Grab postable data for worker modules\n        if (dep && dep.workerModuleData) {\n            dep = dep.workerModuleData;\n        }\n        return dep;\n    });\n    function moduleFunc() {\n        var args = [], len = arguments.length;\n        while(len--)args[len] = arguments[len];\n        // Register this module if needed\n        if (!registrationPromise) {\n            registrationPromise = callWorker(workerId, \"registerModule\", moduleFunc.workerModuleData);\n            var unregister = function() {\n                registrationPromise = null;\n                registeredModules[workerId].delete(unregister);\n            };\n            (registeredModules[workerId] || (registeredModules[workerId] = new Set())).add(unregister);\n        }\n        // Invoke the module, returning a promise\n        return registrationPromise.then(function(ref) {\n            var isCallable = ref.isCallable;\n            if (isCallable) {\n                return callWorker(workerId, \"callModule\", {\n                    id: id,\n                    args: args\n                });\n            } else {\n                throw new Error(\"Worker module function was called but `init` did not return a callable function\");\n            }\n        });\n    }\n    moduleFunc.workerModuleData = {\n        isWorkerModule: true,\n        id: id,\n        name: name,\n        dependencies: dependencies,\n        init: stringifyFunction(init),\n        getTransferables: getTransferables && stringifyFunction(getTransferables)\n    };\n    return moduleFunc;\n}\n/**\n * Terminate an active Worker by a workerId that was passed to defineWorkerModule.\n * This only terminates the Worker itself; the worker module will remain available\n * and if you call it again its Worker will be respawned.\n * @param {string} workerId\n */ function terminateWorker(workerId) {\n    // Unregister all modules that were registered in that worker\n    if (registeredModules[workerId]) {\n        registeredModules[workerId].forEach(function(unregister) {\n            unregister();\n        });\n    }\n    // Terminate the Worker object\n    if (workers[workerId]) {\n        workers[workerId].terminate();\n        delete workers[workerId];\n    }\n}\n/**\n * Stringifies a function into a form that can be deserialized in the worker\n * @param fn\n */ function stringifyFunction(fn) {\n    var str = fn.toString();\n    // If it was defined in object method/property format, it needs to be modified\n    if (!/^function/.test(str) && /^\\w+\\s*\\(/.test(str)) {\n        str = \"function \" + str;\n    }\n    return str;\n}\nfunction getWorker(workerId) {\n    var worker = workers[workerId];\n    if (!worker) {\n        // Bootstrap the worker's content\n        var bootstrap = stringifyFunction(workerBootstrap);\n        // Create the worker from the bootstrap function content\n        worker = workers[workerId] = new Worker(URL.createObjectURL(new Blob([\n            \"/** Worker Module Bootstrap: \" + workerId.replace(/\\*/g, \"\") + \" **/\\n\\n;(\" + bootstrap + \")()\"\n        ], {\n            type: \"application/javascript\"\n        })));\n        // Single handler for response messages from the worker\n        worker.onmessage = function(e) {\n            var response = e.data;\n            var msgId = response.messageId;\n            var callback = openRequests[msgId];\n            if (!callback) {\n                throw new Error(\"WorkerModule response with empty or unknown messageId\");\n            }\n            delete openRequests[msgId];\n            callback(response);\n        };\n    }\n    return worker;\n}\n// Issue a call to the worker with a callback to handle the response\nfunction callWorker(workerId, action, data) {\n    return new Promise(function(resolve, reject) {\n        var messageId = ++_messageId;\n        openRequests[messageId] = function(response) {\n            if (response.success) {\n                resolve(response.result);\n            } else {\n                reject(new Error(\"Error in worker \" + action + \" call: \" + response.error));\n            }\n        };\n        getWorker(workerId).postMessage({\n            messageId: messageId,\n            action: action,\n            data: data\n        });\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js\n");

/***/ })

};
;