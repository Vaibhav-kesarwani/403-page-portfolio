"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/leva";
exports.ids = ["vendor-chunks/leva"];
exports.modules = {

/***/ "(ssr)/./node_modules/leva/dist/leva.esm.js":
/*!********************************************!*\
  !*** ./node_modules/leva/dist/leva.esm.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Leva: () => (/* binding */ Leva),\n/* harmony export */   LevaInputs: () => (/* reexport safe */ _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2),\n/* harmony export */   LevaPanel: () => (/* binding */ LevaPanel),\n/* harmony export */   LevaStoreProvider: () => (/* reexport safe */ _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a7),\n/* harmony export */   button: () => (/* binding */ button),\n/* harmony export */   buttonGroup: () => (/* binding */ buttonGroup),\n/* harmony export */   folder: () => (/* binding */ folder),\n/* harmony export */   levaStore: () => (/* binding */ levaStore),\n/* harmony export */   monitor: () => (/* binding */ monitor),\n/* harmony export */   useControls: () => (/* binding */ useControls),\n/* harmony export */   useCreateStore: () => (/* binding */ useCreateStore),\n/* harmony export */   useStoreContext: () => (/* reexport safe */ _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)\n/* harmony export */ });\n/* harmony import */ var _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector-plugin-6f82aee9.esm.js */ \"(ssr)/./node_modules/leva/dist/vector-plugin-6f82aee9.esm.js\");\n/* harmony import */ var v8n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! v8n */ \"(ssr)/./node_modules/v8n/dist/v8n.esm.js\");\n/* harmony import */ var colord__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! colord */ \"(ssr)/./node_modules/colord/index.mjs\");\n/* harmony import */ var colord_plugins_names__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! colord/plugins/names */ \"(ssr)/./node_modules/colord/plugins/names.mjs\");\n/* harmony import */ var dequal_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal/lite */ \"(ssr)/./node_modules/dequal/lite/index.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_colorful__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-colorful */ \"(ssr)/./node_modules/react-colorful/dist/index.mjs\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zustand/shallow */ \"(ssr)/./node_modules/zustand/esm/shallow.js\");\n/* harmony import */ var react_dropzone__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-dropzone */ \"(ssr)/./node_modules/react-dropzone/dist/es/index.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/zustand/esm/index.js\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! zustand/middleware */ \"(ssr)/./node_modules/zustand/esm/middleware.js\");\n/* harmony import */ var merge_value__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! merge-value */ \"(ssr)/./node_modules/merge-value/index.js\");\n/* harmony import */ var merge_value__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(merge_value__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst join = (...args)=>args.filter(Boolean).join(\".\");\nfunction getKeyPath(path) {\n    const dir = path.split(\".\");\n    return [\n        dir.pop(),\n        dir.join(\".\") || undefined\n    ];\n}\nfunction getValuesForPaths(data, paths) {\n    return Object.entries((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.p)(data, paths)).reduce((acc, [, { value, disabled, key }])=>{\n        acc[key] = disabled ? undefined : value;\n        return acc;\n    }, {});\n}\nfunction useCompareMemoize(value, deep) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    const compare = deep ? dequal_lite__WEBPACK_IMPORTED_MODULE_2__.dequal : zustand_shallow__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\n    if (!compare(value, ref.current)) {\n        ref.current = value;\n    }\n    return ref.current;\n}\nfunction useDeepMemo(fn, deps) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(fn, useCompareMemoize(deps, true));\n}\nfunction useToggle(toggled) {\n    const wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    const contentRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    const firstRender = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useLayoutEffect)(()=>{\n        if (!toggled) {\n            wrapperRef.current.style.height = \"0px\";\n            wrapperRef.current.style.overflow = \"hidden\";\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        if (firstRender.current) {\n            firstRender.current = false;\n            return;\n        }\n        let timeout;\n        const ref = wrapperRef.current;\n        const fixHeight = ()=>{\n            if (toggled) {\n                ref.style.removeProperty(\"height\");\n                ref.style.removeProperty(\"overflow\");\n                contentRef.current.scrollIntoView({\n                    behavior: \"smooth\",\n                    block: \"nearest\"\n                });\n            }\n        };\n        ref.addEventListener(\"transitionend\", fixHeight, {\n            once: true\n        });\n        const { height } = contentRef.current.getBoundingClientRect();\n        ref.style.height = height + \"px\";\n        if (!toggled) {\n            ref.style.overflow = \"hidden\";\n            timeout = window.setTimeout(()=>ref.style.height = \"0px\", 50);\n        }\n        return ()=>{\n            ref.removeEventListener(\"transitionend\", fixHeight);\n            clearTimeout(timeout);\n        };\n    }, [\n        toggled\n    ]);\n    return {\n        wrapperRef,\n        contentRef\n    };\n}\nconst useVisiblePaths = (store)=>{\n    const [paths, setPaths] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(store.getVisiblePaths());\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        setPaths(store.getVisiblePaths());\n        const unsub = store.useStore.subscribe(store.getVisiblePaths, setPaths, {\n            equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n        });\n        return ()=>unsub();\n    }, [\n        store\n    ]);\n    return paths;\n};\nfunction useValuesForPath(store, paths, initialData) {\n    const valuesForPath = store.useStore((s)=>{\n        const data = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, initialData), s.data);\n        return getValuesForPaths(data, paths);\n    }, zustand_shallow__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n    return valuesForPath;\n}\nfunction usePopin(margin = 3) {\n    const popinRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    const wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    const [shown, setShow] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const show = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(()=>setShow(true), []);\n    const hide = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(()=>setShow(false), []);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useLayoutEffect)(()=>{\n        if (shown) {\n            const { bottom, top, left } = popinRef.current.getBoundingClientRect();\n            const { height } = wrapperRef.current.getBoundingClientRect();\n            const direction = bottom + height > window.innerHeight - 40 ? \"up\" : \"down\";\n            wrapperRef.current.style.position = \"fixed\";\n            wrapperRef.current.style.zIndex = \"10000\";\n            wrapperRef.current.style.left = left + \"px\";\n            if (direction === \"down\") wrapperRef.current.style.top = bottom + margin + \"px\";\n            else wrapperRef.current.style.bottom = window.innerHeight - top + margin + \"px\";\n        }\n    }, [\n        margin,\n        shown\n    ]);\n    return {\n        popinRef,\n        wrapperRef,\n        shown,\n        show,\n        hide\n    };\n}\n(0,colord__WEBPACK_IMPORTED_MODULE_7__.extend)([\n    colord_plugins_names__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n]);\nconst convertMap = {\n    rgb: \"toRgb\",\n    hsl: \"toHsl\",\n    hsv: \"toHsv\",\n    hex: \"toHex\"\n};\nv8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"].extend({\n    color: ()=>(value)=>(0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(value).isValid()\n});\nconst schema$2 = (o)=>(0,v8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().color().test(o);\nfunction convert(color, { format, hasAlpha, isString }) {\n    const convertFn = convertMap[format] + (isString && format !== \"hex\" ? \"String\" : \"\");\n    const result = color[convertFn]();\n    return typeof result === \"object\" && !hasAlpha ? (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.o)(result, [\n        \"a\"\n    ]) : result;\n}\nconst sanitize$2 = (v, settings)=>{\n    const color = (0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(v);\n    if (!color.isValid()) throw Error(\"Invalid color\");\n    return convert(color, settings);\n};\nconst format$1 = (v, settings)=>{\n    return convert((0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(v), (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, settings), {}, {\n        isString: true,\n        format: \"hex\"\n    }));\n};\nconst normalize$3 = ({ value })=>{\n    const _f = (0,colord__WEBPACK_IMPORTED_MODULE_7__.getFormat)(value);\n    const format = _f === \"name\" ? \"hex\" : _f;\n    const hasAlpha = typeof value === \"object\" ? \"a\" in value : _f === \"hex\" && value.length === 8 || /^(rgba)|(hsla)|(hsva)/.test(value);\n    const settings = {\n        format,\n        hasAlpha,\n        isString: typeof value === \"string\"\n    };\n    return {\n        value: sanitize$2(value, settings),\n        settings\n    };\n};\nvar props$2 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema$2,\n    sanitize: sanitize$2,\n    format: format$1,\n    normalize: normalize$3\n});\nconst ColorPreview = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    position: \"relative\",\n    boxSizing: \"border-box\",\n    borderRadius: \"$sm\",\n    overflow: \"hidden\",\n    cursor: \"pointer\",\n    height: \"$rowHeight\",\n    width: \"$rowHeight\",\n    backgroundColor: \"#fff\",\n    backgroundImage: `url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill-opacity=\".05\"><path d=\"M8 0h8v8H8zM0 8h8v8H0z\"/></svg>')`,\n    $inputStyle: \"\",\n    $hover: \"\",\n    zIndex: 1,\n    variants: {\n        active: {\n            true: {\n                $inputStyle: \"$accent1\"\n            }\n        }\n    },\n    \"&::before\": {\n        content: '\"\"',\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        right: 0,\n        left: 0,\n        backgroundColor: \"currentColor\",\n        zIndex: 1\n    }\n});\nconst PickerContainer = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    position: \"relative\",\n    display: \"grid\",\n    gridTemplateColumns: \"$sizes$rowHeight auto\",\n    columnGap: \"$colGap\",\n    alignItems: \"center\"\n});\nconst PickerWrapper = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    width: \"$colorPickerWidth\",\n    height: \"$colorPickerHeight\",\n    \".react-colorful\": {\n        width: \"100%\",\n        height: \"100%\",\n        boxShadow: \"$level2\",\n        cursor: \"crosshair\"\n    },\n    \".react-colorful__saturation\": {\n        borderRadius: \"$sm $sm 0 0\"\n    },\n    \".react-colorful__alpha, .react-colorful__hue\": {\n        height: 10\n    },\n    \".react-colorful__last-control\": {\n        borderRadius: \"0 0 $sm $sm\"\n    },\n    \".react-colorful__pointer\": {\n        height: 12,\n        width: 12\n    }\n});\nfunction convertToRgb(value, format) {\n    return format !== \"rgb\" ? (0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(value).toRgb() : value;\n}\nfunction Color({ value, displayValue, settings, onUpdate }) {\n    const { emitOnEditStart, emitOnEditEnd } = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    const { format, hasAlpha } = settings;\n    const { popinRef, wrapperRef, shown, show, hide } = usePopin();\n    const timer = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(0);\n    const [initialRgb, setInitialRgb] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(()=>convertToRgb(value, format));\n    const ColorPicker = hasAlpha ? react_colorful__WEBPACK_IMPORTED_MODULE_9__.RgbaColorPicker : react_colorful__WEBPACK_IMPORTED_MODULE_9__.RgbColorPicker;\n    const showPicker = ()=>{\n        setInitialRgb(convertToRgb(value, format));\n        show();\n        emitOnEditStart();\n    };\n    const hidePicker = ()=>{\n        hide();\n        emitOnEditEnd();\n        window.clearTimeout(timer.current);\n    };\n    const hideAfterDelay = ()=>{\n        timer.current = window.setTimeout(hidePicker, 500);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        return ()=>window.clearTimeout(timer.current);\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement((react__WEBPACK_IMPORTED_MODULE_4___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(ColorPreview, {\n        ref: popinRef,\n        active: shown,\n        onClick: ()=>showPicker(),\n        style: {\n            color: displayValue\n        }\n    }), shown && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.P, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.O, {\n        onPointerUp: hidePicker\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(PickerWrapper, {\n        ref: wrapperRef,\n        onMouseEnter: ()=>window.clearTimeout(timer.current),\n        onMouseLeave: (e)=>e.buttons === 0 && hideAfterDelay()\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(ColorPicker, {\n        color: initialRgb,\n        onChange: onUpdate\n    }))));\n}\nfunction ColorComponent() {\n    const { value, displayValue, label, onChange, onUpdate, settings } = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(PickerContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Color, {\n        value: value,\n        displayValue: displayValue,\n        onChange: onChange,\n        onUpdate: onUpdate,\n        settings: settings\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V, {\n        value: displayValue,\n        onChange: onChange,\n        onUpdate: onUpdate\n    })));\n}\nvar color = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: ColorComponent\n}, props$2));\nfunction Vector3dComponent() {\n    const { label, displayValue, onUpdate, settings } = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a, {\n        value: displayValue,\n        settings: settings,\n        onUpdate: onUpdate\n    }));\n}\nvar vector3d = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: Vector3dComponent\n}, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.g)([\n    \"x\",\n    \"y\",\n    \"z\"\n])));\nconst JoystickTrigger = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    position: \"relative\",\n    backgroundColor: \"$elevation3\",\n    borderRadius: \"$sm\",\n    cursor: \"pointer\",\n    height: \"$rowHeight\",\n    width: \"$rowHeight\",\n    touchAction: \"none\",\n    $draggable: \"\",\n    $hover: \"\",\n    \"&:active\": {\n        cursor: \"none\"\n    },\n    \"&::after\": {\n        content: '\"\"',\n        backgroundColor: \"$accent2\",\n        height: 4,\n        width: 4,\n        borderRadius: 2\n    }\n});\nconst JoystickPlayground = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    width: \"$joystickWidth\",\n    height: \"$joystickHeight\",\n    borderRadius: \"$sm\",\n    boxShadow: \"$level2\",\n    position: \"fixed\",\n    zIndex: 10000,\n    overflow: \"hidden\",\n    $draggable: \"\",\n    transform: \"translate(-50%, -50%)\",\n    variants: {\n        isOutOfBounds: {\n            true: {\n                backgroundColor: \"$elevation1\"\n            },\n            false: {\n                backgroundColor: \"$elevation3\"\n            }\n        }\n    },\n    \"> div\": {\n        position: \"absolute\",\n        $flexCenter: \"\",\n        borderStyle: \"solid\",\n        borderWidth: 1,\n        borderColor: \"$highlight1\",\n        backgroundColor: \"$elevation3\",\n        width: \"80%\",\n        height: \"80%\",\n        \"&::after,&::before\": {\n            content: '\"\"',\n            position: \"absolute\",\n            zindex: 10,\n            backgroundColor: \"$highlight1\"\n        },\n        \"&::before\": {\n            width: \"100%\",\n            height: 1\n        },\n        \"&::after\": {\n            height: \"100%\",\n            width: 1\n        }\n    },\n    \"> span\": {\n        position: \"relative\",\n        zindex: 100,\n        width: 10,\n        height: 10,\n        backgroundColor: \"$accent2\",\n        borderRadius: \"50%\"\n    }\n});\nfunction Joystick({ value, settings, onUpdate }) {\n    const timeout = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    const outOfBoundsX = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(0);\n    const outOfBoundsY = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(0);\n    const stepMultiplier = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(1);\n    const [joystickShown, setShowJoystick] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const [isOutOfBounds, setIsOutOfBounds] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const [spanRef, set] = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)();\n    const joystickeRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    const playgroundRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useLayoutEffect)(()=>{\n        if (joystickShown) {\n            const { top, left, width, height } = joystickeRef.current.getBoundingClientRect();\n            playgroundRef.current.style.left = left + width / 2 + \"px\";\n            playgroundRef.current.style.top = top + height / 2 + \"px\";\n        }\n    }, [\n        joystickShown\n    ]);\n    const { keys: [v1, v2], joystick } = settings;\n    const yFactor = joystick === \"invertY\" ? 1 : -1;\n    const { [v1]: { step: stepV1 }, [v2]: { step: stepV2 } } = settings;\n    const wpx = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"sizes\", \"joystickWidth\");\n    const hpx = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"sizes\", \"joystickHeight\");\n    const w = parseFloat(wpx) * 0.8 / 2;\n    const h = parseFloat(hpx) * 0.8 / 2;\n    const startOutOfBounds = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(()=>{\n        if (timeout.current) return;\n        setIsOutOfBounds(true);\n        if (outOfBoundsX.current) set({\n            x: outOfBoundsX.current * w\n        });\n        if (outOfBoundsY.current) set({\n            y: outOfBoundsY.current * -h\n        });\n        timeout.current = window.setInterval(()=>{\n            onUpdate((v)=>{\n                const incX = stepV1 * outOfBoundsX.current * stepMultiplier.current;\n                const incY = yFactor * stepV2 * outOfBoundsY.current * stepMultiplier.current;\n                return Array.isArray(v) ? {\n                    [v1]: v[0] + incX,\n                    [v2]: v[1] + incY\n                } : {\n                    [v1]: v[v1] + incX,\n                    [v2]: v[v2] + incY\n                };\n            });\n        }, 16);\n    }, [\n        w,\n        h,\n        onUpdate,\n        set,\n        stepV1,\n        stepV2,\n        v1,\n        v2,\n        yFactor\n    ]);\n    const endOutOfBounds = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(()=>{\n        window.clearTimeout(timeout.current);\n        timeout.current = undefined;\n        setIsOutOfBounds(false);\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        function setStepMultiplier(event) {\n            stepMultiplier.current = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.m)(event);\n        }\n        window.addEventListener(\"keydown\", setStepMultiplier);\n        window.addEventListener(\"keyup\", setStepMultiplier);\n        return ()=>{\n            window.clearTimeout(timeout.current);\n            window.removeEventListener(\"keydown\", setStepMultiplier);\n            window.removeEventListener(\"keyup\", setStepMultiplier);\n        };\n    }, []);\n    const bind = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(({ first, active, delta: [dx, dy], movement: [mx, my] })=>{\n        if (first) setShowJoystick(true);\n        const _x = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.h)(mx, -w, w);\n        const _y = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.h)(my, -h, h);\n        outOfBoundsX.current = Math.abs(mx) > Math.abs(_x) ? Math.sign(mx - _x) : 0;\n        outOfBoundsY.current = Math.abs(my) > Math.abs(_y) ? Math.sign(_y - my) : 0;\n        let newX = value[v1];\n        let newY = value[v2];\n        if (active) {\n            if (!outOfBoundsX.current) {\n                newX += dx * stepV1 * stepMultiplier.current;\n                set({\n                    x: _x\n                });\n            }\n            if (!outOfBoundsY.current) {\n                newY -= yFactor * dy * stepV2 * stepMultiplier.current;\n                set({\n                    y: _y\n                });\n            }\n            if (outOfBoundsX.current || outOfBoundsY.current) startOutOfBounds();\n            else endOutOfBounds();\n            onUpdate({\n                [v1]: newX,\n                [v2]: newY\n            });\n        } else {\n            setShowJoystick(false);\n            outOfBoundsX.current = 0;\n            outOfBoundsY.current = 0;\n            set({\n                x: 0,\n                y: 0\n            });\n            endOutOfBounds();\n        }\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(JoystickTrigger, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        ref: joystickeRef\n    }, bind()), joystickShown && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.P, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(JoystickPlayground, {\n        ref: playgroundRef,\n        isOutOfBounds: isOutOfBounds\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"div\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"span\", {\n        ref: spanRef\n    }))));\n}\nconst Container$1 = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    display: \"grid\",\n    columnGap: \"$colGap\",\n    variants: {\n        withJoystick: {\n            true: {\n                gridTemplateColumns: \"$sizes$rowHeight auto\"\n            },\n            false: {\n                gridTemplateColumns: \"auto\"\n            }\n        }\n    }\n});\nfunction Vector2dComponent() {\n    const { label, displayValue, onUpdate, settings } = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Container$1, {\n        withJoystick: !!settings.joystick\n    }, settings.joystick && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Joystick, {\n        value: displayValue,\n        settings: settings,\n        onUpdate: onUpdate\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a, {\n        value: displayValue,\n        settings: settings,\n        onUpdate: onUpdate\n    })));\n}\nconst _excluded$7 = [\n    \"joystick\"\n];\nconst plugin = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.g)([\n    \"x\",\n    \"y\"\n]);\nconst normalize$2 = (_ref)=>{\n    let { joystick = true } = _ref, input = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$7);\n    const { value, settings } = plugin.normalize(input);\n    return {\n        value,\n        settings: (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, settings), {}, {\n            joystick\n        })\n    };\n};\nvar vector2d = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: Vector2dComponent\n}, plugin), {}, {\n    normalize: normalize$2\n}));\nconst sanitize$1 = (v)=>{\n    if (v === undefined) return undefined;\n    if (v instanceof File) {\n        try {\n            return URL.createObjectURL(v);\n        } catch (e) {\n            return undefined;\n        }\n    }\n    if (typeof v === \"string\" && v.indexOf(\"blob:\") === 0) return v;\n    throw Error(`Invalid image format [undefined | blob | File].`);\n};\nconst schema$1 = (_o, s)=>typeof s === \"object\" && \"image\" in s;\nconst normalize$1 = ({ image })=>{\n    return {\n        value: image\n    };\n};\nvar props$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    sanitize: sanitize$1,\n    schema: schema$1,\n    normalize: normalize$1\n});\nconst ImageContainer = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    position: \"relative\",\n    display: \"grid\",\n    gridTemplateColumns: \"$sizes$rowHeight auto 20px\",\n    columnGap: \"$colGap\",\n    alignItems: \"center\"\n});\nconst DropZone = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    overflow: \"hidden\",\n    height: \"$rowHeight\",\n    background: \"$elevation3\",\n    textAlign: \"center\",\n    color: \"inherit\",\n    borderRadius: \"$sm\",\n    outline: \"none\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    $inputStyle: \"\",\n    $hover: \"\",\n    $focusWithin: \"\",\n    $active: \"$accent1 $elevation1\",\n    variants: {\n        isDragAccept: {\n            true: {\n                $inputStyle: \"$accent1\",\n                backgroundColor: \"$elevation1\"\n            }\n        }\n    }\n});\nconst ImagePreview = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    boxSizing: \"border-box\",\n    borderRadius: \"$sm\",\n    height: \"$rowHeight\",\n    width: \"$rowHeight\",\n    $inputStyle: \"\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    variants: {\n        hasImage: {\n            true: {\n                cursor: \"pointer\",\n                $hover: \"\",\n                $active: \"\"\n            }\n        }\n    }\n});\nconst ImageLargePreview = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    width: \"$imagePreviewWidth\",\n    height: \"$imagePreviewHeight\",\n    borderRadius: \"$sm\",\n    boxShadow: \"$level2\",\n    pointerEvents: \"none\",\n    $inputStyle: \"\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\"\n});\nconst Instructions = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    fontSize: \"0.8em\",\n    height: \"100%\",\n    padding: \"$rowGap $md\"\n});\nconst Remove = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    top: \"0\",\n    right: \"0\",\n    marginRight: \"$sm\",\n    height: \"100%\",\n    cursor: \"pointer\",\n    variants: {\n        disabled: {\n            true: {\n                color: \"$elevation3\",\n                cursor: \"default\"\n            }\n        }\n    },\n    \"&::after,&::before\": {\n        content: '\"\"',\n        position: \"absolute\",\n        height: 2,\n        width: 10,\n        borderRadius: 1,\n        backgroundColor: \"currentColor\"\n    },\n    \"&::after\": {\n        transform: \"rotate(45deg)\"\n    },\n    \"&::before\": {\n        transform: \"rotate(-45deg)\"\n    }\n});\nfunction ImageComponent() {\n    const { label, value, onUpdate, disabled } = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    const { popinRef, wrapperRef, shown, show, hide } = usePopin();\n    const onDrop = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((acceptedFiles)=>{\n        if (acceptedFiles.length) onUpdate(acceptedFiles[0]);\n    }, [\n        onUpdate\n    ]);\n    const clear = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((e)=>{\n        e.stopPropagation();\n        onUpdate(undefined);\n    }, [\n        onUpdate\n    ]);\n    const { getRootProps, getInputProps, isDragAccept } = (0,react_dropzone__WEBPACK_IMPORTED_MODULE_10__.useDropzone)({\n        maxFiles: 1,\n        accept: \"image/*\",\n        onDrop,\n        disabled\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(ImageContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(ImagePreview, {\n        ref: popinRef,\n        hasImage: !!value,\n        onPointerDown: ()=>!!value && show(),\n        onPointerUp: hide,\n        style: {\n            backgroundImage: value ? `url(${value})` : \"none\"\n        }\n    }), shown && !!value && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.P, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.O, {\n        onPointerUp: hide,\n        style: {\n            cursor: \"pointer\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(ImageLargePreview, {\n        ref: wrapperRef,\n        style: {\n            backgroundImage: `url(${value})`\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(DropZone, getRootProps({\n        isDragAccept\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"input\", getInputProps()), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Instructions, null, isDragAccept ? \"drop image\" : \"click or drop\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Remove, {\n        onClick: clear,\n        disabled: !value\n    })));\n}\nvar image = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: ImageComponent\n}, props$1));\nconst number = (0,v8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().number();\nconst schema = (o, s)=>(0,v8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().array().length(2).every.number().test(o) && (0,v8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().schema({\n        min: number,\n        max: number\n    }).test(s);\nconst format = (v)=>({\n        min: v[0],\n        max: v[1]\n    });\nconst sanitize = (value, { bounds: [MIN, MAX] }, prevValue)=>{\n    const _value = Array.isArray(value) ? format(value) : value;\n    const _newValue = {\n        min: prevValue[0],\n        max: prevValue[1]\n    };\n    const { min, max } = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, _newValue), _value);\n    return [\n        (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.h)(Number(min), MIN, Math.max(MIN, max)),\n        (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.h)(Number(max), Math.min(MAX, min), MAX)\n    ];\n};\nconst normalize = ({ value, min, max })=>{\n    const boundsSettings = {\n        min,\n        max\n    };\n    const _settings = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.n)(format(value), {\n        min: boundsSettings,\n        max: boundsSettings\n    });\n    const bounds = [\n        min,\n        max\n    ];\n    const settings = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, _settings), {}, {\n        bounds\n    });\n    const _value = sanitize(format(value), settings, value);\n    return {\n        value: _value,\n        settings\n    };\n};\nvar props = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema,\n    format: format,\n    sanitize: sanitize,\n    normalize: normalize\n});\nconst _excluded$6 = [\n    \"value\",\n    \"bounds\",\n    \"onDrag\"\n], _excluded2$1 = [\n    \"bounds\"\n];\nconst Container = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    display: \"grid\",\n    columnGap: \"$colGap\",\n    gridTemplateColumns: \"auto calc($sizes$numberInputMinWidth * 2 + $space$rowGap)\"\n});\nfunction IntervalSlider(_ref) {\n    let { value, bounds: [min, max], onDrag } = _ref, settings = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$6);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    const minScrubberRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    const maxScrubberRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    const rangeWidth = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(0);\n    const scrubberWidth = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"sizes\", \"scrubberWidth\");\n    const bind = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(({ event, first, xy: [x], movement: [mx], memo: _memo = {} })=>{\n        if (first) {\n            const { width, left } = ref.current.getBoundingClientRect();\n            rangeWidth.current = width - parseFloat(scrubberWidth);\n            const targetIsScrub = (event === null || event === void 0 ? void 0 : event.target) === minScrubberRef.current || (event === null || event === void 0 ? void 0 : event.target) === maxScrubberRef.current;\n            _memo.pos = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.j)((x - left) / width, min, max);\n            const delta = Math.abs(_memo.pos - value.min) - Math.abs(_memo.pos - value.max);\n            _memo.key = delta < 0 || delta === 0 && _memo.pos <= value.min ? \"min\" : \"max\";\n            if (targetIsScrub) _memo.pos = value[_memo.key];\n        }\n        const newValue = _memo.pos + (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.j)(mx / rangeWidth.current, 0, max - min);\n        onDrag({\n            [_memo.key]: (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.k)(newValue, settings[_memo.key])\n        });\n        return _memo;\n    });\n    const minStyle = `calc(${(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.r)(value.min, min, max)} * (100% - ${scrubberWidth} - 8px) + 4px)`;\n    const maxStyle = `calc(${1 - (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.r)(value.max, min, max)} * (100% - ${scrubberWidth} - 8px) + 4px)`;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.l, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        ref: ref\n    }, bind()), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.q, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.I, {\n        style: {\n            left: minStyle,\n            right: maxStyle\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.S, {\n        position: \"left\",\n        ref: minScrubberRef,\n        style: {\n            left: minStyle\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.S, {\n        position: \"right\",\n        ref: maxScrubberRef,\n        style: {\n            right: maxStyle\n        }\n    }));\n}\nfunction IntervalComponent() {\n    const { label, displayValue, onUpdate, settings } = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    const _settings = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(settings, _excluded2$1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement((react__WEBPACK_IMPORTED_MODULE_4___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Container, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(IntervalSlider, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        value: displayValue\n    }, settings, {\n        onDrag: onUpdate\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a, {\n        value: displayValue,\n        settings: _settings,\n        onUpdate: onUpdate,\n        innerLabelTrim: 0\n    }))));\n}\nvar interval = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: IntervalComponent\n}, props));\nconst createEventEmitter = ()=>{\n    const listenerMapping = new Map();\n    return {\n        on: (topic, listener)=>{\n            let listeners = listenerMapping.get(topic);\n            if (listeners === undefined) {\n                listeners = new Set();\n                listenerMapping.set(topic, listeners);\n            }\n            listeners.add(listener);\n        },\n        off: (topic, listener)=>{\n            const listeners = listenerMapping.get(topic);\n            if (listeners === undefined) {\n                return;\n            }\n            listeners.delete(listener);\n            if (listeners.size === 0) {\n                listenerMapping.delete(topic);\n            }\n        },\n        emit: (topic, ...args)=>{\n            const listeners = listenerMapping.get(topic);\n            if (listeners === undefined) {\n                return;\n            }\n            for (const listener of listeners){\n                listener(...args);\n            }\n        }\n    };\n};\nconst _excluded$5 = [\n    \"type\",\n    \"value\"\n], _excluded2 = [\n    \"onChange\",\n    \"transient\",\n    \"onEditStart\",\n    \"onEditEnd\"\n];\nconst Store = function Store() {\n    const store = (0,zustand__WEBPACK_IMPORTED_MODULE_11__[\"default\"])((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_12__.subscribeWithSelector)(()=>({\n            data: {}\n        })));\n    const eventEmitter = createEventEmitter();\n    this.storeId = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.t)();\n    this.useStore = store;\n    const folders = {};\n    const orderedPaths = new Set();\n    this.getVisiblePaths = ()=>{\n        const data = this.getData();\n        const paths = Object.keys(data);\n        const hiddenFolders = [];\n        Object.entries(folders).forEach(([path, settings])=>{\n            if (settings.render && paths.some((p)=>p.indexOf(path) === 0) && !settings.render(this.get)) hiddenFolders.push(path + \".\");\n        });\n        const visiblePaths = [];\n        orderedPaths.forEach((path)=>{\n            if (path in data && data[path].__refCount > 0 && hiddenFolders.every((p)=>path.indexOf(p) === -1) && (!data[path].render || data[path].render(this.get))) {\n                visiblePaths.push(path);\n            }\n        });\n        return visiblePaths;\n    };\n    this.setOrderedPaths = (newPaths)=>{\n        newPaths.forEach((p)=>orderedPaths.add(p));\n    };\n    this.orderPaths = (paths)=>{\n        this.setOrderedPaths(paths);\n        return paths;\n    };\n    this.disposePaths = (paths)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            paths.forEach((path)=>{\n                if (path in data) {\n                    const input = data[path];\n                    input.__refCount--;\n                    if (input.__refCount === 0 && input.type in _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v) {\n                        delete data[path];\n                    }\n                }\n            });\n            return {\n                data\n            };\n        });\n    };\n    this.dispose = ()=>{\n        store.setState(()=>{\n            return {\n                data: {}\n            };\n        });\n    };\n    this.getFolderSettings = (path)=>{\n        return folders[path] || {};\n    };\n    this.getData = ()=>{\n        return store.getState().data;\n    };\n    this.addData = (newData, override)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            Object.entries(newData).forEach(([path, newInputData])=>{\n                let input = data[path];\n                if (!!input) {\n                    const { type, value } = newInputData, rest = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(newInputData, _excluded$5);\n                    if (type !== input.type) {\n                        (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.INPUT_TYPE_OVERRIDE, type);\n                    } else {\n                        if (input.__refCount === 0 || override) {\n                            Object.assign(input, rest);\n                        }\n                        input.__refCount++;\n                    }\n                } else {\n                    data[path] = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, newInputData), {}, {\n                        __refCount: 1\n                    });\n                }\n            });\n            return {\n                data\n            };\n        });\n    };\n    this.setValueAtPath = (path, value, fromPanel)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.y)(data[path], value, path, this, fromPanel);\n            return {\n                data\n            };\n        });\n    };\n    this.setSettingsAtPath = (path, settings)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            data[path].settings = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, data[path].settings), settings);\n            return {\n                data\n            };\n        });\n    };\n    this.disableInputAtPath = (path, flag)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            data[path].disabled = flag;\n            return {\n                data\n            };\n        });\n    };\n    this.set = (values, fromPanel)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            Object.entries(values).forEach(([path, value])=>{\n                try {\n                    (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.y)(data[path], value, undefined, undefined, fromPanel);\n                } catch (e) {\n                    if (true) {\n                        console.warn(`[This message will only show in development]: \\`set\\` for path ${path} has failed.`, e);\n                    }\n                }\n            });\n            return {\n                data\n            };\n        });\n    };\n    this.getInput = (path)=>{\n        try {\n            return this.getData()[path];\n        } catch (e) {\n            (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.PATH_DOESNT_EXIST, path);\n        }\n    };\n    this.get = (path)=>{\n        var _this$getInput;\n        return (_this$getInput = this.getInput(path)) === null || _this$getInput === void 0 ? void 0 : _this$getInput.value;\n    };\n    this.emitOnEditStart = (path)=>{\n        eventEmitter.emit(`onEditStart:${path}`, this.get(path), path, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, this.getInput(path)), {}, {\n            get: this.get\n        }));\n    };\n    this.emitOnEditEnd = (path)=>{\n        eventEmitter.emit(`onEditEnd:${path}`, this.get(path), path, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, this.getInput(path)), {}, {\n            get: this.get\n        }));\n    };\n    this.subscribeToEditStart = (path, listener)=>{\n        const _path = `onEditStart:${path}`;\n        eventEmitter.on(_path, listener);\n        return ()=>eventEmitter.off(_path, listener);\n    };\n    this.subscribeToEditEnd = (path, listener)=>{\n        const _path = `onEditEnd:${path}`;\n        eventEmitter.on(_path, listener);\n        return ()=>eventEmitter.off(_path, listener);\n    };\n    const _getDataFromSchema = (schema, rootPath, mappedPaths)=>{\n        const data = {};\n        Object.entries(schema).forEach(([key, rawInput])=>{\n            if (key === \"\") return (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.EMPTY_KEY);\n            let newPath = join(rootPath, key);\n            if (rawInput.type === _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.FOLDER) {\n                const newData = _getDataFromSchema(rawInput.schema, newPath, mappedPaths);\n                Object.assign(data, newData);\n                if (!(newPath in folders)) folders[newPath] = rawInput.settings;\n            } else if (key in mappedPaths) {\n                (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.DUPLICATE_KEYS, key, newPath, mappedPaths[key].path);\n            } else {\n                const normalizedInput = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.z)(rawInput, key, newPath, data);\n                if (normalizedInput) {\n                    const { type, options, input } = normalizedInput;\n                    const { onChange, transient, onEditStart, onEditEnd } = options, _options = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(options, _excluded2);\n                    data[newPath] = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                        type\n                    }, _options), input), {}, {\n                        fromPanel: true\n                    });\n                    mappedPaths[key] = {\n                        path: newPath,\n                        onChange,\n                        transient,\n                        onEditStart,\n                        onEditEnd\n                    };\n                } else {\n                    (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.UNKNOWN_INPUT, newPath, rawInput);\n                }\n            }\n        });\n        return data;\n    };\n    this.getDataFromSchema = (schema)=>{\n        const mappedPaths = {};\n        const data = _getDataFromSchema(schema, \"\", mappedPaths);\n        return [\n            data,\n            mappedPaths\n        ];\n    };\n};\nconst levaStore = new Store();\nfunction useCreateStore() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>new Store(), []);\n}\nif (false) {}\nconst defaultSettings$2 = {\n    collapsed: false\n};\nfunction folder(schema, settings) {\n    return {\n        type: _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.FOLDER,\n        schema,\n        settings: (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, defaultSettings$2), settings)\n    };\n}\nconst defaultSettings$1 = {\n    disabled: false\n};\nfunction button(onClick, settings) {\n    return {\n        type: _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.BUTTON,\n        onClick,\n        settings: (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, defaultSettings$1), settings)\n    };\n}\nfunction buttonGroup(opts) {\n    return {\n        type: _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.BUTTON_GROUP,\n        opts\n    };\n}\nconst defaultSettings = {\n    graph: false,\n    interval: 100\n};\nfunction monitor(objectOrFn, settings) {\n    return {\n        type: _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.MONITOR,\n        objectOrFn,\n        settings: (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, defaultSettings), settings)\n    };\n}\nconst isInput = (v)=>\"__levaInput\" in v;\nconst buildTree = (paths, filter)=>{\n    const tree = {};\n    const _filter = filter ? filter.toLowerCase() : null;\n    paths.forEach((path)=>{\n        const [valueKey, folderPath] = getKeyPath(path);\n        if (!_filter || valueKey.toLowerCase().indexOf(_filter) > -1) {\n            merge_value__WEBPACK_IMPORTED_MODULE_5___default()(tree, folderPath, {\n                [valueKey]: {\n                    __levaInput: true,\n                    path\n                }\n            });\n        }\n    });\n    return tree;\n};\nconst _excluded$4 = [\n    \"type\",\n    \"label\",\n    \"path\",\n    \"valueKey\",\n    \"value\",\n    \"settings\",\n    \"setValue\",\n    \"disabled\"\n];\nfunction ControlInput(_ref) {\n    let { type, label, path, valueKey, value, settings, setValue, disabled } = _ref, rest = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$4);\n    const { displayValue, onChange, onUpdate } = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.A)({\n        type,\n        value,\n        settings,\n        setValue\n    });\n    const Input = _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.B[type].component;\n    if (!Input) {\n        (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.NO_COMPONENT_FOR_TYPE, type, path);\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.C.Provider, {\n        value: (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n            key: valueKey,\n            path,\n            id: \"\" + path,\n            label,\n            displayValue,\n            value,\n            onChange,\n            onUpdate,\n            settings,\n            setValue,\n            disabled\n        }, rest)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.D, {\n        disabled: disabled\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Input, null)));\n}\nconst StyledButton = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"button\", {\n    display: \"block\",\n    $reset: \"\",\n    fontWeight: \"$button\",\n    height: \"$rowHeight\",\n    borderStyle: \"none\",\n    borderRadius: \"$sm\",\n    backgroundColor: \"$elevation1\",\n    color: \"$highlight1\",\n    \"&:not(:disabled)\": {\n        color: \"$highlight3\",\n        backgroundColor: \"$accent2\",\n        cursor: \"pointer\",\n        $hover: \"$accent3\",\n        $active: \"$accent3 $accent1\",\n        $focus: \"\"\n    }\n});\nfunction Button({ onClick, settings, label }) {\n    const store = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(StyledButton, {\n        disabled: settings.disabled,\n        onClick: ()=>onClick(store.get)\n    }, label));\n}\nconst StyledButtonGroup = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flex: \"\",\n    justifyContent: \"flex-end\",\n    gap: \"$colGap\"\n});\nconst StyledButtonGroupButton = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"button\", {\n    $reset: \"\",\n    cursor: \"pointer\",\n    borderRadius: \"$xs\",\n    \"&:hover\": {\n        backgroundColor: \"$elevation3\"\n    }\n});\nconst getOpts = ({ label: _label, opts: _opts })=>{\n    let label = typeof _label === \"string\" ? _label.trim() === \"\" ? null : _label : _label;\n    let opts = _opts;\n    if (typeof _opts.opts === \"object\") {\n        if (opts.label !== undefined) {\n            label = _opts.label;\n        }\n        opts = _opts.opts;\n    }\n    return {\n        label,\n        opts: opts\n    };\n};\nfunction ButtonGroup(props) {\n    const { label, opts } = getOpts(props);\n    const store = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: !!label\n    }, label && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(StyledButtonGroup, null, Object.entries(opts).map(([label, onClick])=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(StyledButtonGroupButton, {\n            key: label,\n            onClick: ()=>onClick(store.get)\n        }, label))));\n}\nconst Canvas = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"canvas\", {\n    height: \"$monitorHeight\",\n    width: \"100%\",\n    display: \"block\",\n    borderRadius: \"$sm\"\n});\nconst POINTS = 100;\nfunction push(arr, val) {\n    arr.push(val);\n    if (arr.length > POINTS) arr.shift();\n}\nconst MonitorCanvas = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_4__.forwardRef)(function({ initialValue }, ref) {\n    const accentColor = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"highlight3\");\n    const backgroundColor = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"elevation2\");\n    const fillColor = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"highlight1\");\n    const [gradientTop, gradientBottom] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>{\n        return [\n            (0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(fillColor).alpha(0.4).toRgbString(),\n            (0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(fillColor).alpha(0.1).toRgbString()\n        ];\n    }, [\n        fillColor\n    ]);\n    const points = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)([\n        initialValue\n    ]);\n    const min = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(initialValue);\n    const max = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(initialValue);\n    const raf = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    const drawPlot = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((_canvas, _ctx)=>{\n        if (!_canvas) return;\n        const { width, height } = _canvas;\n        const path = new Path2D();\n        const interval = width / POINTS;\n        const verticalPadding = height * 0.05;\n        for(let i = 0; i < points.current.length; i++){\n            const p = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.r)(points.current[i], min.current, max.current);\n            const x = interval * i;\n            const y = height - p * (height - verticalPadding * 2) - verticalPadding;\n            path.lineTo(x, y);\n        }\n        _ctx.clearRect(0, 0, width, height);\n        const gradientPath = new Path2D(path);\n        gradientPath.lineTo(interval * (points.current.length + 1), height);\n        gradientPath.lineTo(0, height);\n        gradientPath.lineTo(0, 0);\n        const gradient = _ctx.createLinearGradient(0, 0, 0, height);\n        gradient.addColorStop(0.0, gradientTop);\n        gradient.addColorStop(1.0, gradientBottom);\n        _ctx.fillStyle = gradient;\n        _ctx.fill(gradientPath);\n        _ctx.strokeStyle = backgroundColor;\n        _ctx.lineJoin = \"round\";\n        _ctx.lineWidth = 14;\n        _ctx.stroke(path);\n        _ctx.strokeStyle = accentColor;\n        _ctx.lineWidth = 2;\n        _ctx.stroke(path);\n    }, [\n        accentColor,\n        backgroundColor,\n        gradientTop,\n        gradientBottom\n    ]);\n    const [canvas, ctx] = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.F)(drawPlot);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useImperativeHandle)(ref, ()=>({\n            frame: (val)=>{\n                if (min.current === undefined || val < min.current) min.current = val;\n                if (max.current === undefined || val > max.current) max.current = val;\n                push(points.current, val);\n                raf.current = requestAnimationFrame(()=>drawPlot(canvas.current, ctx.current));\n            }\n        }), [\n        canvas,\n        ctx,\n        drawPlot\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>()=>cancelAnimationFrame(raf.current), []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Canvas, {\n        ref: canvas\n    });\n});\nconst parse = (val)=>Number.isFinite(val) ? val.toPrecision(2) : val.toString();\nconst MonitorLog = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_4__.forwardRef)(function({ initialValue }, ref) {\n    const [val, set] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(parse(initialValue));\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useImperativeHandle)(ref, ()=>({\n            frame: (v)=>set(parse(v))\n        }), []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"div\", null, val);\n});\nfunction getValue(o) {\n    return typeof o === \"function\" ? o() : o.current;\n}\nfunction Monitor({ label, objectOrFn, settings }) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    const initialValue = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(getValue(objectOrFn));\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        const timeout = window.setInterval(()=>{\n            var _ref$current;\n            if (document.hidden) return;\n            (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.frame(getValue(objectOrFn));\n        }, settings.interval);\n        return ()=>window.clearInterval(timeout);\n    }, [\n        objectOrFn,\n        settings.interval\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, {\n        align: \"top\"\n    }, label), settings.graph ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(MonitorCanvas, {\n        ref: ref,\n        initialValue: initialValue.current\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(MonitorLog, {\n        ref: ref,\n        initialValue: initialValue.current\n    }));\n}\nconst _excluded$3 = [\n    \"type\",\n    \"label\",\n    \"key\"\n];\nconst specialComponents = {\n    [_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.BUTTON]: Button,\n    [_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.BUTTON_GROUP]: ButtonGroup,\n    [_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.MONITOR]: Monitor\n};\nconst Control = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().memo(({ path })=>{\n    const [input, { set, setSettings, disable, storeId, emitOnEditStart, emitOnEditEnd }] = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.G)(path);\n    if (!input) return null;\n    const { type, label, key } = input, inputProps = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(input, _excluded$3);\n    if (type in _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.v) {\n        const SpecialInputForType = specialComponents[type];\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(SpecialInputForType, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n            label: label,\n            path: path\n        }, inputProps));\n    }\n    if (!(type in _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.B)) {\n        (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.H)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.UNSUPPORTED_INPUT, type, path);\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(ControlInput, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        key: storeId + path,\n        type: type,\n        label: label,\n        storeId: storeId,\n        path: path,\n        valueKey: key,\n        setValue: set,\n        setSettings: setSettings,\n        disable: disable,\n        emitOnEditStart: emitOnEditStart,\n        emitOnEditEnd: emitOnEditEnd\n    }, inputProps));\n});\nfunction FolderTitle({ toggle, toggled, name }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.J, {\n        onClick: ()=>toggle()\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.K, {\n        toggled: toggled\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"div\", null, name));\n}\nconst Folder = ({ name, path, tree })=>{\n    const store = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    const newPath = join(path, name);\n    const { collapsed, color } = store.getFolderSettings(newPath);\n    const [toggled, setToggle] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!collapsed);\n    const folderRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    const widgetColor = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"folderWidgetColor\");\n    const textColor = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"folderTextColor\");\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useLayoutEffect)(()=>{\n        folderRef.current.style.setProperty(\"--leva-colors-folderWidgetColor\", color || widgetColor);\n        folderRef.current.style.setProperty(\"--leva-colors-folderTextColor\", color || textColor);\n    }, [\n        color,\n        widgetColor,\n        textColor\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.Q, {\n        ref: folderRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(FolderTitle, {\n        name: name,\n        toggled: toggled,\n        toggle: ()=>setToggle((t)=>!t)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(TreeWrapper, {\n        parent: newPath,\n        tree: tree,\n        toggled: toggled\n    }));\n};\nconst TreeWrapper = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().memo(({ isRoot: _isRoot = false, fill: _fill = false, flat: _flat = false, parent, tree, toggled })=>{\n    const { wrapperRef, contentRef } = useToggle(toggled);\n    const store = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    const getOrder = ([key, o])=>{\n        var _store$getInput;\n        const order = isInput(o) ? (_store$getInput = store.getInput(o.path)) === null || _store$getInput === void 0 ? void 0 : _store$getInput.order : store.getFolderSettings(join(parent, key)).order;\n        return order || 0;\n    };\n    const entries = Object.entries(tree).sort((a, b)=>getOrder(a) - getOrder(b));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.M, {\n        ref: wrapperRef,\n        isRoot: _isRoot,\n        fill: _fill,\n        flat: _flat\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.N, {\n        ref: contentRef,\n        isRoot: _isRoot,\n        toggled: toggled\n    }, entries.map(([key, value])=>isInput(value) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Control, {\n            key: value.path,\n            valueKey: value.valueKey,\n            path: value.path\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Folder, {\n            key: key,\n            name: key,\n            path: parent,\n            tree: value\n        }))));\n});\nconst StyledRoot = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    position: \"relative\",\n    fontFamily: \"$mono\",\n    fontSize: \"$root\",\n    color: \"$rootText\",\n    backgroundColor: \"$elevation1\",\n    variants: {\n        fill: {\n            false: {\n                position: \"fixed\",\n                top: \"10px\",\n                right: \"10px\",\n                zIndex: 1000,\n                width: \"$rootWidth\"\n            },\n            true: {\n                position: \"relative\",\n                width: \"100%\"\n            }\n        },\n        flat: {\n            false: {\n                borderRadius: \"$lg\",\n                boxShadow: \"$level1\"\n            }\n        },\n        oneLineLabels: {\n            true: {\n                [`${_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.T}`]: {\n                    gridTemplateColumns: \"auto\",\n                    gridAutoColumns: \"minmax(max-content, 1fr)\",\n                    gridAutoRows: \"minmax($sizes$rowHeight), auto)\",\n                    rowGap: 0,\n                    columnGap: 0,\n                    marginTop: \"$rowGap\"\n                }\n            }\n        },\n        hideTitleBar: {\n            true: {\n                $$titleBarHeight: \"0px\"\n            },\n            false: {\n                $$titleBarHeight: \"$sizes$titleBarHeight\"\n            }\n        }\n    },\n    \"&,*,*:after,*:before\": {\n        boxSizing: \"border-box\"\n    },\n    \"*::selection\": {\n        backgroundColor: \"$accent2\"\n    }\n});\nconst iconWidth = 40;\nconst Icon = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"i\", {\n    $flexCenter: \"\",\n    width: iconWidth,\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    \"> svg\": {\n        fill: \"$highlight1\",\n        transition: \"transform 350ms ease, fill 250ms ease\"\n    },\n    \"&:hover > svg\": {\n        fill: \"$highlight3\"\n    },\n    variants: {\n        active: {\n            true: {\n                \"> svg\": {\n                    fill: \"$highlight2\"\n                }\n            }\n        }\n    }\n});\nconst StyledTitleWithFilter = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    display: \"flex\",\n    alignItems: \"stretch\",\n    justifyContent: \"space-between\",\n    height: \"$titleBarHeight\",\n    variants: {\n        mode: {\n            drag: {\n                cursor: \"grab\"\n            }\n        }\n    }\n});\nconst FilterWrapper = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flex: \"\",\n    position: \"relative\",\n    width: \"100%\",\n    overflow: \"hidden\",\n    transition: \"height 250ms ease\",\n    color: \"$highlight3\",\n    paddingLeft: \"$md\",\n    [`> ${Icon}`]: {\n        height: 30\n    },\n    variants: {\n        toggled: {\n            true: {\n                height: 30\n            },\n            false: {\n                height: 0\n            }\n        }\n    }\n});\nconst StyledFilterInput = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"input\", {\n    $reset: \"\",\n    flex: 1,\n    position: \"relative\",\n    height: 30,\n    width: \"100%\",\n    backgroundColor: \"transparent\",\n    fontSize: \"10px\",\n    borderRadius: \"$root\",\n    \"&:focus\": {},\n    \"&::placeholder\": {\n        color: \"$highlight2\"\n    }\n});\nconst TitleContainer = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    touchAction: \"none\",\n    $flexCenter: \"\",\n    flex: 1,\n    \"> svg\": {\n        fill: \"$highlight1\"\n    },\n    color: \"$highlight1\",\n    variants: {\n        drag: {\n            true: {\n                $draggable: \"\",\n                \"> svg\": {\n                    transition: \"fill 250ms ease\"\n                },\n                \"&:hover\": {\n                    color: \"$highlight3\"\n                },\n                \"&:hover > svg\": {\n                    fill: \"$highlight3\"\n                }\n            }\n        },\n        filterEnabled: {\n            false: {\n                paddingRight: iconWidth\n            }\n        }\n    }\n});\nconst FilterInput = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().forwardRef(({ setFilter, toggle }, ref)=>{\n    const [value, set] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(\"\");\n    const debouncedOnChange = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.U)(setFilter, 250), [\n        setFilter\n    ]);\n    const clear = ()=>{\n        setFilter(\"\");\n        set(\"\");\n    };\n    const _onChange = (e)=>{\n        const v = e.currentTarget.value;\n        toggle(true);\n        set(v);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        debouncedOnChange(value);\n    }, [\n        value,\n        debouncedOnChange\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement((react__WEBPACK_IMPORTED_MODULE_4___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(StyledFilterInput, {\n        ref: ref,\n        value: value,\n        placeholder: \"[Open filter with CMD+SHIFT+L]\",\n        onPointerDown: (e)=>e.stopPropagation(),\n        onChange: _onChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Icon, {\n        onClick: ()=>clear(),\n        style: {\n            visibility: value ? \"visible\" : \"hidden\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        height: \"14\",\n        width: \"14\",\n        viewBox: \"0 0 20 20\",\n        fill: \"currentColor\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",\n        clipRule: \"evenodd\"\n    }))));\n});\nfunction TitleWithFilter({ setFilter, onDrag, onDragStart, onDragEnd, toggle, toggled, title, drag, filterEnabled, from }) {\n    const [filterShown, setShowFilter] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        var _inputRef$current, _inputRef$current2;\n        if (filterShown) (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n        else (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();\n    }, [\n        filterShown\n    ]);\n    const bind = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(({ offset: [x, y], first, last })=>{\n        onDrag({\n            x,\n            y\n        });\n        if (first) {\n            onDragStart({\n                x,\n                y\n            });\n        }\n        if (last) {\n            onDragEnd({\n                x,\n                y\n            });\n        }\n    }, {\n        filterTaps: true,\n        from: ({ offset: [x, y] })=>[\n                (from === null || from === void 0 ? void 0 : from.x) || x,\n                (from === null || from === void 0 ? void 0 : from.y) || y\n            ]\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        const handleShortcut = (event)=>{\n            if (event.key === \"L\" && event.shiftKey && event.metaKey) {\n                setShowFilter((f)=>!f);\n            }\n        };\n        window.addEventListener(\"keydown\", handleShortcut);\n        return ()=>window.removeEventListener(\"keydown\", handleShortcut);\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement((react__WEBPACK_IMPORTED_MODULE_4___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(StyledTitleWithFilter, {\n        mode: drag ? \"drag\" : undefined\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Icon, {\n        active: !toggled,\n        onClick: ()=>toggle()\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.K, {\n        toggled: toggled,\n        width: 12,\n        height: 8\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(TitleContainer, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({}, drag ? bind() : {}, {\n        drag: drag,\n        filterEnabled: filterEnabled\n    }), title === undefined && drag ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"svg\", {\n        width: \"20\",\n        height: \"10\",\n        viewBox: \"0 0 28 14\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"circle\", {\n        cx: \"2\",\n        cy: \"2\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"circle\", {\n        cx: \"14\",\n        cy: \"2\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"circle\", {\n        cx: \"26\",\n        cy: \"2\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"circle\", {\n        cx: \"2\",\n        cy: \"12\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"circle\", {\n        cx: \"14\",\n        cy: \"12\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"circle\", {\n        cx: \"26\",\n        cy: \"12\",\n        r: \"2\"\n    })) : title), filterEnabled && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Icon, {\n        active: filterShown,\n        onClick: ()=>setShowFilter((f)=>!f)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        height: \"20\",\n        viewBox: \"0 0 20 20\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"path\", {\n        d: \"M9 9a2 2 0 114 0 2 2 0 01-4 0z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a4 4 0 00-3.446 6.032l-2.261 2.26a1 1 0 101.414 1.415l2.261-2.261A4 4 0 1011 5z\",\n        clipRule: \"evenodd\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(FilterWrapper, {\n        toggled: filterShown\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(FilterInput, {\n        ref: inputRef,\n        setFilter: setFilter,\n        toggle: toggle\n    })));\n}\nconst _excluded$2 = [\n    \"store\",\n    \"hidden\",\n    \"theme\",\n    \"collapsed\"\n];\nfunction LevaRoot(_ref) {\n    let { store, hidden = false, theme, collapsed = false } = _ref, props = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$2);\n    const themeContext = useDeepMemo(()=>(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.Z)(theme), [\n        theme\n    ]);\n    const [toggled, setToggle] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!collapsed);\n    const computedToggled = typeof collapsed === \"object\" ? !collapsed.collapsed : toggled;\n    const computedSetToggle = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>{\n        if (typeof collapsed === \"object\") {\n            return (value)=>{\n                if (typeof value === \"function\") {\n                    collapsed.onChange(!value(!collapsed.collapsed));\n                } else {\n                    collapsed.onChange(!value);\n                }\n            };\n        }\n        return setToggle;\n    }, [\n        collapsed\n    ]);\n    if (!store || hidden) return null;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.$.Provider, {\n        value: themeContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(LevaCore, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        store: store\n    }, props, {\n        toggled: computedToggled,\n        setToggle: computedSetToggle,\n        rootClass: themeContext.className\n    })));\n}\nconst LevaCore = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().memo(({ store, rootClass, fill: _fill = false, flat: _flat = false, neverHide: _neverHide = false, oneLineLabels: _oneLineLabels = false, titleBar: _titleBar = {\n    title: undefined,\n    drag: true,\n    filter: true,\n    position: undefined,\n    onDrag: undefined,\n    onDragStart: undefined,\n    onDragEnd: undefined\n}, hideCopyButton: _hideCopyButton = false, toggled, setToggle })=>{\n    var _titleBar$drag, _titleBar$filter;\n    const paths = useVisiblePaths(store);\n    const [filter, setFilter] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(\"\");\n    const tree = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>buildTree(paths, filter), [\n        paths,\n        filter\n    ]);\n    const [rootRef, set] = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)();\n    const shouldShow = _neverHide || paths.length > 0;\n    const title = typeof _titleBar === \"object\" ? _titleBar.title || undefined : undefined;\n    const drag = typeof _titleBar === \"object\" ? (_titleBar$drag = _titleBar.drag) !== null && _titleBar$drag !== void 0 ? _titleBar$drag : true : true;\n    const filterEnabled = typeof _titleBar === \"object\" ? (_titleBar$filter = _titleBar.filter) !== null && _titleBar$filter !== void 0 ? _titleBar$filter : true : true;\n    const position = typeof _titleBar === \"object\" ? _titleBar.position || undefined : undefined;\n    const onDrag = typeof _titleBar === \"object\" ? _titleBar.onDrag || undefined : undefined;\n    const onDragStart = typeof _titleBar === \"object\" ? _titleBar.onDragStart || undefined : undefined;\n    const onDragEnd = typeof _titleBar === \"object\" ? _titleBar.onDragEnd || undefined : undefined;\n    react__WEBPACK_IMPORTED_MODULE_4___default().useEffect(()=>{\n        set({\n            x: position === null || position === void 0 ? void 0 : position.x,\n            y: position === null || position === void 0 ? void 0 : position.y\n        });\n    }, [\n        position,\n        set\n    ]);\n    (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.W)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.X.Provider, {\n        value: {\n            hideCopyButton: _hideCopyButton\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(StyledRoot, {\n        ref: rootRef,\n        className: rootClass,\n        fill: _fill,\n        flat: _flat,\n        oneLineLabels: _oneLineLabels,\n        hideTitleBar: !_titleBar,\n        style: {\n            display: shouldShow ? \"block\" : \"none\"\n        }\n    }, _titleBar && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(TitleWithFilter, {\n        onDrag: (point)=>{\n            set(point);\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(point);\n        },\n        onDragStart: (point)=>onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(point),\n        onDragEnd: (point)=>onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(point),\n        setFilter: setFilter,\n        toggle: (flag)=>setToggle((t)=>flag !== null && flag !== void 0 ? flag : !t),\n        toggled: toggled,\n        title: title,\n        drag: drag,\n        filterEnabled: filterEnabled,\n        from: position\n    }), shouldShow && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.Y.Provider, {\n        value: store\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(TreeWrapper, {\n        isRoot: true,\n        fill: _fill,\n        flat: _flat,\n        tree: tree,\n        toggled: toggled\n    }))));\n});\nconst _excluded$1 = [\n    \"isRoot\"\n];\nlet rootInitialized = false;\nlet rootEl = null;\nfunction Leva(_ref) {\n    let { isRoot = false } = _ref, props = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$1);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        rootInitialized = true;\n        if (!isRoot && rootEl) {\n            rootEl.remove();\n            rootEl = null;\n        }\n        return ()=>{\n            if (!isRoot) rootInitialized = false;\n        };\n    }, [\n        isRoot\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(LevaRoot, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        store: levaStore\n    }, props));\n}\nfunction useRenderRoot(isGlobalPanel) {\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        if (isGlobalPanel && !rootInitialized) {\n            if (!rootEl) {\n                rootEl = document.getElementById(\"leva__root\") || Object.assign(document.createElement(\"div\"), {\n                    id: \"leva__root\"\n                });\n                if (document.body) {\n                    document.body.appendChild(rootEl);\n                    (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(Leva, {\n                        isRoot: true\n                    }), rootEl);\n                }\n            }\n            rootInitialized = true;\n        }\n    }, [\n        isGlobalPanel\n    ]);\n}\nconst _excluded = [\n    \"store\"\n];\nfunction LevaPanel(_ref) {\n    let { store } = _ref, props = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded);\n    const parentStore = (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    const _store = store === undefined ? parentStore : store;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(LevaRoot, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        store: _store\n    }, props));\n}\nfunction parseArgs(schemaOrFolderName, settingsOrDepsOrSchema, depsOrSettingsOrFolderSettings, depsOrSettings, depsOrUndefined) {\n    let schema;\n    let folderName = undefined;\n    let folderSettings;\n    let hookSettings;\n    let deps;\n    if (typeof schemaOrFolderName === \"string\") {\n        folderName = schemaOrFolderName;\n        schema = settingsOrDepsOrSchema;\n        if (Array.isArray(depsOrSettingsOrFolderSettings)) {\n            deps = depsOrSettingsOrFolderSettings;\n        } else {\n            if (depsOrSettingsOrFolderSettings) {\n                if (\"store\" in depsOrSettingsOrFolderSettings) {\n                    hookSettings = depsOrSettingsOrFolderSettings;\n                    deps = depsOrSettings;\n                } else {\n                    folderSettings = depsOrSettingsOrFolderSettings;\n                    if (Array.isArray(depsOrSettings)) {\n                        deps = depsOrSettings;\n                    } else {\n                        hookSettings = depsOrSettings;\n                        deps = depsOrUndefined;\n                    }\n                }\n            }\n        }\n    } else {\n        schema = schemaOrFolderName;\n        if (Array.isArray(settingsOrDepsOrSchema)) {\n            deps = settingsOrDepsOrSchema;\n        } else {\n            hookSettings = settingsOrDepsOrSchema;\n            deps = depsOrSettingsOrFolderSettings;\n        }\n    }\n    return {\n        schema,\n        folderName,\n        folderSettings,\n        hookSettings,\n        deps: deps || []\n    };\n}\nfunction useControls(schemaOrFolderName, settingsOrDepsOrSchema, depsOrSettingsOrFolderSettings, depsOrSettings, depsOrUndefined) {\n    const { folderName, schema, folderSettings, hookSettings, deps } = parseArgs(schemaOrFolderName, settingsOrDepsOrSchema, depsOrSettingsOrFolderSettings, depsOrSettings, depsOrUndefined);\n    const schemaIsFunction = typeof schema === \"function\";\n    const depsChanged = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(false);\n    const firstRender = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(true);\n    const _schema = useDeepMemo(()=>{\n        depsChanged.current = true;\n        const s = typeof schema === \"function\" ? schema() : schema;\n        return folderName ? {\n            [folderName]: folder(s, folderSettings)\n        } : s;\n    }, deps);\n    const isGlobalPanel = !(hookSettings !== null && hookSettings !== void 0 && hookSettings.store);\n    useRenderRoot(isGlobalPanel);\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(()=>(hookSettings === null || hookSettings === void 0 ? void 0 : hookSettings.store) || levaStore);\n    const [initialData, mappedPaths] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>store.getDataFromSchema(_schema), [\n        store,\n        _schema\n    ]);\n    const [allPaths, renderPaths, onChangePaths, onEditStartPaths, onEditEndPaths] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>{\n        const allPaths = [];\n        const renderPaths = [];\n        const onChangePaths = {};\n        const onEditStartPaths = {};\n        const onEditEndPaths = {};\n        Object.values(mappedPaths).forEach(({ path, onChange, onEditStart, onEditEnd, transient })=>{\n            allPaths.push(path);\n            if (!!onChange) {\n                onChangePaths[path] = onChange;\n                if (!transient) {\n                    renderPaths.push(path);\n                }\n            } else {\n                renderPaths.push(path);\n            }\n            if (onEditStart) {\n                onEditStartPaths[path] = onEditStart;\n            }\n            if (onEditEnd) {\n                onEditEndPaths[path] = onEditEnd;\n            }\n        });\n        return [\n            allPaths,\n            renderPaths,\n            onChangePaths,\n            onEditStartPaths,\n            onEditEndPaths\n        ];\n    }, [\n        mappedPaths\n    ]);\n    const paths = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>store.orderPaths(allPaths), [\n        allPaths,\n        store\n    ]);\n    const values = useValuesForPath(store, renderPaths, initialData);\n    const set = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((values)=>{\n        const _values = Object.entries(values).reduce((acc, [p, v])=>Object.assign(acc, {\n                [mappedPaths[p].path]: v\n            }), {});\n        store.set(_values, false);\n    }, [\n        store,\n        mappedPaths\n    ]);\n    const get = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((path)=>store.get(mappedPaths[path].path), [\n        store,\n        mappedPaths\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        const shouldOverrideSettings = !firstRender.current && depsChanged.current;\n        store.addData(initialData, shouldOverrideSettings);\n        firstRender.current = false;\n        depsChanged.current = false;\n        return ()=>store.disposePaths(paths);\n    }, [\n        store,\n        paths,\n        initialData\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        const unsubscriptions = [];\n        Object.entries(onChangePaths).forEach(([path, onChange])=>{\n            onChange(store.get(path), path, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                initial: true,\n                get: store.get\n            }, store.getInput(path)));\n            const unsub = store.useStore.subscribe((s)=>{\n                const input = s.data[path];\n                const value = input.disabled ? undefined : input.value;\n                return [\n                    value,\n                    input\n                ];\n            }, ([value, input])=>onChange(value, path, (0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                    initial: false,\n                    get: store.get\n                }, input)), {\n                equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n            });\n            unsubscriptions.push(unsub);\n        });\n        return ()=>unsubscriptions.forEach((unsub)=>unsub());\n    }, [\n        store,\n        onChangePaths\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        const unsubscriptions = [];\n        Object.entries(onEditStartPaths).forEach(([path, onEditStart])=>unsubscriptions.push(store.subscribeToEditStart(path, onEditStart)));\n        Object.entries(onEditEndPaths).forEach(([path, onEditEnd])=>unsubscriptions.push(store.subscribeToEditEnd(path, onEditEnd)));\n        return ()=>unsubscriptions.forEach((unsub)=>unsub());\n    }, [\n        onEditStartPaths,\n        onEditEndPaths,\n        store\n    ]);\n    if (schemaIsFunction) return [\n        values,\n        set,\n        get\n    ];\n    return values;\n}\n(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2.SELECT, _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a3);\n(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2.IMAGE, image);\n(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2.NUMBER, _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a4);\n(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2.COLOR, color);\n(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2.STRING, _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a5);\n(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2.BOOLEAN, _vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a6);\n(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2.INTERVAL, interval);\n(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2.VECTOR3D, vector3d);\n(0,_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1)(_vector_plugin_6f82aee9_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2.VECTOR2D, vector2d);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/dist/leva.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/leva/dist/vector-plugin-6f82aee9.esm.js":
/*!**************************************************************!*\
  !*** ./node_modules/leva/dist/vector-plugin-6f82aee9.esm.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ ThemeContext),\n/* harmony export */   A: () => (/* binding */ useInputSetters),\n/* harmony export */   B: () => (/* binding */ Plugins),\n/* harmony export */   C: () => (/* binding */ InputContext),\n/* harmony export */   D: () => (/* binding */ StyledInputWrapper$1),\n/* harmony export */   E: () => (/* binding */ useStoreContext),\n/* harmony export */   F: () => (/* binding */ useCanvas2d),\n/* harmony export */   G: () => (/* binding */ useInput),\n/* harmony export */   H: () => (/* binding */ log),\n/* harmony export */   I: () => (/* binding */ Indicator),\n/* harmony export */   J: () => (/* binding */ StyledTitle),\n/* harmony export */   K: () => (/* binding */ Chevron),\n/* harmony export */   L: () => (/* binding */ Label),\n/* harmony export */   M: () => (/* binding */ StyledWrapper),\n/* harmony export */   N: () => (/* binding */ StyledContent),\n/* harmony export */   O: () => (/* binding */ Overlay),\n/* harmony export */   P: () => (/* binding */ Portal),\n/* harmony export */   Q: () => (/* binding */ StyledFolder),\n/* harmony export */   R: () => (/* binding */ Row),\n/* harmony export */   S: () => (/* binding */ Scrubber),\n/* harmony export */   T: () => (/* binding */ StyledInputRow),\n/* harmony export */   U: () => (/* binding */ debounce),\n/* harmony export */   V: () => (/* binding */ ValueInput),\n/* harmony export */   W: () => (/* binding */ globalStyles),\n/* harmony export */   X: () => (/* binding */ PanelSettingsContext),\n/* harmony export */   Y: () => (/* binding */ StoreContext),\n/* harmony export */   Z: () => (/* binding */ mergeTheme),\n/* harmony export */   _: () => (/* binding */ _objectSpread2),\n/* harmony export */   a: () => (/* binding */ Vector),\n/* harmony export */   a0: () => (/* binding */ render),\n/* harmony export */   a1: () => (/* binding */ register),\n/* harmony export */   a2: () => (/* binding */ LevaInputs),\n/* harmony export */   a3: () => (/* binding */ select),\n/* harmony export */   a4: () => (/* binding */ number),\n/* harmony export */   a5: () => (/* binding */ string),\n/* harmony export */   a6: () => (/* binding */ boolean),\n/* harmony export */   a7: () => (/* binding */ LevaStoreProvider),\n/* harmony export */   a8: () => (/* binding */ String$1),\n/* harmony export */   a9: () => (/* binding */ Number$1),\n/* harmony export */   aa: () => (/* binding */ Boolean),\n/* harmony export */   ab: () => (/* binding */ Select),\n/* harmony export */   ac: () => (/* binding */ InnerLabel),\n/* harmony export */   ad: () => (/* binding */ pad),\n/* harmony export */   ae: () => (/* binding */ evaluate),\n/* harmony export */   af: () => (/* binding */ mergeRefs),\n/* harmony export */   ag: () => (/* binding */ createPlugin),\n/* harmony export */   ah: () => (/* binding */ keyframes),\n/* harmony export */   ai: () => (/* binding */ getVectorSchema),\n/* harmony export */   aj: () => (/* binding */ getVectorType),\n/* harmony export */   ak: () => (/* binding */ sanitizeVector),\n/* harmony export */   al: () => (/* binding */ formatVector),\n/* harmony export */   am: () => (/* binding */ normalizeVector),\n/* harmony export */   b: () => (/* binding */ useTransform),\n/* harmony export */   c: () => (/* binding */ createInternalPlugin),\n/* harmony export */   d: () => (/* binding */ useTh),\n/* harmony export */   e: () => (/* binding */ useDrag),\n/* harmony export */   f: () => (/* binding */ _extends),\n/* harmony export */   g: () => (/* binding */ getVectorPlugin),\n/* harmony export */   h: () => (/* binding */ clamp),\n/* harmony export */   i: () => (/* binding */ _objectWithoutProperties),\n/* harmony export */   j: () => (/* binding */ invertedRange),\n/* harmony export */   k: () => (/* binding */ sanitizeStep),\n/* harmony export */   l: () => (/* binding */ RangeWrapper),\n/* harmony export */   m: () => (/* binding */ multiplyStep),\n/* harmony export */   n: () => (/* binding */ normalizeKeyedNumberSettings),\n/* harmony export */   o: () => (/* binding */ omit),\n/* harmony export */   p: () => (/* binding */ pick),\n/* harmony export */   q: () => (/* binding */ Range),\n/* harmony export */   r: () => (/* binding */ range),\n/* harmony export */   s: () => (/* binding */ styled),\n/* harmony export */   t: () => (/* binding */ getUid),\n/* harmony export */   u: () => (/* binding */ useInputContext),\n/* harmony export */   v: () => (/* binding */ SpecialInputs),\n/* harmony export */   w: () => (/* binding */ warn),\n/* harmony export */   x: () => (/* binding */ LevaErrors),\n/* harmony export */   y: () => (/* binding */ updateInput),\n/* harmony export */   z: () => (/* binding */ normalizeInput)\n/* harmony export */ });\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @radix-ui/react-portal */ \"(ssr)/./node_modules/@radix-ui/react-portal/dist/index.mjs\");\n/* harmony import */ var dequal_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal/lite */ \"(ssr)/./node_modules/dequal/lite/index.mjs\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zustand/shallow */ \"(ssr)/./node_modules/zustand/esm/shallow.js\");\n/* harmony import */ var v8n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! v8n */ \"(ssr)/./node_modules/v8n/dist/v8n.esm.js\");\n/* harmony import */ var _stitches_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @stitches/react */ \"(ssr)/./node_modules/@stitches/react/dist/index.mjs\");\n/* harmony import */ var _use_gesture_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @use-gesture/react */ \"(ssr)/./node_modules/@use-gesture/react/dist/use-gesture-react.esm.js\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n\n\n\n\n\n\n\n\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nlet LevaErrors;\n(function(LevaErrors) {\n    LevaErrors[LevaErrors[\"UNSUPPORTED_INPUT\"] = 0] = \"UNSUPPORTED_INPUT\";\n    LevaErrors[LevaErrors[\"NO_COMPONENT_FOR_TYPE\"] = 1] = \"NO_COMPONENT_FOR_TYPE\";\n    LevaErrors[LevaErrors[\"UNKNOWN_INPUT\"] = 2] = \"UNKNOWN_INPUT\";\n    LevaErrors[LevaErrors[\"DUPLICATE_KEYS\"] = 3] = \"DUPLICATE_KEYS\";\n    LevaErrors[LevaErrors[\"ALREADY_REGISTERED_TYPE\"] = 4] = \"ALREADY_REGISTERED_TYPE\";\n    LevaErrors[LevaErrors[\"CLIPBOARD_ERROR\"] = 5] = \"CLIPBOARD_ERROR\";\n    LevaErrors[LevaErrors[\"THEME_ERROR\"] = 6] = \"THEME_ERROR\";\n    LevaErrors[LevaErrors[\"PATH_DOESNT_EXIST\"] = 7] = \"PATH_DOESNT_EXIST\";\n    LevaErrors[LevaErrors[\"INPUT_TYPE_OVERRIDE\"] = 8] = \"INPUT_TYPE_OVERRIDE\";\n    LevaErrors[LevaErrors[\"EMPTY_KEY\"] = 9] = \"EMPTY_KEY\";\n})(LevaErrors || (LevaErrors = {}));\nconst ErrorList = {\n    [LevaErrors.UNSUPPORTED_INPUT]: (type, path)=>[\n            `An input with type \\`${type}\\` input was found at path \\`${path}\\` but it's not supported yet.`\n        ],\n    [LevaErrors.NO_COMPONENT_FOR_TYPE]: (type, path)=>[\n            `Type \\`${type}\\` found at path \\`${path}\\` can't be displayed in panel because no component supports it yet.`\n        ],\n    [LevaErrors.UNKNOWN_INPUT]: (path, value)=>[\n            `input at path \\`${path}\\` is not recognized.`,\n            value\n        ],\n    [LevaErrors.DUPLICATE_KEYS]: (key, path, prevPath)=>[\n            `Key \\`${key}\\` of path \\`${path}\\` already exists at path \\`${prevPath}\\`. Even nested keys need to be unique. Rename one of the keys.`\n        ],\n    [LevaErrors.ALREADY_REGISTERED_TYPE]: (type)=>[\n            `Type ${type} has already been registered. You can't register a component with the same type.`\n        ],\n    [LevaErrors.CLIPBOARD_ERROR]: (value)=>[\n            `Error copying the value`,\n            value\n        ],\n    [LevaErrors.THEME_ERROR]: (category, key)=>[\n            `Error accessing the theme \\`${category}.${key}\\` value.`\n        ],\n    [LevaErrors.PATH_DOESNT_EXIST]: (path)=>[\n            `Error getting the value at path \\`${path}\\`. There is probably an error in your \\`render\\` function.`\n        ],\n    [LevaErrors.PATH_DOESNT_EXIST]: (path)=>[\n            `Error accessing the value at path \\`${path}\\``\n        ],\n    [LevaErrors.INPUT_TYPE_OVERRIDE]: (path, type, wrongType)=>[\n            `Input at path \\`${path}\\` already exists with type: \\`${type}\\`. Its type cannot be overridden with type \\`${wrongType}\\`.`\n        ],\n    [LevaErrors.EMPTY_KEY]: ()=>[\n            \"Keys can not be empty, if you want to hide a label use whitespace.\"\n        ]\n};\nfunction _log(fn, errorType, ...args) {\n    const [message, ...rest] = ErrorList[errorType](...args);\n    console[fn](\"LEVA: \" + message, ...rest);\n}\nconst warn = _log.bind(null, \"warn\");\nconst log = _log.bind(null, \"log\");\nconst _excluded$a = [\n    \"value\"\n], _excluded2$4 = [\n    \"schema\"\n], _excluded3$1 = [\n    \"value\"\n];\nconst Schemas = [];\nconst Plugins = {};\nfunction getValueType(_ref) {\n    let { value } = _ref, settings = _objectWithoutProperties(_ref, _excluded$a);\n    for (let checker of Schemas){\n        const type = checker(value, settings);\n        if (type) return type;\n    }\n    return undefined;\n}\nfunction register(type, _ref2) {\n    let { schema } = _ref2, plugin = _objectWithoutProperties(_ref2, _excluded2$4);\n    if (type in Plugins) {\n        warn(LevaErrors.ALREADY_REGISTERED_TYPE, type);\n        return;\n    }\n    Schemas.push((value, settings)=>schema(value, settings) && type);\n    Plugins[type] = plugin;\n}\nconst getUniqueType = ()=>\"__CUSTOM__PLUGIN__\" + Math.random().toString(36).substr(2, 9);\nfunction createInternalPlugin(plugin) {\n    return plugin;\n}\nfunction createPlugin(plugin) {\n    const type = getUniqueType();\n    Plugins[type] = plugin;\n    return (input)=>{\n        return {\n            type,\n            __customInput: input\n        };\n    };\n}\nfunction normalize$3(type, input, path, data) {\n    const { normalize: _normalize } = Plugins[type];\n    if (_normalize) return _normalize(input, path, data);\n    if (typeof input !== \"object\" || !(\"value\" in input)) return {\n        value: input\n    };\n    const { value } = input, settings = _objectWithoutProperties(input, _excluded3$1);\n    return {\n        value,\n        settings\n    };\n}\nfunction sanitize$4(type, value, settings, prevValue, path, store) {\n    const { sanitize } = Plugins[type];\n    if (sanitize) return sanitize(value, settings, prevValue, path, store);\n    return value;\n}\nfunction format$2(type, value, settings) {\n    const { format } = Plugins[type];\n    if (format) return format(value, settings);\n    return value;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nconst clamp = (x, min, max)=>x > max ? max : x < min ? min : x;\nconst pad = (x, pad)=>String(x).padStart(pad, \"0\");\nconst parseNumber = (v)=>{\n    if (v === \"\" || typeof v === \"number\") return v;\n    try {\n        const _v = evaluate(v);\n        if (!isNaN(_v)) return _v;\n    } catch (_unused) {}\n    return parseFloat(v);\n};\nconst log10 = Math.log(10);\nfunction getStep(number) {\n    let n = Math.abs(+String(number).replace(\".\", \"\"));\n    if (n === 0) return 0.01;\n    while(n !== 0 && n % 10 === 0)n /= 10;\n    const significantDigits = Math.floor(Math.log(n) / log10) + 1;\n    const numberLog = Math.floor(Math.log10(Math.abs(number)));\n    const step = Math.pow(10, numberLog - significantDigits);\n    return Math.max(step, 0.001);\n}\nconst range = (v, min, max)=>{\n    if (max === min) return 0;\n    const _v = clamp(v, min, max);\n    return (_v - min) / (max - min);\n};\nconst invertedRange = (p, min, max)=>p * (max - min) + min;\nconst getUid = ()=>\"_\" + Math.random().toString(36).substr(2, 9);\nconst parens = /\\(([0-9+\\-*/^ .]+)\\)/;\nconst exp = /(\\d+(?:\\.\\d+)?) ?\\^ ?(\\d+(?:\\.\\d+)?)/;\nconst mul = /(\\d+(?:\\.\\d+)?) ?\\* ?(\\d+(?:\\.\\d+)?)/;\nconst div = /(\\d+(?:\\.\\d+)?) ?\\/ ?(\\d+(?:\\.\\d+)?)/;\nconst add = /(\\d+(?:\\.\\d+)?) ?\\+ ?(\\d+(?:\\.\\d+)?)/;\nconst sub = /(\\d+(?:\\.\\d+)?) ?- ?(\\d+(?:\\.\\d+)?)/;\nfunction evaluate(expr) {\n    if (isNaN(Number(expr))) {\n        if (parens.test(expr)) {\n            const newExpr = expr.replace(parens, (match, subExpr)=>String(evaluate(subExpr)));\n            return evaluate(newExpr);\n        } else if (exp.test(expr)) {\n            const newExpr = expr.replace(exp, (match, base, pow)=>String(Math.pow(Number(base), Number(pow))));\n            return evaluate(newExpr);\n        } else if (mul.test(expr)) {\n            const newExpr = expr.replace(mul, (match, a, b)=>String(Number(a) * Number(b)));\n            return evaluate(newExpr);\n        } else if (div.test(expr)) {\n            const newExpr = expr.replace(div, (match, a, b)=>{\n                if (b != 0) return String(Number(a) / Number(b));\n                else throw new Error(\"Division by zero\");\n            });\n            return evaluate(newExpr);\n        } else if (add.test(expr)) {\n            const newExpr = expr.replace(add, (match, a, b)=>String(Number(a) + Number(b)));\n            return evaluate(newExpr);\n        } else if (sub.test(expr)) {\n            const newExpr = expr.replace(sub, (match, a, b)=>String(Number(a) - Number(b)));\n            return evaluate(newExpr);\n        } else {\n            return Number(expr);\n        }\n    }\n    return Number(expr);\n}\nfunction pick(object, keys) {\n    return keys.reduce((obj, key)=>{\n        if (!!object && object.hasOwnProperty(key)) {\n            obj[key] = object[key];\n        }\n        return obj;\n    }, {});\n}\nfunction omit(object, keys) {\n    const obj = _objectSpread2({}, object);\n    keys.forEach((k)=>k in object && delete obj[k]);\n    return obj;\n}\nfunction mapArrayToKeys(value, keys) {\n    return value.reduce((acc, v, i)=>Object.assign(acc, {\n            [keys[i]]: v\n        }), {});\n}\nfunction isObject(variable) {\n    return Object.prototype.toString.call(variable) === \"[object Object]\";\n}\nconst isEmptyObject = (obj)=>isObject(obj) && Object.keys(obj).length === 0;\nlet SpecialInputs;\n(function(SpecialInputs) {\n    SpecialInputs[\"BUTTON\"] = \"BUTTON\";\n    SpecialInputs[\"BUTTON_GROUP\"] = \"BUTTON_GROUP\";\n    SpecialInputs[\"MONITOR\"] = \"MONITOR\";\n    SpecialInputs[\"FOLDER\"] = \"FOLDER\";\n})(SpecialInputs || (SpecialInputs = {}));\nlet LevaInputs;\n(function(LevaInputs) {\n    LevaInputs[\"SELECT\"] = \"SELECT\";\n    LevaInputs[\"IMAGE\"] = \"IMAGE\";\n    LevaInputs[\"NUMBER\"] = \"NUMBER\";\n    LevaInputs[\"COLOR\"] = \"COLOR\";\n    LevaInputs[\"STRING\"] = \"STRING\";\n    LevaInputs[\"BOOLEAN\"] = \"BOOLEAN\";\n    LevaInputs[\"INTERVAL\"] = \"INTERVAL\";\n    LevaInputs[\"VECTOR3D\"] = \"VECTOR3D\";\n    LevaInputs[\"VECTOR2D\"] = \"VECTOR2D\";\n})(LevaInputs || (LevaInputs = {}));\nconst _excluded$9 = [\n    \"type\",\n    \"__customInput\"\n], _excluded2$3 = [\n    \"render\",\n    \"label\",\n    \"optional\",\n    \"order\",\n    \"disabled\",\n    \"hint\",\n    \"onChange\",\n    \"onEditStart\",\n    \"onEditEnd\",\n    \"transient\"\n], _excluded3 = [\n    \"type\"\n];\nfunction parseOptions(_input, key, mergedOptions = {}, customType) {\n    var _commonOptions$option, _commonOptions$disabl;\n    if (typeof _input !== \"object\" || Array.isArray(_input)) {\n        return {\n            type: customType,\n            input: _input,\n            options: _objectSpread2({\n                key,\n                label: key,\n                optional: false,\n                disabled: false,\n                order: 0\n            }, mergedOptions)\n        };\n    }\n    if (\"__customInput\" in _input) {\n        const { type: _type, __customInput } = _input, options = _objectWithoutProperties(_input, _excluded$9);\n        return parseOptions(__customInput, key, options, _type);\n    }\n    const { render, label, optional, order = 0, disabled, hint, onChange, onEditStart, onEditEnd, transient } = _input, inputWithType = _objectWithoutProperties(_input, _excluded2$3);\n    const commonOptions = _objectSpread2({\n        render,\n        key,\n        label: label !== null && label !== void 0 ? label : key,\n        hint,\n        transient: transient !== null && transient !== void 0 ? transient : !!onChange,\n        onEditStart,\n        onEditEnd,\n        disabled,\n        optional,\n        order\n    }, mergedOptions);\n    let { type } = inputWithType, input = _objectWithoutProperties(inputWithType, _excluded3);\n    type = customType !== null && customType !== void 0 ? customType : type;\n    if (type in SpecialInputs) {\n        return {\n            type,\n            input,\n            options: commonOptions\n        };\n    }\n    let computedInput;\n    if (customType && isObject(input) && \"value\" in input) computedInput = input.value;\n    else computedInput = isEmptyObject(input) ? undefined : input;\n    return {\n        type,\n        input: computedInput,\n        options: _objectSpread2(_objectSpread2({}, commonOptions), {}, {\n            onChange,\n            optional: (_commonOptions$option = commonOptions.optional) !== null && _commonOptions$option !== void 0 ? _commonOptions$option : false,\n            disabled: (_commonOptions$disabl = commonOptions.disabled) !== null && _commonOptions$disabl !== void 0 ? _commonOptions$disabl : false\n        })\n    };\n}\nfunction normalizeInput(_input, key, path, data) {\n    const parsedInputAndOptions = parseOptions(_input, key);\n    const { type, input: parsedInput, options } = parsedInputAndOptions;\n    if (type) {\n        if (type in SpecialInputs) return parsedInputAndOptions;\n        return {\n            type,\n            input: normalize$3(type, parsedInput, path, data),\n            options\n        };\n    }\n    let inputType = getValueType(parsedInput);\n    if (inputType) return {\n        type: inputType,\n        input: normalize$3(inputType, parsedInput, path, data),\n        options\n    };\n    inputType = getValueType({\n        value: parsedInput\n    });\n    if (inputType) return {\n        type: inputType,\n        input: normalize$3(inputType, {\n            value: parsedInput\n        }, path, data),\n        options\n    };\n    return false;\n}\nfunction updateInput(input, newValue, path, store, fromPanel) {\n    const { value, type, settings } = input;\n    input.value = sanitizeValue({\n        type,\n        value,\n        settings\n    }, newValue, path, store);\n    input.fromPanel = fromPanel;\n}\nconst ValueError = function ValueError(message, value, error) {\n    this.type = \"LEVA_ERROR\";\n    this.message = \"LEVA: \" + message;\n    this.previousValue = value;\n    this.error = error;\n};\nfunction sanitizeValue({ type, value, settings }, newValue, path, store) {\n    const _newValue = type !== \"SELECT\" && typeof newValue === \"function\" ? newValue(value) : newValue;\n    let sanitizedNewValue;\n    try {\n        sanitizedNewValue = sanitize$4(type, _newValue, settings, value, path, store);\n    } catch (e) {\n        throw new ValueError(`The value \\`${newValue}\\` did not result in a correct value.`, value, e);\n    }\n    if ((0,dequal_lite__WEBPACK_IMPORTED_MODULE_2__.dequal)(sanitizedNewValue, value)) {\n        return value;\n    }\n    return sanitizedNewValue;\n}\nconst debounce = (callback, wait, immediate = false)=>{\n    let timeout = 0;\n    return function() {\n        const args = arguments;\n        const callNow = immediate && !timeout;\n        const next = ()=>callback.apply(this, args);\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(next, wait);\n        if (callNow) next();\n    };\n};\nconst multiplyStep = (event)=>event.shiftKey ? 5 : event.altKey ? 1 / 5 : 1;\nfunction render(element, container) {\n    const error = console.error;\n    console.error = ()=>{};\n    react_dom__WEBPACK_IMPORTED_MODULE_0___default().render(element, container);\n    console.error = error;\n}\nfunction mergeRefs(refs) {\n    return (value)=>{\n        refs.forEach((ref)=>{\n            if (typeof ref === \"function\") ref(value);\n            else if (ref != null) {\n                ref.current = value;\n            }\n        });\n    };\n}\nconst _excluded$8 = [\n    \"value\"\n], _excluded2$2 = [\n    \"min\",\n    \"max\"\n];\nconst schema$3 = (v)=>{\n    if (typeof v === \"number\") return true;\n    if (typeof v === \"string\") {\n        const _v = parseFloat(v);\n        if (isNaN(_v)) return false;\n        const suffix = v.substring((\"\" + _v).length).trim();\n        return suffix.length < 4;\n    }\n    return false;\n};\nconst sanitize$3 = (v, { min: _min = -Infinity, max: _max = Infinity, suffix })=>{\n    const _v = parseFloat(v);\n    if (v === \"\" || isNaN(_v)) throw Error(\"Invalid number\");\n    const f = clamp(_v, _min, _max);\n    return suffix ? f + suffix : f;\n};\nconst format$1 = (v, { pad: _pad = 0, suffix })=>{\n    const f = parseFloat(v).toFixed(_pad);\n    return suffix ? f + suffix : f;\n};\nconst normalize$2 = (_ref)=>{\n    let { value } = _ref, settings = _objectWithoutProperties(_ref, _excluded$8);\n    const { min = -Infinity, max = Infinity } = settings, _settings = _objectWithoutProperties(settings, _excluded2$2);\n    let _value = parseFloat(value);\n    const suffix = typeof value === \"string\" ? value.substring((\"\" + _value).length) : undefined;\n    _value = clamp(_value, min, max);\n    let step = settings.step;\n    if (!step) {\n        if (Number.isFinite(min)) {\n            if (Number.isFinite(max)) step = +(Math.abs(max - min) / 100).toPrecision(1);\n            else step = +(Math.abs(_value - min) / 100).toPrecision(1);\n        } else if (Number.isFinite(max)) step = +(Math.abs(max - _value) / 100).toPrecision(1);\n    }\n    const padStep = step ? getStep(step) * 10 : getStep(_value);\n    step = step || padStep / 10;\n    const pad = Math.round(clamp(Math.log10(1 / padStep), 0, 2));\n    return {\n        value: suffix ? _value + suffix : _value,\n        settings: _objectSpread2({\n            initialValue: _value,\n            step,\n            pad,\n            min,\n            max,\n            suffix\n        }, _settings)\n    };\n};\nconst sanitizeStep$1 = (v, { step, initialValue })=>{\n    const steps = Math.round((v - initialValue) / step);\n    return initialValue + steps * step;\n};\nvar props$3 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema$3,\n    sanitize: sanitize$3,\n    format: format$1,\n    normalize: normalize$2,\n    sanitizeStep: sanitizeStep$1\n});\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nconst InputContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nfunction useInputContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(InputContext);\n}\nconst ThemeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst StoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst PanelSettingsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nfunction useStoreContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StoreContext);\n}\nfunction usePanelSettingsContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PanelSettingsContext);\n}\nfunction LevaStoreProvider({ children, store }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StoreContext.Provider, {\n        value: store\n    }, children);\n}\nconst getDefaultTheme = ()=>({\n        colors: {\n            elevation1: \"#292d39\",\n            elevation2: \"#181c20\",\n            elevation3: \"#373c4b\",\n            accent1: \"#0066dc\",\n            accent2: \"#007bff\",\n            accent3: \"#3c93ff\",\n            highlight1: \"#535760\",\n            highlight2: \"#8c92a4\",\n            highlight3: \"#fefefe\",\n            vivid1: \"#ffcc00\",\n            folderWidgetColor: \"$highlight2\",\n            folderTextColor: \"$highlight3\",\n            toolTipBackground: \"$highlight3\",\n            toolTipText: \"$elevation2\"\n        },\n        radii: {\n            xs: \"2px\",\n            sm: \"3px\",\n            lg: \"10px\"\n        },\n        space: {\n            xs: \"3px\",\n            sm: \"6px\",\n            md: \"10px\",\n            rowGap: \"7px\",\n            colGap: \"7px\"\n        },\n        fonts: {\n            mono: `ui-monospace, SFMono-Regular, Menlo, 'Roboto Mono', monospace`,\n            sans: `system-ui, sans-serif`\n        },\n        fontSizes: {\n            root: \"11px\",\n            toolTip: \"$root\"\n        },\n        sizes: {\n            rootWidth: \"280px\",\n            controlWidth: \"160px\",\n            numberInputMinWidth: \"38px\",\n            scrubberWidth: \"8px\",\n            scrubberHeight: \"16px\",\n            rowHeight: \"24px\",\n            folderTitleHeight: \"20px\",\n            checkboxSize: \"16px\",\n            joystickWidth: \"100px\",\n            joystickHeight: \"100px\",\n            colorPickerWidth: \"$controlWidth\",\n            colorPickerHeight: \"100px\",\n            imagePreviewWidth: \"$controlWidth\",\n            imagePreviewHeight: \"100px\",\n            monitorHeight: \"60px\",\n            titleBarHeight: \"39px\"\n        },\n        shadows: {\n            level1: \"0 0 9px 0 #00000088\",\n            level2: \"0 4px 14px #00000033\"\n        },\n        borderWidths: {\n            root: \"0px\",\n            input: \"1px\",\n            focus: \"1px\",\n            hover: \"1px\",\n            active: \"1px\",\n            folder: \"1px\"\n        },\n        fontWeights: {\n            label: \"normal\",\n            folder: \"normal\",\n            button: \"normal\"\n        }\n    });\nfunction createStateClass(value, options) {\n    const [borderColor, bgColor] = value.split(\" \");\n    const css = {};\n    if (borderColor !== \"none\") {\n        css.boxShadow = `${options.inset ? \"inset \" : \"\"}0 0 0 $borderWidths${[\n            options.key\n        ]} $colors${borderColor !== \"default\" && borderColor || options.borderColor}`;\n    }\n    if (bgColor) {\n        css.backgroundColor = bgColor;\n    }\n    return css;\n}\nconst utils = {\n    $inputStyle: ()=>(value)=>createStateClass(value, {\n                key: \"$input\",\n                borderColor: \"$highlight1\",\n                inset: true\n            }),\n    $focusStyle: ()=>(value)=>createStateClass(value, {\n                key: \"$focus\",\n                borderColor: \"$accent2\"\n            }),\n    $hoverStyle: ()=>(value)=>createStateClass(value, {\n                key: \"$hover\",\n                borderColor: \"$accent1\",\n                inset: true\n            }),\n    $activeStyle: ()=>(value)=>createStateClass(value, {\n                key: \"$active\",\n                borderColor: \"$accent1\",\n                inset: true\n            })\n};\nconst { styled, css, createTheme, globalCss, keyframes } = (0,_stitches_react__WEBPACK_IMPORTED_MODULE_4__.createStitches)({\n    prefix: \"leva\",\n    theme: getDefaultTheme(),\n    utils: _objectSpread2(_objectSpread2({}, utils), {}, {\n        $flex: ()=>({\n                display: \"flex\",\n                alignItems: \"center\"\n            }),\n        $flexCenter: ()=>({\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\"\n            }),\n        $reset: ()=>({\n                outline: \"none\",\n                fontSize: \"inherit\",\n                fontWeight: \"inherit\",\n                color: \"inherit\",\n                fontFamily: \"inherit\",\n                border: \"none\",\n                backgroundColor: \"transparent\",\n                appearance: \"none\"\n            }),\n        $draggable: ()=>({\n                touchAction: \"none\",\n                WebkitUserDrag: \"none\",\n                userSelect: \"none\"\n            }),\n        $focus: (value)=>({\n                \"&:focus\": utils.$focusStyle()(value)\n            }),\n        $focusWithin: (value)=>({\n                \"&:focus-within\": utils.$focusStyle()(value)\n            }),\n        $hover: (value)=>({\n                \"&:hover\": utils.$hoverStyle()(value)\n            }),\n        $active: (value)=>({\n                \"&:active\": utils.$activeStyle()(value)\n            })\n    })\n});\nconst globalStyles = globalCss({\n    \".leva__panel__dragged\": {\n        WebkitUserDrag: \"none\",\n        userSelect: \"none\",\n        input: {\n            userSelect: \"none\"\n        },\n        \"*\": {\n            cursor: \"ew-resize !important\"\n        }\n    }\n});\nfunction mergeTheme(newTheme) {\n    const defaultTheme = getDefaultTheme();\n    if (!newTheme) return {\n        theme: defaultTheme,\n        className: \"\"\n    };\n    Object.keys(newTheme).forEach((key)=>{\n        Object.assign(defaultTheme[key], newTheme[key]);\n    });\n    const customTheme = createTheme(defaultTheme);\n    return {\n        theme: defaultTheme,\n        className: customTheme.className\n    };\n}\nfunction useTh(category, key) {\n    const { theme } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemeContext);\n    if (!(category in theme) || !(key in theme[category])) {\n        warn(LevaErrors.THEME_ERROR, category, key);\n        return \"\";\n    }\n    let _key = key;\n    while(true){\n        let value = theme[category][_key];\n        if (typeof value === \"string\" && value.charAt(0) === \"$\") _key = value.substr(1);\n        else return value;\n    }\n}\nconst StyledInput = styled(\"input\", {\n    $reset: \"\",\n    padding: \"0 $sm\",\n    width: 0,\n    minWidth: 0,\n    flex: 1,\n    height: \"100%\",\n    variants: {\n        levaType: {\n            number: {\n                textAlign: \"right\"\n            }\n        },\n        as: {\n            textarea: {\n                padding: \"$sm\"\n            }\n        }\n    }\n});\nconst InnerLabel = styled(\"div\", {\n    $draggable: \"\",\n    height: \"100%\",\n    $flexCenter: \"\",\n    position: \"relative\",\n    padding: \"0 $xs\",\n    fontSize: \"0.8em\",\n    opacity: 0.8,\n    cursor: \"default\",\n    touchAction: \"none\",\n    [`& + ${StyledInput}`]: {\n        paddingLeft: 0\n    }\n});\nconst InnerNumberLabel = styled(InnerLabel, {\n    cursor: \"ew-resize\",\n    marginRight: \"-$xs\",\n    textTransform: \"uppercase\",\n    opacity: 0.3,\n    \"&:hover\": {\n        opacity: 1\n    },\n    variants: {\n        dragging: {\n            true: {\n                backgroundColor: \"$accent2\",\n                opacity: 1\n            }\n        }\n    }\n});\nconst InputContainer = styled(\"div\", {\n    $flex: \"\",\n    position: \"relative\",\n    borderRadius: \"$sm\",\n    overflow: \"hidden\",\n    color: \"inherit\",\n    height: \"$rowHeight\",\n    backgroundColor: \"$elevation3\",\n    $inputStyle: \"$elevation1\",\n    $hover: \"\",\n    $focusWithin: \"\",\n    variants: {\n        textArea: {\n            true: {\n                height: \"auto\"\n            }\n        }\n    }\n});\nconst _excluded$7 = [\n    \"innerLabel\",\n    \"value\",\n    \"onUpdate\",\n    \"onChange\",\n    \"onKeyDown\",\n    \"type\",\n    \"id\",\n    \"inputType\",\n    \"rows\"\n], _excluded2$1 = [\n    \"onUpdate\"\n];\nfunction ValueInput(_ref) {\n    let { innerLabel, value, onUpdate, onChange, onKeyDown, type, id, inputType = \"text\", rows = 0 } = _ref, props = _objectWithoutProperties(_ref, _excluded$7);\n    const { id: _id, emitOnEditStart, emitOnEditEnd, disabled } = useInputContext();\n    const inputId = id || _id;\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isTextArea = rows > 0;\n    const asType = isTextArea ? \"textarea\" : \"input\";\n    const update = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((fn)=>(event)=>{\n            const _value = event.currentTarget.value;\n            fn(_value);\n        }, []);\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        const ref = inputRef.current;\n        const _onUpdate = update((value)=>{\n            onUpdate(value);\n            emitOnEditEnd();\n        });\n        ref === null || ref === void 0 ? void 0 : ref.addEventListener(\"blur\", _onUpdate);\n        return ()=>ref === null || ref === void 0 ? void 0 : ref.removeEventListener(\"blur\", _onUpdate);\n    }, [\n        update,\n        onUpdate,\n        emitOnEditEnd\n    ]);\n    const onKeyPress = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n        if (event.key === \"Enter\") {\n            update(onUpdate)(event);\n        }\n    }, [\n        update,\n        onUpdate\n    ]);\n    const inputProps = Object.assign({\n        as: asType\n    }, isTextArea ? {\n        rows\n    } : {}, props);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(InputContainer, {\n        textArea: isTextArea\n    }, innerLabel && typeof innerLabel === \"string\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(InnerLabel, null, innerLabel) : innerLabel, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StyledInput, _extends({\n        levaType: type,\n        ref: inputRef,\n        id: inputId,\n        type: inputType,\n        autoComplete: \"off\",\n        spellCheck: \"false\",\n        value: value,\n        onChange: update(onChange),\n        onFocus: ()=>emitOnEditStart(),\n        onKeyPress: onKeyPress,\n        onKeyDown: onKeyDown,\n        disabled: disabled\n    }, inputProps)));\n}\nfunction NumberInput(_ref2) {\n    let { onUpdate } = _ref2, props = _objectWithoutProperties(_ref2, _excluded2$1);\n    const _onUpdate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((v)=>onUpdate(parseNumber(v)), [\n        onUpdate\n    ]);\n    const onKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n        const dir = event.key === \"ArrowUp\" ? 1 : event.key === \"ArrowDown\" ? -1 : 0;\n        if (dir) {\n            event.preventDefault();\n            const step = event.altKey ? 0.1 : event.shiftKey ? 10 : 1;\n            onUpdate((v)=>parseFloat(v) + dir * step);\n        }\n    }, [\n        onUpdate\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ValueInput, _extends({}, props, {\n        onUpdate: _onUpdate,\n        onKeyDown: onKeyDown,\n        type: \"number\"\n    }));\n}\nconst StyledFolder = styled(\"div\", {});\nconst StyledWrapper = styled(\"div\", {\n    position: \"relative\",\n    background: \"$elevation2\",\n    transition: \"height 300ms ease\",\n    variants: {\n        fill: {\n            true: {},\n            false: {}\n        },\n        flat: {\n            false: {},\n            true: {}\n        },\n        isRoot: {\n            true: {},\n            false: {\n                paddingLeft: \"$md\",\n                \"&::after\": {\n                    content: '\"\"',\n                    position: \"absolute\",\n                    left: 0,\n                    top: 0,\n                    width: \"$borderWidths$folder\",\n                    height: \"100%\",\n                    backgroundColor: \"$folderWidgetColor\",\n                    opacity: 0.4,\n                    transform: \"translateX(-50%)\"\n                }\n            }\n        }\n    },\n    compoundVariants: [\n        {\n            isRoot: true,\n            fill: false,\n            css: {\n                overflowY: \"auto\",\n                maxHeight: \"calc(100vh - 20px - $$titleBarHeight)\"\n            }\n        },\n        {\n            isRoot: true,\n            flat: false,\n            css: {\n                borderRadius: \"$lg\"\n            }\n        }\n    ]\n});\nconst StyledTitle = styled(\"div\", {\n    $flex: \"\",\n    color: \"$folderTextColor\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    height: \"$folderTitleHeight\",\n    fontWeight: \"$folder\",\n    \"> svg\": {\n        marginLeft: -4,\n        marginRight: 4,\n        cursor: \"pointer\",\n        fill: \"$folderWidgetColor\",\n        opacity: 0.6\n    },\n    \"&:hover > svg\": {\n        fill: \"$folderWidgetColor\"\n    },\n    [`&:hover + ${StyledWrapper}::after`]: {\n        opacity: 0.6\n    },\n    [`${StyledFolder}:hover > & + ${StyledWrapper}::after`]: {\n        opacity: 0.6\n    },\n    [`${StyledFolder}:hover > & > svg`]: {\n        opacity: 1\n    }\n});\nconst StyledContent = styled(\"div\", {\n    position: \"relative\",\n    display: \"grid\",\n    gridTemplateColumns: \"100%\",\n    rowGap: \"$rowGap\",\n    transition: \"opacity 250ms ease\",\n    variants: {\n        toggled: {\n            true: {\n                opacity: 1,\n                transitionDelay: \"250ms\"\n            },\n            false: {\n                opacity: 0,\n                transitionDelay: \"0ms\",\n                pointerEvents: \"none\"\n            }\n        },\n        isRoot: {\n            true: {\n                \"& > div\": {\n                    paddingLeft: \"$md\",\n                    paddingRight: \"$md\"\n                },\n                \"& > div:first-of-type\": {\n                    paddingTop: \"$sm\"\n                },\n                \"& > div:last-of-type\": {\n                    paddingBottom: \"$sm\"\n                },\n                [`> ${StyledFolder}:not(:first-of-type)`]: {\n                    paddingTop: \"$sm\",\n                    marginTop: \"$md\",\n                    borderTop: \"$borderWidths$folder solid $colors$elevation1\"\n                }\n            }\n        }\n    }\n});\nconst StyledRow = styled(\"div\", {\n    position: \"relative\",\n    zIndex: 100,\n    display: \"grid\",\n    rowGap: \"$rowGap\",\n    gridTemplateRows: \"minmax($sizes$rowHeight, max-content)\",\n    alignItems: \"center\",\n    color: \"$highlight2\",\n    [`${StyledContent} > &`]: {\n        \"&:first-of-type\": {\n            marginTop: \"$rowGap\"\n        },\n        \"&:last-of-type\": {\n            marginBottom: \"$rowGap\"\n        }\n    },\n    variants: {\n        disabled: {\n            true: {\n                pointerEvents: \"none\"\n            },\n            false: {\n                \"&:hover,&:focus-within\": {\n                    color: \"$highlight3\"\n                }\n            }\n        }\n    }\n});\nconst StyledInputRow = styled(StyledRow, {\n    gridTemplateColumns: \"auto $sizes$controlWidth\",\n    columnGap: \"$colGap\"\n});\nconst CopyLabelContainer = styled(\"div\", {\n    $flex: \"\",\n    height: \"100%\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    \"& > div\": {\n        marginLeft: \"$colGap\",\n        padding: \"0 $xs\",\n        opacity: 0.4\n    },\n    \"& > div:hover\": {\n        opacity: 0.8\n    },\n    \"& > div > svg\": {\n        display: \"none\",\n        cursor: \"pointer\",\n        width: 13,\n        minWidth: 13,\n        height: 13,\n        backgroundColor: \"$elevation2\"\n    },\n    \"&:hover > div > svg\": {\n        display: \"block\"\n    },\n    variants: {\n        align: {\n            top: {\n                height: \"100%\",\n                alignItems: \"flex-start\",\n                paddingTop: \"$sm\"\n            }\n        }\n    }\n});\nconst StyledOptionalToggle = styled(\"input\", {\n    $reset: \"\",\n    height: 0,\n    width: 0,\n    opacity: 0,\n    margin: 0,\n    \"& + label\": {\n        position: \"relative\",\n        $flexCenter: \"\",\n        height: \"100%\",\n        userSelect: \"none\",\n        cursor: \"pointer\",\n        paddingLeft: 2,\n        paddingRight: \"$sm\",\n        pointerEvents: \"auto\"\n    },\n    \"& + label:after\": {\n        content: '\"\"',\n        width: 6,\n        height: 6,\n        backgroundColor: \"$elevation3\",\n        borderRadius: \"50%\",\n        $activeStyle: \"\"\n    },\n    \"&:focus + label:after\": {\n        $focusStyle: \"\"\n    },\n    \"& + label:active:after\": {\n        backgroundColor: \"$accent1\",\n        $focusStyle: \"\"\n    },\n    \"&:checked + label:after\": {\n        backgroundColor: \"$accent1\"\n    }\n});\nconst StyledLabel = styled(\"label\", {\n    fontWeight: \"$label\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    \"& > svg\": {\n        display: \"block\"\n    }\n});\nconst StyledInputWrapper$1 = styled(\"div\", {\n    opacity: 1,\n    variants: {\n        disabled: {\n            true: {\n                opacity: 0.6,\n                pointerEvents: \"none\",\n                [`& ${StyledLabel}`]: {\n                    pointerEvents: \"auto\"\n                }\n            }\n        }\n    }\n});\nconst Overlay = styled(\"div\", {\n    position: \"fixed\",\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    zIndex: 1000,\n    userSelect: \"none\"\n});\nconst StyledToolTipContent = styled(\"div\", {\n    background: \"$toolTipBackground\",\n    fontFamily: \"$sans\",\n    fontSize: \"$toolTip\",\n    padding: \"$xs $sm\",\n    color: \"$toolTipText\",\n    borderRadius: \"$xs\",\n    boxShadow: \"$level2\",\n    maxWidth: 260\n});\nconst ToolTipArrow = styled(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_5__.Arrow, {\n    fill: \"$toolTipBackground\"\n});\nfunction Portal({ children }) {\n    const { className } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemeContext);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_6__.Root, {\n        className: className\n    }, children);\n}\nconst _excluded$6 = [\n    \"align\"\n];\nfunction OptionalToggle() {\n    const { id, disable, disabled } = useInputContext();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StyledOptionalToggle, {\n        id: id + \"__disable\",\n        type: \"checkbox\",\n        checked: !disabled,\n        onChange: ()=>disable(!disabled)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"label\", {\n        htmlFor: id + \"__disable\"\n    }));\n}\nfunction RawLabel(props) {\n    const { id, optional, hint } = useInputContext();\n    const htmlFor = props.htmlFor || (id ? {\n        htmlFor: id\n    } : null);\n    const title = !hint && typeof props.children === \"string\" ? {\n        title: props.children\n    } : null;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, optional && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(OptionalToggle, null), hint !== undefined ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_5__.Root, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_5__.Trigger, {\n        asChild: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StyledLabel, _extends({}, htmlFor, props))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_5__.Content, {\n        side: \"top\",\n        sideOffset: 2\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StyledToolTipContent, null, hint, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ToolTipArrow, null)))) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StyledLabel, _extends({}, htmlFor, title, props)));\n}\nfunction Label(_ref) {\n    let { align } = _ref, props = _objectWithoutProperties(_ref, _excluded$6);\n    const { value, label, key, disabled } = useInputContext();\n    const { hideCopyButton } = usePanelSettingsContext();\n    const copyEnabled = !hideCopyButton && key !== undefined;\n    const [copied, setCopied] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleClick = async ()=>{\n        try {\n            await navigator.clipboard.writeText(JSON.stringify({\n                [key]: value !== null && value !== void 0 ? value : \"\"\n            }));\n            setCopied(true);\n        } catch (_unused) {\n            warn(LevaErrors.CLIPBOARD_ERROR, {\n                [key]: value\n            });\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CopyLabelContainer, {\n        align: align,\n        onPointerLeave: ()=>setCopied(false)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(RawLabel, props), copyEnabled && !disabled && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        title: `Click to copy ${typeof label === \"string\" ? label : key} value`\n    }, !copied ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n        onClick: handleClick,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 20 20\",\n        fill: \"currentColor\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        d: \"M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        d: \"M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z\"\n    })) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 20 20\",\n        fill: \"currentColor\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        d: \"M9 2a1 1 0 000 2h2a1 1 0 100-2H9z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm9.707 5.707a1 1 0 00-1.414-1.414L9 12.586l-1.293-1.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\",\n        clipRule: \"evenodd\"\n    }))));\n}\nconst _excluded$5 = [\n    \"toggled\"\n];\nconst Svg = styled(\"svg\", {\n    fill: \"currentColor\",\n    transition: \"transform 350ms ease, fill 250ms ease\"\n});\nfunction Chevron(_ref) {\n    let { toggled } = _ref, props = _objectWithoutProperties(_ref, _excluded$5);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Svg, _extends({\n        width: \"9\",\n        height: \"5\",\n        viewBox: \"0 0 9 5\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        style: {\n            transform: `rotate(${toggled ? 0 : -90}deg)`\n        }\n    }, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        d: \"M3.8 4.4c.4.3 1 .3 1.4 0L8 1.7A1 1 0 007.4 0H1.6a1 1 0 00-.7 1.7l3 2.7z\"\n    }));\n}\nconst _excluded$4 = [\n    \"input\"\n];\nfunction Row(_ref) {\n    let { input } = _ref, props = _objectWithoutProperties(_ref, _excluded$4);\n    if (input) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StyledInputRow, props);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StyledRow, props);\n}\nfunction useInputSetters({ value, type, settings, setValue }) {\n    const [displayValue, setDisplayValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(format$2(type, value, settings));\n    const previousValueRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(value);\n    const settingsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(settings);\n    settingsRef.current = settings;\n    const setFormat = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((v)=>setDisplayValue(format$2(type, v, settingsRef.current)), [\n        type\n    ]);\n    const onUpdate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((updatedValue)=>{\n        try {\n            setValue(updatedValue);\n        } catch (error) {\n            const { type, previousValue } = error;\n            if (type !== \"LEVA_ERROR\") throw error;\n            setFormat(previousValue);\n        }\n    }, [\n        setFormat,\n        setValue\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!(0,dequal_lite__WEBPACK_IMPORTED_MODULE_2__.dequal)(value, previousValueRef.current)) {\n            setFormat(value);\n        }\n        previousValueRef.current = value;\n    }, [\n        value,\n        setFormat\n    ]);\n    return {\n        displayValue,\n        onChange: setDisplayValue,\n        onUpdate\n    };\n}\nfunction useDrag(handler, config) {\n    const { emitOnEditStart, emitOnEditEnd } = useInputContext();\n    return (0,_use_gesture_react__WEBPACK_IMPORTED_MODULE_7__.useDrag)((state)=>{\n        if (state.first) {\n            document.body.classList.add(\"leva__panel__dragged\");\n            emitOnEditStart === null || emitOnEditStart === void 0 ? void 0 : emitOnEditStart();\n        }\n        const result = handler(state);\n        if (state.last) {\n            document.body.classList.remove(\"leva__panel__dragged\");\n            emitOnEditEnd === null || emitOnEditEnd === void 0 ? void 0 : emitOnEditEnd();\n        }\n        return result;\n    }, config);\n}\nfunction useCanvas2d(fn) {\n    const canvas = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const hasFired = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleCanvas = debounce(()=>{\n            canvas.current.width = canvas.current.offsetWidth * window.devicePixelRatio;\n            canvas.current.height = canvas.current.offsetHeight * window.devicePixelRatio;\n            fn(canvas.current, ctx.current);\n        }, 250);\n        window.addEventListener(\"resize\", handleCanvas);\n        if (!hasFired.current) {\n            handleCanvas();\n            hasFired.current = true;\n        }\n        return ()=>window.removeEventListener(\"resize\", handleCanvas);\n    }, [\n        fn\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        ctx.current = canvas.current.getContext(\"2d\");\n    }, []);\n    return [\n        canvas,\n        ctx\n    ];\n}\nfunction useTransform() {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const local = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        x: 0,\n        y: 0\n    });\n    const set = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((point)=>{\n        Object.assign(local.current, point);\n        if (ref.current) ref.current.style.transform = `translate3d(${local.current.x}px, ${local.current.y}px, 0)`;\n    }, []);\n    return [\n        ref,\n        set\n    ];\n}\nconst _excluded$3 = [\n    \"__refCount\"\n];\nconst getInputAtPath = (data, path)=>{\n    if (!data[path]) return null;\n    const _data$path = data[path], input = _objectWithoutProperties(_data$path, _excluded$3);\n    return input;\n};\nfunction useInput(path) {\n    const store = useStoreContext();\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(getInputAtPath(store.getData(), path));\n    const set = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((value)=>store.setValueAtPath(path, value, true), [\n        path,\n        store\n    ]);\n    const setSettings = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((settings)=>store.setSettingsAtPath(path, settings), [\n        path,\n        store\n    ]);\n    const disable = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((flag)=>store.disableInputAtPath(path, flag), [\n        path,\n        store\n    ]);\n    const emitOnEditStart = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>store.emitOnEditStart(path), [\n        path,\n        store\n    ]);\n    const emitOnEditEnd = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>store.emitOnEditEnd(path), [\n        path,\n        store\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setState(getInputAtPath(store.getData(), path));\n        const unsub = store.useStore.subscribe((s)=>getInputAtPath(s.data, path), setState, {\n            equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n        });\n        return ()=>unsub();\n    }, [\n        store,\n        path\n    ]);\n    return [\n        state,\n        {\n            set,\n            setSettings,\n            disable,\n            storeId: store.storeId,\n            emitOnEditStart,\n            emitOnEditEnd\n        }\n    ];\n}\nconst RangeGrid = styled(\"div\", {\n    variants: {\n        hasRange: {\n            true: {\n                position: \"relative\",\n                display: \"grid\",\n                gridTemplateColumns: \"auto $sizes$numberInputMinWidth\",\n                columnGap: \"$colGap\",\n                alignItems: \"center\"\n            }\n        }\n    }\n});\nconst Range = styled(\"div\", {\n    position: \"relative\",\n    width: \"100%\",\n    height: 2,\n    borderRadius: \"$xs\",\n    backgroundColor: \"$elevation1\"\n});\nconst Scrubber = styled(\"div\", {\n    position: \"absolute\",\n    width: \"$scrubberWidth\",\n    height: \"$scrubberHeight\",\n    borderRadius: \"$xs\",\n    boxShadow: \"0 0 0 2px $colors$elevation2\",\n    backgroundColor: \"$accent2\",\n    cursor: \"pointer\",\n    $active: \"none $accent1\",\n    $hover: \"none $accent3\",\n    variants: {\n        position: {\n            left: {\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n                transform: \"translateX(calc(-0.5 * ($sizes$scrubberWidth + 4px)))\"\n            },\n            right: {\n                borderTopLeftRadius: 0,\n                borderBottomLeftRadius: 0,\n                transform: \"translateX(calc(0.5 * ($sizes$scrubberWidth + 4px)))\"\n            }\n        }\n    }\n});\nconst RangeWrapper = styled(\"div\", {\n    position: \"relative\",\n    $flex: \"\",\n    height: \"100%\",\n    cursor: \"pointer\",\n    touchAction: \"none\"\n});\nconst Indicator = styled(\"div\", {\n    position: \"absolute\",\n    height: \"100%\",\n    backgroundColor: \"$accent2\"\n});\nfunction RangeSlider({ value, min, max, onDrag, step, initialValue }) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const scrubberRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const rangeWidth = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const scrubberWidth = useTh(\"sizes\", \"scrubberWidth\");\n    const bind = useDrag(({ event, first, xy: [x], movement: [mx], memo })=>{\n        if (first) {\n            const { width, left } = ref.current.getBoundingClientRect();\n            rangeWidth.current = width - parseFloat(scrubberWidth);\n            const targetIsScrub = (event === null || event === void 0 ? void 0 : event.target) === scrubberRef.current;\n            memo = targetIsScrub ? value : invertedRange((x - left) / width, min, max);\n        }\n        const newValue = memo + invertedRange(mx / rangeWidth.current, 0, max - min);\n        onDrag(sanitizeStep$1(newValue, {\n            step,\n            initialValue\n        }));\n        return memo;\n    });\n    const pos = range(value, min, max);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(RangeWrapper, _extends({\n        ref: ref\n    }, bind()), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Range, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Indicator, {\n        style: {\n            left: 0,\n            right: `${(1 - pos) * 100}%`\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Scrubber, {\n        ref: scrubberRef,\n        style: {\n            left: `calc(${pos} * (100% - ${scrubberWidth}))`\n        }\n    }));\n}\nconst DraggableLabel = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().memo(({ label, onUpdate, step, innerLabelTrim })=>{\n    const [dragging, setDragging] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const bind = useDrag(({ active, delta: [dx], event, memo: _memo = 0 })=>{\n        setDragging(active);\n        _memo += dx / 2;\n        if (Math.abs(_memo) >= 1) {\n            onUpdate((v)=>parseFloat(v) + Math.floor(_memo) * step * multiplyStep(event));\n            _memo = 0;\n        }\n        return _memo;\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(InnerNumberLabel, _extends({\n        dragging: dragging,\n        title: label.length > 1 ? label : \"\"\n    }, bind()), label.slice(0, innerLabelTrim));\n});\nfunction Number$1({ label, id, displayValue, onUpdate, onChange, settings, innerLabelTrim = 1 }) {\n    const InnerLabel = innerLabelTrim > 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(DraggableLabel, {\n        label: label,\n        step: settings.step,\n        onUpdate: onUpdate,\n        innerLabelTrim: innerLabelTrim\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(NumberInput, {\n        id: id,\n        value: String(displayValue),\n        onUpdate: onUpdate,\n        onChange: onChange,\n        innerLabel: InnerLabel\n    });\n}\nfunction NumberComponent() {\n    const props = useInputContext();\n    const { label, value, onUpdate, settings, id } = props;\n    const { min, max } = settings;\n    const hasRange = max !== Infinity && min !== -Infinity;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Row, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Label, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(RangeGrid, {\n        hasRange: hasRange\n    }, hasRange && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(RangeSlider, _extends({\n        value: parseFloat(value),\n        onDrag: onUpdate\n    }, settings)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Number$1, _extends({}, props, {\n        id: id,\n        label: \"value\",\n        innerLabelTrim: hasRange ? 0 : 1\n    }))));\n}\nconst { sanitizeStep } = props$3, rest = _objectWithoutProperties(props$3, [\n    \"sanitizeStep\"\n]);\nvar number = createInternalPlugin(_objectSpread2({\n    component: NumberComponent\n}, rest));\nconst schema$2 = (_o, s)=>(0,v8n__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().schema({\n        options: (0,v8n__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().passesAnyOf((0,v8n__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().object(), (0,v8n__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().array())\n    }).test(s);\nconst sanitize$2 = (value, { values })=>{\n    if (values.indexOf(value) < 0) throw Error(`Selected value doesn't match Select options`);\n    return value;\n};\nconst format = (value, { values })=>{\n    return values.indexOf(value);\n};\nconst normalize$1 = (input)=>{\n    let { value, options } = input;\n    let keys;\n    let values;\n    if (Array.isArray(options)) {\n        values = options;\n        keys = options.map((o)=>String(o));\n    } else {\n        values = Object.values(options);\n        keys = Object.keys(options);\n    }\n    if (!(\"value\" in input)) value = values[0];\n    else if (!values.includes(value)) {\n        keys.unshift(String(value));\n        values.unshift(value);\n    }\n    if (!Object.values(options).includes(value)) options[String(value)] = value;\n    return {\n        value,\n        settings: {\n            keys,\n            values\n        }\n    };\n};\nvar props$2 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema$2,\n    sanitize: sanitize$2,\n    format: format,\n    normalize: normalize$1\n});\nconst SelectContainer = styled(\"div\", {\n    $flexCenter: \"\",\n    position: \"relative\",\n    \"> svg\": {\n        pointerEvents: \"none\",\n        position: \"absolute\",\n        right: \"$md\"\n    }\n});\nconst NativeSelect = styled(\"select\", {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    opacity: 0\n});\nconst PresentationalSelect = styled(\"div\", {\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: \"$rowHeight\",\n    backgroundColor: \"$elevation3\",\n    borderRadius: \"$sm\",\n    padding: \"0 $sm\",\n    cursor: \"pointer\",\n    [`${NativeSelect}:focus + &`]: {\n        $focusStyle: \"\"\n    },\n    [`${NativeSelect}:hover + &`]: {\n        $hoverStyle: \"\"\n    }\n});\nfunction Select({ displayValue, value, onUpdate, id, settings, disabled }) {\n    const { keys, values } = settings;\n    const lastDisplayedValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    if (value === values[displayValue]) {\n        lastDisplayedValue.current = keys[displayValue];\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(SelectContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(NativeSelect, {\n        id: id,\n        value: displayValue,\n        onChange: (e)=>onUpdate(values[Number(e.currentTarget.value)]),\n        disabled: disabled\n    }, keys.map((key, index)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", {\n            key: key,\n            value: index\n        }, key))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(PresentationalSelect, null, lastDisplayedValue.current), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Chevron, {\n        toggled: true\n    }));\n}\nfunction SelectComponent() {\n    const { label, value, displayValue, onUpdate, id, disabled, settings } = useInputContext();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Row, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Label, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Select, {\n        id: id,\n        value: value,\n        displayValue: displayValue,\n        onUpdate: onUpdate,\n        settings: settings,\n        disabled: disabled\n    }));\n}\nvar select = createInternalPlugin(_objectSpread2({\n    component: SelectComponent\n}, props$2));\nconst schema$1 = (o)=>(0,v8n__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().string().test(o);\nconst sanitize$1 = (v)=>{\n    if (typeof v !== \"string\") throw Error(`Invalid string`);\n    return v;\n};\nconst normalize = ({ value, editable: _editable = true, rows: _rows = false })=>{\n    return {\n        value,\n        settings: {\n            editable: _editable,\n            rows: typeof _rows === \"number\" ? _rows : _rows ? 5 : 0\n        }\n    };\n};\nvar props$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema$1,\n    sanitize: sanitize$1,\n    normalize: normalize\n});\nconst _excluded$2 = [\n    \"displayValue\",\n    \"onUpdate\",\n    \"onChange\",\n    \"editable\"\n];\nconst NonEditableString = styled(\"div\", {\n    whiteSpace: \"pre-wrap\"\n});\nfunction String$1(_ref) {\n    let { displayValue, onUpdate, onChange, editable = true } = _ref, props = _objectWithoutProperties(_ref, _excluded$2);\n    if (editable) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ValueInput, _extends({\n        value: displayValue,\n        onUpdate: onUpdate,\n        onChange: onChange\n    }, props));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(NonEditableString, null, displayValue);\n}\nfunction StringComponent() {\n    const { label, settings, displayValue, onUpdate, onChange } = useInputContext();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Row, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Label, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(String$1, _extends({\n        displayValue: displayValue,\n        onUpdate: onUpdate,\n        onChange: onChange\n    }, settings)));\n}\nvar string = createInternalPlugin(_objectSpread2({\n    component: StringComponent\n}, props$1));\nconst schema = (o)=>(0,v8n__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().boolean().test(o);\nconst sanitize = (v)=>{\n    if (typeof v !== \"boolean\") throw Error(\"Invalid boolean\");\n    return v;\n};\nvar props = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema,\n    sanitize: sanitize\n});\nconst StyledInputWrapper = styled(\"div\", {\n    position: \"relative\",\n    $flex: \"\",\n    height: \"$rowHeight\",\n    input: {\n        $reset: \"\",\n        height: 0,\n        width: 0,\n        opacity: 0,\n        margin: 0\n    },\n    label: {\n        position: \"relative\",\n        $flexCenter: \"\",\n        userSelect: \"none\",\n        cursor: \"pointer\",\n        height: \"$checkboxSize\",\n        width: \"$checkboxSize\",\n        backgroundColor: \"$elevation3\",\n        borderRadius: \"$sm\",\n        $hover: \"\"\n    },\n    \"input:focus + label\": {\n        $focusStyle: \"\"\n    },\n    \"input:focus:checked + label, input:checked + label:hover\": {\n        $hoverStyle: \"$accent3\"\n    },\n    \"input + label:active\": {\n        backgroundColor: \"$accent1\"\n    },\n    \"input:checked + label:active\": {\n        backgroundColor: \"$accent1\"\n    },\n    \"label > svg\": {\n        display: \"none\",\n        width: \"90%\",\n        height: \"90%\",\n        stroke: \"$highlight3\"\n    },\n    \"input:checked + label\": {\n        backgroundColor: \"$accent2\"\n    },\n    \"input:checked + label > svg\": {\n        display: \"block\"\n    }\n});\nfunction Boolean({ value, onUpdate, id, disabled }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(StyledInputWrapper, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"input\", {\n        id: id,\n        type: \"checkbox\",\n        checked: value,\n        onChange: (e)=>onUpdate(e.currentTarget.checked),\n        disabled: disabled\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"label\", {\n        htmlFor: id\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: 2,\n        d: \"M5 13l4 4L19 7\"\n    }))));\n}\nfunction BooleanComponent() {\n    const { label, value, onUpdate, disabled, id } = useInputContext();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Row, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Label, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Boolean, {\n        value: value,\n        onUpdate: onUpdate,\n        id: id,\n        disabled: disabled\n    }));\n}\nvar boolean = createInternalPlugin(_objectSpread2({\n    component: BooleanComponent\n}, props));\nconst _excluded$1 = [\n    \"locked\"\n];\nfunction Coordinate({ value, id, valueKey, settings, onUpdate, innerLabelTrim }) {\n    const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(value[valueKey]);\n    valueRef.current = value[valueKey];\n    const setValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((newValue)=>onUpdate({\n            [valueKey]: sanitizeValue({\n                type: \"NUMBER\",\n                value: valueRef.current,\n                settings\n            }, newValue)\n        }), [\n        onUpdate,\n        settings,\n        valueKey\n    ]);\n    const number = useInputSetters({\n        type: \"NUMBER\",\n        value: value[valueKey],\n        settings,\n        setValue\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Number$1, {\n        id: id,\n        label: valueKey,\n        value: value[valueKey],\n        displayValue: number.displayValue,\n        onUpdate: number.onUpdate,\n        onChange: number.onChange,\n        settings: settings,\n        innerLabelTrim: innerLabelTrim\n    });\n}\nconst Container = styled(\"div\", {\n    display: \"grid\",\n    columnGap: \"$colGap\",\n    gridAutoFlow: \"column dense\",\n    alignItems: \"center\",\n    variants: {\n        withLock: {\n            true: {\n                gridTemplateColumns: \"10px auto\",\n                \"> svg\": {\n                    cursor: \"pointer\"\n                }\n            }\n        }\n    }\n});\nfunction Lock(_ref) {\n    let { locked } = _ref, props = _objectWithoutProperties(_ref, _excluded$1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", _extends({\n        width: \"10\",\n        height: \"10\",\n        viewBox: \"0 0 15 15\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, props), locked ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        d: \"M5 4.63601C5 3.76031 5.24219 3.1054 5.64323 2.67357C6.03934 2.24705 6.64582 1.9783 7.5014 1.9783C8.35745 1.9783 8.96306 2.24652 9.35823 2.67208C9.75838 3.10299 10 3.75708 10 4.63325V5.99999H5V4.63601ZM4 5.99999V4.63601C4 3.58148 4.29339 2.65754 4.91049 1.99307C5.53252 1.32329 6.42675 0.978302 7.5014 0.978302C8.57583 0.978302 9.46952 1.32233 10.091 1.99162C10.7076 2.65557 11 3.57896 11 4.63325V5.99999H12C12.5523 5.99999 13 6.44771 13 6.99999V13C13 13.5523 12.5523 14 12 14H3C2.44772 14 2 13.5523 2 13V6.99999C2 6.44771 2.44772 5.99999 3 5.99999H4ZM3 6.99999H12V13H3V6.99999Z\",\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\"\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        d: \"M9 3.63601C9 2.76044 9.24207 2.11211 9.64154 1.68623C10.0366 1.26502 10.6432 1 11.5014 1C12.4485 1 13.0839 1.30552 13.4722 1.80636C13.8031 2.23312 14 2.84313 14 3.63325H15C15 2.68242 14.7626 1.83856 14.2625 1.19361C13.6389 0.38943 12.6743 0 11.5014 0C10.4294 0 9.53523 0.337871 8.91218 1.0021C8.29351 1.66167 8 2.58135 8 3.63601V6H1C0.447715 6 0 6.44772 0 7V13C0 13.5523 0.447715 14 1 14H10C10.5523 14 11 13.5523 11 13V7C11 6.44772 10.5523 6 10 6H9V3.63601ZM1 7H10V13H1V7Z\",\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\"\n    }));\n}\nfunction Vector({ value, onUpdate, settings, innerLabelTrim }) {\n    const { id, setSettings } = useInputContext();\n    const { lock, locked } = settings;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Container, {\n        withLock: lock\n    }, lock && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Lock, {\n        locked: locked,\n        onClick: ()=>setSettings({\n                locked: !locked\n            })\n    }), Object.keys(value).map((key, i)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Coordinate, {\n            id: i === 0 ? id : `${id}.${key}`,\n            key: key,\n            valueKey: key,\n            value: value,\n            settings: settings[key],\n            onUpdate: onUpdate,\n            innerLabelTrim: innerLabelTrim\n        })));\n}\nconst normalizeKeyedNumberSettings = (value, settings)=>{\n    const _settings = {};\n    let maxStep = 0;\n    let minPad = Infinity;\n    Object.entries(value).forEach(([key, v])=>{\n        _settings[key] = normalize$2(_objectSpread2({\n            value: v\n        }, settings[key])).settings;\n        maxStep = Math.max(maxStep, _settings[key].step);\n        minPad = Math.min(minPad, _settings[key].pad);\n    });\n    for(let key in _settings){\n        const { step, min, max } = settings[key] || {};\n        if (!isFinite(step) && (!isFinite(min) || !isFinite(max))) {\n            _settings[key].step = maxStep;\n            _settings[key].pad = minPad;\n        }\n    }\n    return _settings;\n};\nconst _excluded = [\n    \"lock\"\n], _excluded2 = [\n    \"value\"\n];\nfunction getVectorSchema(dimension) {\n    const isVectorArray = (0,v8n__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().array().length(dimension).every.number();\n    const isVectorObject = (o)=>{\n        if (!o || typeof o !== \"object\") return false;\n        const values = Object.values(o);\n        return values.length === dimension && values.every((v)=>isFinite(v));\n    };\n    return (o)=>{\n        return isVectorArray.test(o) || isVectorObject(o);\n    };\n}\nfunction getVectorType(value) {\n    return Array.isArray(value) ? \"array\" : \"object\";\n}\nfunction convert(value, format, keys) {\n    if (getVectorType(value) === format) return value;\n    return format === \"array\" ? Object.values(value) : mapArrayToKeys(value, keys);\n}\nconst sanitizeVector = (value, settings, previousValue)=>{\n    const _value = convert(value, \"object\", settings.keys);\n    for(let key in _value)_value[key] = sanitize$3(_value[key], settings[key]);\n    const _valueKeys = Object.keys(_value);\n    let newValue = {};\n    if (_valueKeys.length === settings.keys.length) newValue = _value;\n    else {\n        const _previousValue = convert(previousValue, \"object\", settings.keys);\n        if (_valueKeys.length === 1 && settings.locked) {\n            const lockedKey = _valueKeys[0];\n            const lockedCoordinate = _value[lockedKey];\n            const previousLockedCoordinate = _previousValue[lockedKey];\n            const ratio = previousLockedCoordinate !== 0 ? lockedCoordinate / previousLockedCoordinate : 1;\n            for(let key in _previousValue){\n                if (key === lockedKey) newValue[lockedKey] = lockedCoordinate;\n                else newValue[key] = _previousValue[key] * ratio;\n            }\n        } else {\n            newValue = _objectSpread2(_objectSpread2({}, _previousValue), _value);\n        }\n    }\n    return convert(newValue, settings.format, settings.keys);\n};\nconst formatVector = (value, settings)=>convert(value, \"object\", settings.keys);\nconst isNumberSettings = (o)=>!!o && (\"step\" in o || \"min\" in o || \"max\" in o);\nfunction normalizeVector(value, settings, defaultKeys = []) {\n    const { lock = false } = settings, _settings = _objectWithoutProperties(settings, _excluded);\n    const format = Array.isArray(value) ? \"array\" : \"object\";\n    const keys = format === \"object\" ? Object.keys(value) : defaultKeys;\n    const _value = convert(value, \"object\", keys);\n    const mergedSettings = isNumberSettings(_settings) ? keys.reduce((acc, k)=>Object.assign(acc, {\n            [k]: _settings\n        }), {}) : _settings;\n    const numberSettings = normalizeKeyedNumberSettings(_value, mergedSettings);\n    return {\n        value: format === \"array\" ? value : _value,\n        settings: _objectSpread2(_objectSpread2({}, numberSettings), {}, {\n            format,\n            keys,\n            lock,\n            locked: false\n        })\n    };\n}\nfunction getVectorPlugin(defaultKeys) {\n    return {\n        schema: getVectorSchema(defaultKeys.length),\n        normalize: (_ref)=>{\n            let { value } = _ref, settings = _objectWithoutProperties(_ref, _excluded2);\n            return normalizeVector(value, settings, defaultKeys);\n        },\n        format: (value, settings)=>formatVector(value, settings),\n        sanitize: (value, settings, prevValue)=>sanitizeVector(value, settings, prevValue)\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/dist/vector-plugin-6f82aee9.esm.js\n");

/***/ })

};
;