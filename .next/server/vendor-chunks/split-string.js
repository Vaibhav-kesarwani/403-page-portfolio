"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/split-string";
exports.ids = ["vendor-chunks/split-string"];
exports.modules = {

/***/ "(ssr)/./node_modules/split-string/index.js":
/*!********************************************!*\
  !*** ./node_modules/split-string/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * split-string <https://github.com/jonschlinkert/split-string>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */ \nvar extend = __webpack_require__(/*! extend-shallow */ \"(ssr)/./node_modules/split-string/node_modules/extend-shallow/index.js\");\nmodule.exports = function(str, options, fn) {\n    if (typeof str !== \"string\") {\n        throw new TypeError(\"expected a string\");\n    }\n    if (typeof options === \"function\") {\n        fn = options;\n        options = null;\n    }\n    // allow separator to be defined as a string\n    if (typeof options === \"string\") {\n        options = {\n            sep: options\n        };\n    }\n    var opts = extend({\n        sep: \".\"\n    }, options);\n    var quotes = opts.quotes || [\n        '\"',\n        \"'\",\n        \"`\"\n    ];\n    var brackets;\n    if (opts.brackets === true) {\n        brackets = {\n            \"<\": \">\",\n            \"(\": \")\",\n            \"[\": \"]\",\n            \"{\": \"}\"\n        };\n    } else if (opts.brackets) {\n        brackets = opts.brackets;\n    }\n    var tokens = [];\n    var stack = [];\n    var arr = [\n        \"\"\n    ];\n    var sep = opts.sep;\n    var len = str.length;\n    var idx = -1;\n    var closeIdx;\n    function expected() {\n        if (brackets && stack.length) {\n            return brackets[stack[stack.length - 1]];\n        }\n    }\n    while(++idx < len){\n        var ch = str[idx];\n        var next = str[idx + 1];\n        var tok = {\n            val: ch,\n            idx: idx,\n            arr: arr,\n            str: str\n        };\n        tokens.push(tok);\n        if (ch === \"\\\\\") {\n            tok.val = keepEscaping(opts, str, idx) === true ? ch + next : next;\n            tok.escaped = true;\n            if (typeof fn === \"function\") {\n                fn(tok);\n            }\n            arr[arr.length - 1] += tok.val;\n            idx++;\n            continue;\n        }\n        if (brackets && brackets[ch]) {\n            stack.push(ch);\n            var e = expected();\n            var i = idx + 1;\n            if (str.indexOf(e, i + 1) !== -1) {\n                while(stack.length && i < len){\n                    var s = str[++i];\n                    if (s === \"\\\\\") {\n                        s++;\n                        continue;\n                    }\n                    if (quotes.indexOf(s) !== -1) {\n                        i = getClosingQuote(str, s, i + 1);\n                        continue;\n                    }\n                    e = expected();\n                    if (stack.length && str.indexOf(e, i + 1) === -1) {\n                        break;\n                    }\n                    if (brackets[s]) {\n                        stack.push(s);\n                        continue;\n                    }\n                    if (e === s) {\n                        stack.pop();\n                    }\n                }\n            }\n            closeIdx = i;\n            if (closeIdx === -1) {\n                arr[arr.length - 1] += ch;\n                continue;\n            }\n            ch = str.slice(idx, closeIdx + 1);\n            tok.val = ch;\n            tok.idx = idx = closeIdx;\n        }\n        if (quotes.indexOf(ch) !== -1) {\n            closeIdx = getClosingQuote(str, ch, idx + 1);\n            if (closeIdx === -1) {\n                arr[arr.length - 1] += ch;\n                continue;\n            }\n            if (keepQuotes(ch, opts) === true) {\n                ch = str.slice(idx, closeIdx + 1);\n            } else {\n                ch = str.slice(idx + 1, closeIdx);\n            }\n            tok.val = ch;\n            tok.idx = idx = closeIdx;\n        }\n        if (typeof fn === \"function\") {\n            fn(tok, tokens);\n            ch = tok.val;\n            idx = tok.idx;\n        }\n        if (tok.val === sep && tok.split !== false) {\n            arr.push(\"\");\n            continue;\n        }\n        arr[arr.length - 1] += tok.val;\n    }\n    return arr;\n};\nfunction getClosingQuote(str, ch, i, brackets) {\n    var idx = str.indexOf(ch, i);\n    if (str.charAt(idx - 1) === \"\\\\\") {\n        return getClosingQuote(str, ch, idx + 1);\n    }\n    return idx;\n}\nfunction keepQuotes(ch, opts) {\n    if (opts.keepDoubleQuotes === true && ch === '\"') return true;\n    if (opts.keepSingleQuotes === true && ch === \"'\") return true;\n    return opts.keepQuotes;\n}\nfunction keepEscaping(opts, str, idx) {\n    if (typeof opts.keepEscaping === \"function\") {\n        return opts.keepEscaping(str, idx);\n    }\n    return opts.keepEscaping === true || str[idx + 1] === \"\\\\\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/split-string/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/split-string/node_modules/extend-shallow/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/split-string/node_modules/extend-shallow/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar isExtendable = __webpack_require__(/*! is-extendable */ \"(ssr)/./node_modules/is-extendable/index.js\");\nvar assignSymbols = __webpack_require__(/*! assign-symbols */ \"(ssr)/./node_modules/assign-symbols/index.js\");\nmodule.exports = Object.assign || function(obj /*, objects*/ ) {\n    if (obj === null || typeof obj === \"undefined\") {\n        throw new TypeError(\"Cannot convert undefined or null to object\");\n    }\n    if (!isObject(obj)) {\n        obj = {};\n    }\n    for(var i = 1; i < arguments.length; i++){\n        var val = arguments[i];\n        if (isString(val)) {\n            val = toObject(val);\n        }\n        if (isObject(val)) {\n            assign(obj, val);\n            assignSymbols(obj, val);\n        }\n    }\n    return obj;\n};\nfunction assign(a, b) {\n    for(var key in b){\n        if (hasOwn(b, key)) {\n            a[key] = b[key];\n        }\n    }\n}\nfunction isString(val) {\n    return val && typeof val === \"string\";\n}\nfunction toObject(str) {\n    var obj = {};\n    for(var i in str){\n        obj[i] = str[i];\n    }\n    return obj;\n}\nfunction isObject(val) {\n    return val && typeof val === \"object\" || isExtendable(val);\n}\n/**\n * Returns true if the given `key` is an own property of `obj`.\n */ function hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction isEnum(obj, key) {\n    return Object.prototype.propertyIsEnumerable.call(obj, key);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3BsaXQtc3RyaW5nL25vZGVfbW9kdWxlcy9leHRlbmQtc2hhbGxvdy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDO0FBQzNCLElBQUlDLGdCQUFnQkQsbUJBQU9BLENBQUM7QUFFNUJFLE9BQU9DLE9BQU8sR0FBR0MsT0FBT0MsTUFBTSxJQUFJLFNBQVNDLElBQUcsV0FBVyxHQUFYO0lBQzVDLElBQUlBLFFBQVEsUUFBUSxPQUFPQSxRQUFRLGFBQWE7UUFDOUMsTUFBTSxJQUFJQyxVQUFVO0lBQ3RCO0lBQ0EsSUFBSSxDQUFDQyxTQUFTRixNQUFNO1FBQ2xCQSxNQUFNLENBQUM7SUFDVDtJQUNBLElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7UUFDekMsSUFBSUcsTUFBTUYsU0FBUyxDQUFDRCxFQUFFO1FBQ3RCLElBQUlJLFNBQVNELE1BQU07WUFDakJBLE1BQU1FLFNBQVNGO1FBQ2pCO1FBQ0EsSUFBSUosU0FBU0ksTUFBTTtZQUNqQlAsT0FBT0MsS0FBS007WUFDWlgsY0FBY0ssS0FBS007UUFDckI7SUFDRjtJQUNBLE9BQU9OO0FBQ1Q7QUFFQSxTQUFTRCxPQUFPVSxDQUFDLEVBQUVDLENBQUM7SUFDbEIsSUFBSyxJQUFJQyxPQUFPRCxFQUFHO1FBQ2pCLElBQUlFLE9BQU9GLEdBQUdDLE1BQU07WUFDbEJGLENBQUMsQ0FBQ0UsSUFBSSxHQUFHRCxDQUFDLENBQUNDLElBQUk7UUFDakI7SUFDRjtBQUNGO0FBRUEsU0FBU0osU0FBU0QsR0FBRztJQUNuQixPQUFRQSxPQUFPLE9BQU9BLFFBQVE7QUFDaEM7QUFFQSxTQUFTRSxTQUFTSyxHQUFHO0lBQ25CLElBQUliLE1BQU0sQ0FBQztJQUNYLElBQUssSUFBSUcsS0FBS1UsSUFBSztRQUNqQmIsR0FBRyxDQUFDRyxFQUFFLEdBQUdVLEdBQUcsQ0FBQ1YsRUFBRTtJQUNqQjtJQUNBLE9BQU9IO0FBQ1Q7QUFFQSxTQUFTRSxTQUFTSSxHQUFHO0lBQ25CLE9BQU8sT0FBUSxPQUFPQSxRQUFRLFlBQWFiLGFBQWFhO0FBQzFEO0FBRUE7O0NBRUMsR0FFRCxTQUFTTSxPQUFPWixHQUFHLEVBQUVXLEdBQUc7SUFDdEIsT0FBT2IsT0FBT2dCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNoQixLQUFLVztBQUNuRDtBQUVBLFNBQVNNLE9BQU9qQixHQUFHLEVBQUVXLEdBQUc7SUFDdEIsT0FBT2IsT0FBT2dCLFNBQVMsQ0FBQ0ksb0JBQW9CLENBQUNGLElBQUksQ0FBQ2hCLEtBQUtXO0FBQ3pEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JlYXRpdmUtNDA0Ly4vbm9kZV9tb2R1bGVzL3NwbGl0LXN0cmluZy9ub2RlX21vZHVsZXMvZXh0ZW5kLXNoYWxsb3cvaW5kZXguanM/NzEyMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpc0V4dGVuZGFibGUgPSByZXF1aXJlKCdpcy1leHRlbmRhYmxlJyk7XG52YXIgYXNzaWduU3ltYm9scyA9IHJlcXVpcmUoJ2Fzc2lnbi1zeW1ib2xzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbihvYmovKiwgb2JqZWN0cyovKSB7XG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KG9iaikpIHtcbiAgICBvYmogPSB7fTtcbiAgfVxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWwgPSBhcmd1bWVudHNbaV07XG4gICAgaWYgKGlzU3RyaW5nKHZhbCkpIHtcbiAgICAgIHZhbCA9IHRvT2JqZWN0KHZhbCk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgICBhc3NpZ24ob2JqLCB2YWwpO1xuICAgICAgYXNzaWduU3ltYm9scyhvYmosIHZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59O1xuXG5mdW5jdGlvbiBhc3NpZ24oYSwgYikge1xuICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgIGlmIChoYXNPd24oYiwga2V5KSkge1xuICAgICAgYVtrZXldID0gYltrZXldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpO1xufVxuXG5mdW5jdGlvbiB0b09iamVjdChzdHIpIHtcbiAgdmFyIG9iaiA9IHt9O1xuICBmb3IgKHZhciBpIGluIHN0cikge1xuICAgIG9ialtpXSA9IHN0cltpXTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHx8IGlzRXh0ZW5kYWJsZSh2YWwpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gYGtleWAgaXMgYW4gb3duIHByb3BlcnR5IG9mIGBvYmpgLlxuICovXG5cbmZ1bmN0aW9uIGhhc093bihvYmosIGtleSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxuZnVuY3Rpb24gaXNFbnVtKG9iaiwga2V5KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBrZXkpO1xufVxuIl0sIm5hbWVzIjpbImlzRXh0ZW5kYWJsZSIsInJlcXVpcmUiLCJhc3NpZ25TeW1ib2xzIiwibW9kdWxlIiwiZXhwb3J0cyIsIk9iamVjdCIsImFzc2lnbiIsIm9iaiIsIlR5cGVFcnJvciIsImlzT2JqZWN0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInZhbCIsImlzU3RyaW5nIiwidG9PYmplY3QiLCJhIiwiYiIsImtleSIsImhhc093biIsInN0ciIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImlzRW51bSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/split-string/node_modules/extend-shallow/index.js\n");

/***/ })

};
;